package com.github.pedrovgs.rtest1h;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test001");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("BinaryNode{data=18}", "97");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test002");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator0 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str4 = pathCalculator0.calculate("", "/", "hi!");
        java.lang.String str8 = pathCalculator0.calculate("BinaryNode{data=10}", "/100##/[/32/", "112197661");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/hi!/" + "'", str4.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/BinaryNode{data=10}/100##/[/32/112197661/" + "'", str8.equals("/BinaryNode{data=10}/100##/[/32/112197661/"));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test003");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        java.lang.String str13 = listnode_mergeSortedArrays12.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = reverseLinkedList10.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays28 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays28);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = listnode_mergeSortedArrays29.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = listnode_mergeSortedArrays29.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays32 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort33 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray34 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array37 = new int[] { (byte) 1, (byte) 10 };
        splitArray34.splitSwappingPartition(i_array37);
        selectionSort33.sort(i_array37);
        com.github.pedrovgs.problem8.SplitArray splitArray40 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array43 = new int[] { (byte) 1, (byte) 10 };
        splitArray40.splitSwappingPartition(i_array43);
        int[] i_array51 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray40.splitSwappingRecursive(i_array51);
        int[] i_array53 = mergeSortedArrays32.merge(i_array37, i_array51);
        listnode_mergeSortedArrays29.setData(mergeSortedArrays32);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays32);
        listNode26.setData(mergeSortedArrays32);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode58 = findKthElement0.find(listNode26, 52002);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertNotNull(listnode_i9);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays30);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array53);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test004");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = null;
        binarynode_i8.setRight(binarynode_i9);
        boolean b11 = listnode_mergeSortedArrays4.equals((java.lang.Object) binarynode_i9);
        com.github.pedrovgs.linkedlist.ListNode listNode12 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i18 = reverseLinkedList14.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode19 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays20 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays21 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays20);
        java.lang.String str22 = listnode_mergeSortedArrays21.toString();
        deleteListNode19.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays21);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers26 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b27 = listnode_mergeSortedArrays25.equals((java.lang.Object) mergeBinaryNumbers26);
        deleteListNode19.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i29 = reverseLinkedList14.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i34 = reverseLinkedList30.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode35 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        java.lang.String str38 = listnode_mergeSortedArrays37.toString();
        deleteListNode35.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays40);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers42 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b43 = listnode_mergeSortedArrays41.equals((java.lang.Object) mergeBinaryNumbers42);
        deleteListNode35.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i45 = reverseLinkedList30.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        com.github.pedrovgs.linkedlist.ListNode listNode46 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i45);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode46);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList48 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode52 = reverseLinkedList48.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem62.PalindromeList palindromeList53 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList54 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays55);
        java.lang.String str57 = listnode_mergeSortedArrays56.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i58 = reverseLinkedList54.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays56);
        boolean b59 = palindromeList53.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays56);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays60 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays61 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays60);
        java.lang.String str62 = listnode_mergeSortedArrays61.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        java.lang.String str65 = listnode_mergeSortedArrays64.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays66 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays64.setData(mergeSortedArrays66);
        listnode_mergeSortedArrays61.setNext(listnode_mergeSortedArrays64);
        boolean b69 = palindromeList53.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays61);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode70 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays71 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays72 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays71);
        java.lang.String str73 = listnode_mergeSortedArrays72.toString();
        deleteListNode70.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays72);
        boolean b75 = palindromeList53.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays72);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i76 = reverseLinkedList48.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays72);
        boolean b77 = listNode46.equals((java.lang.Object) listnode_i76);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i79 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode46, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(listNode12);
        org.junit.Assert.assertNotNull(listnode_i18);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNotNull(listnode_i29);
        org.junit.Assert.assertNotNull(listnode_i34);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(listnode_i45);
        org.junit.Assert.assertNotNull(listNode46);
        org.junit.Assert.assertNotNull(listNode52);
        org.junit.Assert.assertNotNull(listnode_i58);
        org.junit.Assert.assertTrue(b59 == true);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertTrue(b75 == true);
        org.junit.Assert.assertNotNull(listnode_i76);
        org.junit.Assert.assertTrue(b77 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test005");
        com.github.pedrovgs.problem54.RotateMatrix rotateMatrix0 = new com.github.pedrovgs.problem54.RotateMatrix();
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros1 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array7 = new int[] { 107, 3628800 };
        int[][] i_array_array8 = new int[][] { i_array7 };
        int[] i_array9 = goThroughMatrixInSpiral2.go(i_array_array8);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array8);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral11 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array12 = new int[][] {};
        int[] i_array13 = goThroughMatrixInSpiral11.go(i_array_array12);
        int[] i_array16 = new int[] { 107, 3628800 };
        int[][] i_array_array17 = new int[][] { i_array16 };
        int[] i_array18 = goThroughMatrixInSpiral11.go(i_array_array17);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array17);
        try {
            rotateMatrix0.rotate(i_array_array17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array_array17);
        org.junit.Assert.assertNotNull(i_array18);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test006");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i6 = reverseLinkedList2.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        boolean b7 = palindromeList1.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = null;
        binarynode_i13.setRight(binarynode_i14);
        boolean b16 = listnode_mergeSortedArrays9.equals((java.lang.Object) binarynode_i14);
        listnode_mergeSortedArrays4.setNext(listnode_mergeSortedArrays9);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = listnode_mergeSortedArrays9.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements19 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList20 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = null;
        binarynode_i26.setRight(binarynode_i27);
        boolean b29 = listnode_mergeSortedArrays22.equals((java.lang.Object) binarynode_i27);
        com.github.pedrovgs.linkedlist.ListNode listNode30 = reverseLinkedList20.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        removeListDuplicatedElements19.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode30);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements19);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList33 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements34 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList35 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        java.lang.String str38 = listnode_mergeSortedArrays37.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode39 = reverseLinkedList35.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        removeListDuplicatedElements34.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i41 = getTheElementInTheMiddleOfTheList33.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        removeListDuplicatedElements19.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        listnode_mergeSortedArrays9.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode39);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode45 = findKthElement0.find(listNode39, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(listnode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays11);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertNotNull(listNode30);
        org.junit.Assert.assertNotNull(listNode39);
        org.junit.Assert.assertNotNull(listnode_i41);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test007");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        floodFill0.apply(i_array_array2, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral9 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array10 = new int[][] {};
        int[] i_array11 = goThroughMatrixInSpiral9.go(i_array_array10);
        int[] i_array18 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array25 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array26 = new int[][] { i_array18, i_array25 };
        int[] i_array27 = goThroughMatrixInSpiral9.go(i_array_array26);
        floodFill0.apply(i_array_array26, (-8), (-14040), 2147483647, (-8));
        com.github.pedrovgs.problem42.FloodFill floodFill33 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem42.FloodFill floodFill34 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral35 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array36 = new int[][] {};
        int[] i_array37 = goThroughMatrixInSpiral35.go(i_array_array36);
        floodFill34.apply(i_array_array36, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral43 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array44 = new int[][] {};
        int[] i_array45 = goThroughMatrixInSpiral43.go(i_array_array44);
        int[] i_array52 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array59 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array60 = new int[][] { i_array52, i_array59 };
        int[] i_array61 = goThroughMatrixInSpiral43.go(i_array_array60);
        floodFill34.apply(i_array_array60, (-8), (-14040), 2147483647, (-8));
        floodFill33.apply(i_array_array60, 27, 0, 0, (int) ' ');
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros72 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral73 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array74 = new int[][] {};
        int[] i_array75 = goThroughMatrixInSpiral73.go(i_array_array74);
        int[] i_array78 = new int[] { 107, 3628800 };
        int[][] i_array_array79 = new int[][] { i_array78 };
        int[] i_array80 = goThroughMatrixInSpiral73.go(i_array_array79);
        rewriteRowAndColumnsWithZeros72.rewrite(i_array_array79);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral82 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array83 = new int[][] {};
        int[] i_array84 = goThroughMatrixInSpiral82.go(i_array_array83);
        rewriteRowAndColumnsWithZeros72.rewrite(i_array_array83);
        floodFill33.apply(i_array_array83, (-97), 30, 30, (int) (short) 100);
        floodFill0.apply(i_array_array83, 104, (int) (short) -1, 100, (int) (short) 1);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array_array10);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array_array26);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array_array36);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array_array44);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array_array60);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(i_array_array74);
        org.junit.Assert.assertNotNull(i_array75);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(i_array_array79);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertNotNull(i_array_array83);
        org.junit.Assert.assertNotNull(i_array84);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test008");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode11);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements13 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode18 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        removeListDuplicatedElements13.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList21 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = null;
        binarynode_i27.setRight(binarynode_i28);
        boolean b30 = listnode_mergeSortedArrays23.equals((java.lang.Object) binarynode_i28);
        com.github.pedrovgs.linkedlist.ListNode listNode31 = reverseLinkedList21.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode32 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        deleteListNode32.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers39 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b40 = listnode_mergeSortedArrays38.equals((java.lang.Object) mergeBinaryNumbers39);
        deleteListNode32.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays38);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i42 = reverseLinkedList21.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays38);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers45 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b46 = listnode_mergeSortedArrays44.equals((java.lang.Object) mergeBinaryNumbers45);
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList21.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel48 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel49 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST50 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        boolean b55 = isBST50.checkRecursive(binarynode_i54);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode56 = binaryTreeByLevel49.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode57 = binaryTreeByLevel48.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth58 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i61 = new java.util.Stack<java.lang.Integer>();
        boolean b62 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i61, i_array60);
        boolean b63 = stack_i61.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST64 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i65 = stack_i61.search((java.lang.Object) sortedArrayToBST64);
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST64.transform(i_array69);
        int i71 = binaryTreeDepth58.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i70);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth72 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i75 = new java.util.Stack<java.lang.Integer>();
        boolean b76 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i75, i_array74);
        boolean b77 = stack_i75.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST78 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i79 = stack_i75.search((java.lang.Object) sortedArrayToBST78);
        java.lang.Integer[] i_array83 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = sortedArrayToBST78.transform(i_array83);
        int i85 = binaryTreeDepth72.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84);
        int i86 = binaryTreeDepth58.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode87 = binaryTreeByLevel48.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84);
        boolean b88 = listNode47.equals((java.lang.Object) binaryTreeByLevel48);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode47);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertNotNull(listNode18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertTrue(b30 == false);
        org.junit.Assert.assertNotNull(listNode31);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNotNull(listnode_i42);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertNotNull(list_binaryNode56);
        org.junit.Assert.assertNotNull(list_binaryNode57);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertTrue(b62 == true);
        org.junit.Assert.assertTrue(b63 == false);
        org.junit.Assert.assertTrue(i65 == (-1));
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertTrue(i71 == 2);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertTrue(b76 == true);
        org.junit.Assert.assertTrue(b77 == false);
        org.junit.Assert.assertTrue(i79 == (-1));
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(binarynode_i84);
        org.junit.Assert.assertTrue(i85 == 2);
        org.junit.Assert.assertTrue(i86 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode87);
        org.junit.Assert.assertTrue(b88 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test009");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i5.trimToSize();
        vector_i5.add((int) (short) 0, (java.lang.Integer) 0);
        java.util.stream.Stream<java.lang.Integer> stream_i14 = vector_i5.stream();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = vector_i5.removeElement((java.lang.Object) sortedArrayToBST15);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates20 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates21 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST22 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array24 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = sortedArrayToBST22.transform(i_array24);
        java.lang.Integer[] i_array26 = removeDuplicates21.removeUsingSorting(i_array24);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        java.lang.Integer[] i_array31 = removeDuplicates21.removeUsingSorting(i_array29);
        java.lang.Integer[] i_array32 = removeDuplicates20.removeUsingSorting(i_array29);
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 2, (-14040), (-14040), 27 };
        java.lang.Integer[] i_array38 = removeDuplicates20.removeUsingSet(i_array37);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates39 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates40 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        java.lang.Integer[] i_array45 = removeDuplicates40.removeUsingSorting(i_array43);
        java.lang.Integer[] i_array46 = removeDuplicates39.removeUsingSorting(i_array45);
        java.lang.Integer[] i_array47 = removeDuplicates20.removeUsingSet(i_array46);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates48 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        java.lang.Integer[] i_array53 = removeDuplicates48.removeUsingSorting(i_array51);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST54 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array56 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = sortedArrayToBST54.transform(i_array56);
        java.lang.Integer[] i_array58 = removeDuplicates48.removeUsingSorting(i_array56);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates59 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates60 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST61 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = sortedArrayToBST61.transform(i_array63);
        java.lang.Integer[] i_array65 = removeDuplicates60.removeUsingSorting(i_array63);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST66 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array68 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = sortedArrayToBST66.transform(i_array68);
        java.lang.Integer[] i_array70 = removeDuplicates60.removeUsingSorting(i_array68);
        java.lang.Integer[] i_array71 = removeDuplicates59.removeUsingSorting(i_array68);
        java.lang.Integer[] i_array72 = removeDuplicates48.removeUsingSet(i_array71);
        java.lang.Integer[] i_array73 = removeDuplicates20.removeUsingSet(i_array72);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i74 = sortedArrayToBST15.transform(i_array73);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates75 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates76 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        java.lang.Integer[] i_array81 = removeDuplicates76.removeUsingSorting(i_array79);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST82 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array84 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = sortedArrayToBST82.transform(i_array84);
        java.lang.Integer[] i_array86 = removeDuplicates76.removeUsingSorting(i_array84);
        java.lang.Integer[] i_array87 = removeDuplicates75.removeUsingSorting(i_array84);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates88 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates89 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST90 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array92 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i93 = sortedArrayToBST90.transform(i_array92);
        java.lang.Integer[] i_array94 = removeDuplicates89.removeUsingSorting(i_array92);
        java.lang.Integer[] i_array95 = removeDuplicates88.removeUsingSorting(i_array94);
        java.lang.Integer[] i_array96 = removeDuplicates75.removeUsingSorting(i_array95);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i97 = sortedArrayToBST15.transform(i_array95);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertNotNull(stream_i14);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(binarynode_i25);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(binarynode_i57);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(binarynode_i64);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(binarynode_i69);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(i_array73);
        org.junit.Assert.assertNotNull(binarynode_i74);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(binarynode_i85);
        org.junit.Assert.assertNotNull(i_array86);
        org.junit.Assert.assertNotNull(i_array87);
        org.junit.Assert.assertNotNull(i_array92);
        org.junit.Assert.assertNotNull(binarynode_i93);
        org.junit.Assert.assertNotNull(i_array94);
        org.junit.Assert.assertNotNull(i_array95);
        org.junit.Assert.assertNotNull(i_array96);
        org.junit.Assert.assertNotNull(binarynode_i97);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test010");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i3 = new java.util.Stack<java.lang.Integer>();
        boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i3, i_array2);
        boolean b5 = stack_i3.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i7 = stack_i3.search((java.lang.Object) sortedArrayToBST6);
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST6.transform(i_array11);
        try {
            java.lang.Integer i14 = findMinNumberAtPosition0.find(binarynode_i12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b5 == false);
        org.junit.Assert.assertTrue(i7 == (-1));
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test011");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        java.lang.String str13 = listnode_mergeSortedArrays12.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = reverseLinkedList10.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList28 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements29 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode34 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        removeListDuplicatedElements29.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = getTheElementInTheMiddleOfTheList28.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i37 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i39 = partitionList0.split(listnode_i37, 101);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertNotNull(listnode_i9);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNotNull(listNode34);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNotNull(listnode_i37);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test012");
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding0 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i3 = subtractAdding0.subtract(0, (int) (byte) 1);
        int i6 = subtractAdding0.subtract(0, 78);
        org.junit.Assert.assertTrue(i3 == (-1));
        org.junit.Assert.assertTrue(i6 == (-78));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test013");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("/]1-[/]1- ,1 ,1 ,0[/01/", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test014");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideRecursive(9, 18);
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == 0.5f);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test015");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        com.github.pedrovgs.problem45.FindNthMostRepeatedElement findNthMostRepeatedElement12 = new com.github.pedrovgs.problem45.FindNthMostRepeatedElement();
        boolean b13 = vector_i4.contains((java.lang.Object) findNthMostRepeatedElement12);
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements14 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral15 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array16 = new int[][] {};
        int[] i_array17 = goThroughMatrixInSpiral15.go(i_array_array16);
        int[] i_array18 = multiplyArrayElements14.multiply(i_array17);
        try {
            int i20 = findNthMostRepeatedElement12.find(i_array17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array18);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test016");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressRecursive("/hi!/");
        java.lang.String str12 = compressString0.compressAlternativeApproach("3");
        java.lang.String str14 = compressString0.compressAlternativeApproach("/###01001/79/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "/hi!/" + "'", str10.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "3" + "'", str12.equals("3"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "/#301021/79/" + "'", str14.equals("/#301021/79/"));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test017");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("1", "97");
        boolean b6 = simpleRegularExpression0.evaluate("[", "[]");
        boolean b9 = simpleRegularExpression0.evaluate("/23/[/##001/", "0");
        boolean b12 = simpleRegularExpression0.evaluate("/32/-52/7/", "[-1, 10]");
        boolean b15 = simpleRegularExpression0.evaluate("/BinaryNode{data=10}/100##/[/32/112197661/", "BinaryNode{data=100}");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b15 == false);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test018");
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 0, 0 };
        java.util.Vector<java.lang.Integer> vector_i3 = new java.util.Vector<java.lang.Integer>();
        boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i3, i_array2);
        java.lang.Object obj5 = vector_i3.clone();
        int i6 = vector_i3.size();
        com.github.pedrovgs.problem18.IsBST isBST7 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor8 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals9 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = binarynode_i13.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = binarynode_i18.getRight();
        boolean b21 = binaryTreeEquals9.areEqualsIterative(binarynode_i13, binarynode_i18);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST22 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array24 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = sortedArrayToBST22.transform(i_array24);
        boolean b26 = binarynode_i25.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode31 = lowestCommonAncestor8.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i25, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i30);
        java.lang.String str32 = binarynode_i30.toString();
        boolean b33 = isBST7.checkIterative(binarynode_i30);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST34 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = sortedArrayToBST34.transform(i_array36);
        boolean b38 = binarynode_i37.hasRight();
        java.lang.Integer i39 = binarynode_i37.getData();
        boolean b40 = isBST7.checkRecursive(binarynode_i37);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder41 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor42 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals43 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST44 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array46 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = sortedArrayToBST44.transform(i_array46);
        boolean b48 = binarynode_i47.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        boolean b53 = binarynode_i52.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = binarynode_i52.getRight();
        boolean b55 = binaryTreeEquals43.areEqualsIterative(binarynode_i47, binarynode_i52);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = binarynode_i59.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST61 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = sortedArrayToBST61.transform(i_array63);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode65 = lowestCommonAncestor42.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i64);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode66 = binaryTreePreOrder41.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59);
        boolean b67 = isBST7.checkIterative(binarynode_i59);
        int i69 = vector_i3.indexOf((java.lang.Object) binarynode_i59, 20);
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(i6 == 2);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(binarynode_i25);
        org.junit.Assert.assertTrue(b26 == false);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertNull(binaryNode31);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "BinaryNode{data=100}" + "'", str32.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(b33 == true);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == false);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertTrue(b40 == true);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(binarynode_i47);
        org.junit.Assert.assertTrue(b48 == false);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue(b53 == false);
        org.junit.Assert.assertNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == false);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(binarynode_i64);
        org.junit.Assert.assertNull(binaryNode65);
        org.junit.Assert.assertNotNull(list_binaryNode66);
        org.junit.Assert.assertTrue(b67 == true);
        org.junit.Assert.assertTrue(i69 == (-1));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test019");
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf0 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf1 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf0);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder2 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor7 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i17.getRight();
        boolean b20 = binaryTreeEquals8.areEqualsIterative(binarynode_i12, binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode30 = lowestCommonAncestor7.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i17.getLeft();
        double d32 = avlTreeMedian3.find(binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        java.lang.Integer i39 = binarynode_i36.getData();
        binarynode_i17.setLeft(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i41 = binaryTreeInOrder2.getIterative(binarynode_i36);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        java.lang.String str46 = binarynode_i45.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i47 = binaryTreeInOrder2.getIterative(binarynode_i45);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode48 = pathToEveryLeaf0.calculate(binarynode_i45);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder49 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian50 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d53 = avlTreeMedian50.find(binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode54 = binaryTreePreOrder49.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        com.github.pedrovgs.problem18.IsBST isBST55 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = isBST55.checkRecursive(binarynode_i59);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode61 = binaryTreePreOrder49.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode62 = pathToEveryLeaf0.calculate(binarynode_i59);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode65 = pathToEveryLeaf0.calculate(binarynode_i64);
        com.github.pedrovgs.problem18.IsBST isBST66 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST67.transform(i_array69);
        boolean b71 = isBST66.checkRecursive(binarynode_i70);
        boolean b72 = binarynode_i70.hasRight();
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode73 = pathToEveryLeaf0.calculate(binarynode_i70);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor74 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals75 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST76 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array78 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = sortedArrayToBST76.transform(i_array78);
        boolean b80 = binarynode_i79.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST81 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array83 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = sortedArrayToBST81.transform(i_array83);
        boolean b85 = binarynode_i84.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i86 = binarynode_i84.getRight();
        boolean b87 = binaryTreeEquals75.areEqualsIterative(binarynode_i79, binarynode_i84);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST88 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array90 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i91 = sortedArrayToBST88.transform(i_array90);
        boolean b92 = binarynode_i91.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST93 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array95 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i96 = sortedArrayToBST93.transform(i_array95);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode97 = lowestCommonAncestor74.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i91, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i96);
        boolean b98 = binarynode_i91.hasRight();
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode99 = pathToEveryLeaf0.calculate(binarynode_i91);
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertNull(binaryNode30);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(d32 == 100.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i41);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "BinaryNode{data=100}" + "'", str46.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_binarynode_i47);
        org.junit.Assert.assertNotNull(list_list_binaryNode48);
        org.junit.Assert.assertTrue(d53 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode54);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == true);
        org.junit.Assert.assertNotNull(list_binaryNode61);
        org.junit.Assert.assertNotNull(list_list_binaryNode62);
        org.junit.Assert.assertNotNull(list_list_binaryNode65);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertTrue(b71 == true);
        org.junit.Assert.assertTrue(b72 == false);
        org.junit.Assert.assertNotNull(list_list_binaryNode73);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(binarynode_i79);
        org.junit.Assert.assertTrue(b80 == false);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(binarynode_i84);
        org.junit.Assert.assertTrue(b85 == false);
        org.junit.Assert.assertNull(binarynode_i86);
        org.junit.Assert.assertTrue(b87 == true);
        org.junit.Assert.assertNotNull(i_array90);
        org.junit.Assert.assertNotNull(binarynode_i91);
        org.junit.Assert.assertTrue(b92 == false);
        org.junit.Assert.assertNotNull(i_array95);
        org.junit.Assert.assertNotNull(binarynode_i96);
        org.junit.Assert.assertNull(binaryNode97);
        org.junit.Assert.assertTrue(b98 == false);
        org.junit.Assert.assertNotNull(list_list_binaryNode99);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test020");
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray0 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray2 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array5 = new int[] { (byte) 1, (byte) 10 };
        splitArray2.splitSwappingPartition(i_array5);
        splitArray1.splitSwappingRecursive(i_array5);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral8 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array9 = new int[][] {};
        int[] i_array10 = goThroughMatrixInSpiral8.go(i_array_array9);
        splitArray1.splitSwappingRecursive(i_array10);
        moveZerosInArray0.moveSorting(i_array10);
        int[] i_array13 = null;
        try {
            moveZerosInArray0.moveUsingTwoPointers(i_array13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array9);
        org.junit.Assert.assertNotNull(i_array10);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test021");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideIterative((int) (byte) 100, (int) 'a');
        try {
            float f9 = divideUsingSubtraction0.divideIterative(52002, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 1.0309278f);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test022");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (byte) 1, (int) '#');
        float f9 = divideUsingSubtraction0.divideRecursive(0, 24);
        float f12 = divideUsingSubtraction0.divideIterative((int) (short) 0, 1);
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.028571429f);
        org.junit.Assert.assertTrue(f9 == 0.0f);
        org.junit.Assert.assertTrue(f12 == 0.0f);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test023");
        com.github.pedrovgs.problem32.Contains contains0 = new com.github.pedrovgs.problem32.Contains();
        boolean b3 = contains0.evaluate("", "/");
        boolean b6 = contains0.evaluate("[-1]", "[nul2]");
        boolean b9 = contains0.evaluate("/23/[/#2021/", "10210#3");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test024");
        com.github.pedrovgs.problem68.IsEven isEven0 = new com.github.pedrovgs.problem68.IsEven();
        boolean b2 = isEven0.check(1484783616);
        boolean b4 = isEven0.check((int) (byte) -1);
        boolean b6 = isEven0.check(0);
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == true);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test025");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        boolean b5 = stack_i2.empty();
        try {
            java.lang.Integer i7 = stack_i2.elementAt(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b5 == false);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test026");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = listnode_mergeSortedArrays9.getNext();
        listNode6.setNext(listnode_mergeSortedArrays11);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList13 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements14 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode19 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        removeListDuplicatedElements14.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i21 = getTheElementInTheMiddleOfTheList13.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList22 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        java.lang.String str25 = listnode_mergeSortedArrays24.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i26 = reverseLinkedList22.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList27 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays28 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays28);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = listnode_mergeSortedArrays29.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = listnode_mergeSortedArrays29.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = null;
        binarynode_i33.setRight(binarynode_i34);
        boolean b36 = listnode_mergeSortedArrays29.equals((java.lang.Object) binarynode_i34);
        com.github.pedrovgs.linkedlist.ListNode listNode37 = reverseLinkedList27.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays29);
        com.github.pedrovgs.linkedlist.ListNode listNode38 = reverseLinkedList22.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays29);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i39 = getTheElementInTheMiddleOfTheList13.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode38);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList40 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements41 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        java.lang.String str45 = listnode_mergeSortedArrays44.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode46 = reverseLinkedList42.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        removeListDuplicatedElements41.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode46);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i48 = getTheElementInTheMiddleOfTheList40.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode46);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i49 = getTheElementInTheMiddleOfTheList13.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode46);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList50 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements51 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList52 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        java.lang.String str55 = listnode_mergeSortedArrays54.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode56 = reverseLinkedList52.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        removeListDuplicatedElements51.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode56);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i58 = getTheElementInTheMiddleOfTheList50.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode56);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i59 = getTheElementInTheMiddleOfTheList13.get(listnode_i58);
        try {
            int i60 = sumLists0.sumReverse((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6, listnode_i59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays11);
        org.junit.Assert.assertNotNull(listNode19);
        org.junit.Assert.assertNotNull(listnode_i21);
        org.junit.Assert.assertNotNull(listnode_i26);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays30);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays31);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNotNull(listNode37);
        org.junit.Assert.assertNotNull(listNode38);
        org.junit.Assert.assertNotNull(listnode_i39);
        org.junit.Assert.assertNotNull(listNode46);
        org.junit.Assert.assertNotNull(listnode_i48);
        org.junit.Assert.assertNotNull(listnode_i49);
        org.junit.Assert.assertNotNull(listNode56);
        org.junit.Assert.assertNotNull(listnode_i58);
        org.junit.Assert.assertNotNull(listnode_i59);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test027");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        java.lang.String str13 = listnode_mergeSortedArrays12.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = reverseLinkedList10.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange29 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange30 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange29);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList31 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays32 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays32);
        java.lang.String str34 = listnode_mergeSortedArrays33.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode35 = reverseLinkedList31.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays33);
        boolean b36 = pair_comparable_str_combinationsOfChange30.equals((java.lang.Object) listNode35);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i37 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i39 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35, 19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertNotNull(listnode_i9);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNotNull(listNode35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNotNull(listnode_i37);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test028");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        java.lang.String str3 = listnode_mergeSortedArrays2.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i4 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList5 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays6 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays6);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays8 = listnode_mergeSortedArrays7.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = listnode_mergeSortedArrays7.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = null;
        binarynode_i11.setRight(binarynode_i12);
        boolean b14 = listnode_mergeSortedArrays7.equals((java.lang.Object) binarynode_i12);
        com.github.pedrovgs.linkedlist.ListNode listNode15 = reverseLinkedList5.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays7);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode16 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        deleteListNode16.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers23 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b24 = listnode_mergeSortedArrays22.equals((java.lang.Object) mergeBinaryNumbers23);
        deleteListNode16.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i26 = reverseLinkedList5.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList28 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements29 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = listnode_mergeSortedArrays32.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = listnode_mergeSortedArrays32.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = null;
        binarynode_i36.setRight(binarynode_i37);
        boolean b39 = listnode_mergeSortedArrays32.equals((java.lang.Object) binarynode_i37);
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        removeListDuplicatedElements29.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements42 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList43 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays44 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays44);
        java.lang.String str46 = listnode_mergeSortedArrays45.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList43.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays45);
        removeListDuplicatedElements42.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode47);
        removeListDuplicatedElements29.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode47);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i50 = getTheElementInTheMiddleOfTheList28.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode47);
        com.github.pedrovgs.linkedlist.ListNode listNode51 = reverseLinkedList0.reverseIterative(listNode47);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays52 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays53 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays52);
        java.lang.String str54 = listnode_mergeSortedArrays53.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays55);
        java.lang.String str57 = listnode_mergeSortedArrays56.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays58 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays56.setData(mergeSortedArrays58);
        listnode_mergeSortedArrays53.setNext(listnode_mergeSortedArrays56);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays61 = listnode_mergeSortedArrays53.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays62 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort63 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray64 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array67 = new int[] { (byte) 1, (byte) 10 };
        splitArray64.splitSwappingPartition(i_array67);
        selectionSort63.sort(i_array67);
        com.github.pedrovgs.problem8.SplitArray splitArray70 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array73 = new int[] { (byte) 1, (byte) 10 };
        splitArray70.splitSwappingPartition(i_array73);
        int[] i_array81 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray70.splitSwappingRecursive(i_array81);
        int[] i_array83 = mergeSortedArrays62.merge(i_array67, i_array81);
        listnode_mergeSortedArrays53.setData(mergeSortedArrays62);
        com.github.pedrovgs.linkedlist.ListNode listNode85 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays53);
        org.junit.Assert.assertNotNull(listnode_i4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays8);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays9);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertNotNull(listNode15);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listnode_i26);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays33);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays34);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertNotNull(listnode_i50);
        org.junit.Assert.assertNotNull(listNode51);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays61);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array73);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(listNode85);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test029");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getRecursive((int) '#');
        int i8 = factorial0.getIterative(107);
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 0);
        org.junit.Assert.assertTrue(i8 == 0);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test030");
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays0 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays0);
        java.lang.String str2 = listnode_mergeSortedArrays1.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays1.setData(mergeSortedArrays3);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays1.getNext();
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test031");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((int) (byte) -1, (int) (byte) 1);
        int i6 = multiplicationWithoutMultiply0.calculate(10, 27);
        int i9 = multiplicationWithoutMultiply0.calculate(3, 7);
        int i12 = multiplicationWithoutMultiply0.calculate((int) (short) 1, 3628800);
        org.junit.Assert.assertTrue(i3 == (-1));
        org.junit.Assert.assertTrue(i6 == 270);
        org.junit.Assert.assertTrue(i9 == 21);
        org.junit.Assert.assertTrue(i12 == 3628800);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test032");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i23 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements24 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList25 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays26);
        java.lang.String str28 = listnode_mergeSortedArrays27.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode29 = reverseLinkedList25.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays27);
        removeListDuplicatedElements24.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode29);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode29);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements32 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList33 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = null;
        binarynode_i39.setRight(binarynode_i40);
        boolean b42 = listnode_mergeSortedArrays35.equals((java.lang.Object) binarynode_i40);
        com.github.pedrovgs.linkedlist.ListNode listNode43 = reverseLinkedList33.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        removeListDuplicatedElements32.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode43);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements45 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList46 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays47 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays48 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays47);
        java.lang.String str49 = listnode_mergeSortedArrays48.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode50 = reverseLinkedList46.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays48);
        removeListDuplicatedElements45.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        removeListDuplicatedElements32.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i53 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode55 = findKthElement0.find2((com.github.pedrovgs.linkedlist.ListNode) listnode_i53, 72);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listnode_i23);
        org.junit.Assert.assertNotNull(listNode29);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(listNode43);
        org.junit.Assert.assertNotNull(listNode50);
        org.junit.Assert.assertNotNull(listnode_i53);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test033");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("97");
        java.lang.String str4 = reverseSentence0.reverse("[3]");
        java.lang.String str6 = reverseSentence0.reverse("79");
        java.lang.String str8 = reverseSentence0.reverse("100");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[3]" + "'", str4.equals("[3]"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "79" + "'", str6.equals("79"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "100" + "'", str8.equals("100"));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test034");
        com.github.pedrovgs.problem32.Contains contains0 = new com.github.pedrovgs.problem32.Contains();
        boolean b3 = contains0.evaluate("", "/");
        boolean b6 = contains0.evaluate("[]", "BinaryNode{data=100}");
        boolean b9 = contains0.evaluate("35", "[null]");
        boolean b12 = contains0.evaluate("BinaryNode{data=100}", "1");
        try {
            boolean b15 = contains0.evaluate("", "!ih");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test035");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        java.lang.Integer i11 = vector_i4.remove((int) (short) 1);
        boolean b13 = vector_i4.equals((java.lang.Object) 10.0f);
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange15 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange16 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange15);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList17 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        java.lang.String str20 = listnode_mergeSortedArrays19.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode21 = reverseLinkedList17.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        boolean b22 = pair_comparable_str_combinationsOfChange16.equals((java.lang.Object) listNode21);
        boolean b23 = vector_i4.removeElement((java.lang.Object) b22);
        try {
            java.lang.Integer i25 = vector_i4.get(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue("'" + i11 + "' != '" + 1 + "'", i11.equals(1));
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(listNode21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertTrue(b23 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test036");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder2 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreePreOrder2.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i8 = binaryTreeInOrder1.getIterative(binarynode_i5);
        com.github.pedrovgs.problem18.IsBST isBST9 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = isBST9.checkRecursive(binarynode_i13);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals15 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array18 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = sortedArrayToBST16.transform(i_array18);
        boolean b20 = binarynode_i19.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = binarynode_i24.getRight();
        boolean b27 = binaryTreeEquals15.areEqualsIterative(binarynode_i19, binarynode_i24);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i19.getLeft();
        boolean b29 = isBST9.checkIterative(binarynode_i19);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals30 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST36 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array38 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = sortedArrayToBST36.transform(i_array38);
        boolean b40 = binarynode_i39.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = binarynode_i39.getRight();
        boolean b42 = binaryTreeEquals30.areEqualsIterative(binarynode_i34, binarynode_i39);
        boolean b43 = isBST9.checkIterative(binarynode_i39);
        boolean b44 = binaryTreeEquals0.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i39);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder45 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel46 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel47 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST48 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        boolean b53 = isBST48.checkRecursive(binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode54 = binaryTreeByLevel47.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode55 = binaryTreeByLevel46.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i56 = binaryTreeInOrder45.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = null;
        boolean b58 = binaryTreeEquals0.areEqualsIterative(binarynode_i52, binarynode_i57);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = null;
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST60 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST60.transform(i_array62);
        java.lang.String str64 = binarynode_i63.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_65 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_65.push((int) (byte) 10);
        int i68 = stack1_65.getMin();
        boolean b69 = binarynode_i63.equals((java.lang.Object) stack1_65);
        java.lang.Integer i70 = binarynode_i63.getData();
        try {
            boolean b71 = binaryTreeEquals0.areEqualsIterative(binarynode_i59, binarynode_i63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(list_binarynode_i8);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == true);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(binarynode_i39);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == true);
        org.junit.Assert.assertTrue(b43 == true);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue(b53 == true);
        org.junit.Assert.assertNotNull(list_binaryNode54);
        org.junit.Assert.assertNotNull(list_binaryNode55);
        org.junit.Assert.assertNotNull(list_binarynode_i56);
        org.junit.Assert.assertTrue(b58 == false);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "BinaryNode{data=100}" + "'", str64.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i68 == 10);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertTrue("'" + i70 + "' != '" + 100 + "'", i70.equals(100));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test037");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        int i3 = stack2_0.capacity();
        try {
            stack2_0.add((-80), (java.lang.Integer) 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(i3 == 10);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test038");
        com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber reverseOrderOfBinaryNumber0 = new com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber();
        int i2 = reverseOrderOfBinaryNumber0.reverse((int) ' ');
        int i4 = reverseOrderOfBinaryNumber0.reverse(2147483647);
        int i6 = reverseOrderOfBinaryNumber0.reverse(29);
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 2147483647);
        org.junit.Assert.assertTrue(i6 == 23);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test039");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate2("35");
        boolean b6 = uniqueChars0.evaluate2("/32/-52/7/");
        boolean b8 = uniqueChars0.evaluate("[]");
        boolean b10 = uniqueChars0.evaluate2("10210#3");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b10 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test040");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization1 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        java.lang.Integer i7 = binarynode_i5.getData();
        java.lang.String str8 = binaryTreeSerialization1.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        boolean b9 = isBST0.checkIterative(binarynode_i5);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder10 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian11 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d14 = avlTreeMedian11.find(binarynode_i13);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode15 = binaryTreePreOrder10.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        com.github.pedrovgs.problem18.IsBST isBST16 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST17 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array19 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = sortedArrayToBST17.transform(i_array19);
        boolean b21 = isBST16.checkRecursive(binarynode_i20);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode22 = binaryTreePreOrder10.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i20);
        boolean b23 = isBST0.checkRecursive(binarynode_i20);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = binarynode_i20.getRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = null;
        try {
            binarynode_i24.setRight(binarynode_i25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "100##" + "'", str8.equals("100##"));
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(d14 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode15);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNotNull(list_binaryNode22);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertNull(binarynode_i24);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test041");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        java.util.Spliterator<java.lang.Integer> spliterator_i10 = vector_i5.spliterator();
        try {
            java.lang.Integer i12 = vector_i5.elementAt(78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertNotNull(spliterator_i10);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test042");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode1 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays5 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays5);
        java.lang.String str7 = listnode_mergeSortedArrays6.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays6.setData(mergeSortedArrays8);
        listnode_mergeSortedArrays3.setNext(listnode_mergeSortedArrays6);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = listnode_mergeSortedArrays12.getNext();
        listnode_mergeSortedArrays3.setNext(listnode_mergeSortedArrays12);
        deleteListNode1.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode17 = findKthElement0.find((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12, (-13631485));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays13);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test043");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compressAlternativeApproach("/!ih");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test044");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.ensureCapacity((int) (short) 100);
        int i3 = stack2_0.getMin();
        java.util.ListIterator<java.lang.Integer> listiterator_i4 = stack2_0.listIterator();
        com.github.pedrovgs.problem25.Anagrams anagrams5 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str7 = anagrams5.get("hi!");
        java.util.List<java.lang.String> list_str9 = anagrams5.get("/");
        com.github.pedrovgs.problem25.Anagrams anagrams10 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str12 = anagrams10.get("0");
        java.util.List<java.lang.String> list_str14 = anagrams10.get("0");
        java.util.List<java.lang.String> list_str16 = anagrams10.get("[null]");
        com.github.pedrovgs.problem25.Anagrams anagrams17 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str19 = anagrams17.get("0");
        java.util.List<java.lang.String> list_str21 = anagrams17.get("0");
        com.github.pedrovgs.problem25.Anagrams anagrams22 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str24 = anagrams22.get("0");
        java.util.List<java.lang.String> list_str26 = anagrams22.get("/hi!/");
        java.util.List<java.lang.String> list_str28 = anagrams22.get("35");
        com.github.pedrovgs.problem25.Anagrams anagrams29 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str31 = anagrams29.get("0");
        java.util.List<java.lang.String> list_str33 = anagrams29.get("/hi!/");
        java.util.List<java.lang.String> list_str35 = anagrams29.get("35");
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array36 = new com.github.pedrovgs.problem25.Anagrams[] { anagrams5, anagrams10, anagrams17, anagrams22, anagrams29 };
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array37 = stack2_0.toArray(anagrams_array36);
        try {
            java.lang.Integer i39 = stack2_0.remove(1241513983);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(i3 == 2147483647);
        org.junit.Assert.assertNotNull(listiterator_i4);
        org.junit.Assert.assertNotNull(list_str7);
        org.junit.Assert.assertNotNull(list_str9);
        org.junit.Assert.assertNotNull(list_str12);
        org.junit.Assert.assertNotNull(list_str14);
        org.junit.Assert.assertNotNull(list_str16);
        org.junit.Assert.assertNotNull(list_str19);
        org.junit.Assert.assertNotNull(list_str21);
        org.junit.Assert.assertNotNull(list_str24);
        org.junit.Assert.assertNotNull(list_str26);
        org.junit.Assert.assertNotNull(list_str28);
        org.junit.Assert.assertNotNull(list_str31);
        org.junit.Assert.assertNotNull(list_str33);
        org.junit.Assert.assertNotNull(list_str35);
        org.junit.Assert.assertNotNull(anagrams_array36);
        org.junit.Assert.assertNotNull(anagrams_array37);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test045");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("/97/10010###/", "-");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test046");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array7 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces1.replace(char_array7);
        replaceSpaces0.replace(char_array7);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces10 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces11 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces12 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array13 = new char[] {};
        replaceSpaces12.replace2(char_array13);
        replaceSpaces11.replace(char_array13);
        replaceSpaces10.replace(char_array13);
        replaceSpaces0.replace(char_array13);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces18 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array24 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces18.replace(char_array24);
        replaceSpaces0.replace2(char_array24);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces27 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces28 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array34 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces28.replace(char_array34);
        replaceSpaces27.replace(char_array34);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces37 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array38 = new char[] {};
        replaceSpaces37.replace2(char_array38);
        replaceSpaces27.replace(char_array38);
        replaceSpaces0.replace2(char_array38);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces42 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces43 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array49 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces43.replace(char_array49);
        replaceSpaces42.replace(char_array49);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces52 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces53 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces54 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array55 = new char[] {};
        replaceSpaces54.replace2(char_array55);
        replaceSpaces53.replace(char_array55);
        replaceSpaces52.replace(char_array55);
        replaceSpaces42.replace(char_array55);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces60 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces61 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array67 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces61.replace(char_array67);
        replaceSpaces60.replace(char_array67);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces70 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces71 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces72 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array73 = new char[] {};
        replaceSpaces72.replace2(char_array73);
        replaceSpaces71.replace(char_array73);
        replaceSpaces70.replace(char_array73);
        replaceSpaces60.replace(char_array73);
        replaceSpaces42.replace2(char_array73);
        replaceSpaces0.replace2(char_array73);
        org.junit.Assert.assertNotNull(char_array7);
        org.junit.Assert.assertNotNull(char_array13);
        org.junit.Assert.assertNotNull(char_array24);
        org.junit.Assert.assertNotNull(char_array34);
        org.junit.Assert.assertNotNull(char_array38);
        org.junit.Assert.assertNotNull(char_array49);
        org.junit.Assert.assertNotNull(char_array55);
        org.junit.Assert.assertNotNull(char_array67);
        org.junit.Assert.assertNotNull(char_array73);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test047");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        java.lang.Object obj13 = null;
        int i14 = vector_i4.lastIndexOf(obj13);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        int i17 = vector_i4.lastIndexOf((java.lang.Object) binarynode_i16);
        try {
            java.lang.Integer i19 = vector_i4.elementAt(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue(i14 == (-1));
        org.junit.Assert.assertTrue(i17 == (-1));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test048");
        com.github.pedrovgs.problem28.FindSums findSums0 = new com.github.pedrovgs.problem28.FindSums();
        com.github.pedrovgs.problem28.FindSums findSums1 = new com.github.pedrovgs.problem28.FindSums();
        com.github.pedrovgs.problem8.SplitArray splitArray2 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        com.github.pedrovgs.problem8.SplitArray splitArray5 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array8 = new int[] { (byte) 1, (byte) 10 };
        splitArray5.splitSwappingPartition(i_array8);
        int[] i_array16 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray5.splitSwappingRecursive(i_array16);
        com.github.pedrovgs.problem8.SplitArray splitArray18 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array21 = new int[] { (byte) 1, (byte) 10 };
        splitArray18.splitSwappingPartition(i_array21);
        int[] i_array29 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray18.splitSwappingRecursive(i_array29);
        int[] i_array31 = mergeSortedArrays3.merge(i_array16, i_array29);
        splitArray2.splitSwappingIterative(i_array29);
        com.github.pedrovgs.problem76.InsertionSort insertionSort33 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray34 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        com.github.pedrovgs.problem8.SplitArray splitArray37 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array40 = new int[] { (byte) 1, (byte) 10 };
        splitArray37.splitSwappingPartition(i_array40);
        int[] i_array48 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray37.splitSwappingRecursive(i_array48);
        com.github.pedrovgs.problem8.SplitArray splitArray50 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array53 = new int[] { (byte) 1, (byte) 10 };
        splitArray50.splitSwappingPartition(i_array53);
        int[] i_array61 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray50.splitSwappingRecursive(i_array61);
        int[] i_array63 = mergeSortedArrays35.merge(i_array48, i_array61);
        splitArray34.splitSwappingIterative(i_array61);
        insertionSort33.sort(i_array61);
        splitArray2.splitSwappingRecursive(i_array61);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i68 = findSums1.findLinearComplexityOrder(i_array61, 0);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i70 = findSums0.findLinearComplexityOrder(i_array61, 32);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(list_pair_i_i68);
        org.junit.Assert.assertNotNull(list_pair_i_i70);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test049");
        com.github.pedrovgs.problem7.FibonacciNumbers fibonacciNumbers0 = new com.github.pedrovgs.problem7.FibonacciNumbers();
        long long2 = fibonacciNumbers0.getIterative((long) 10);
        long long4 = fibonacciNumbers0.getIterative((long) 30);
        long long6 = fibonacciNumbers0.getRecursiveWithCaching((int) (short) 10);
        org.junit.Assert.assertTrue(long2 == 55L);
        org.junit.Assert.assertTrue(long4 == 832040L);
        org.junit.Assert.assertTrue(long6 == 55L);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test050");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(0);
        int i4 = factorial0.getTailRecursive((int) (byte) 10);
        int i6 = factorial0.getIterative((int) ' ');
        try {
            int i8 = factorial0.getRecursive((-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == (-2147483648));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test051");
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor0 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals1 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = binarynode_i10.getRight();
        boolean b13 = binaryTreeEquals1.areEqualsIterative(binarynode_i5, binarynode_i10);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode23 = lowestCommonAncestor0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = binarynode_i10.getLeft();
        com.github.pedrovgs.problem18.IsBST isBST25 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        boolean b30 = isBST25.checkRecursive(binarynode_i29);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals31 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST37 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array39 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = sortedArrayToBST37.transform(i_array39);
        boolean b41 = binarynode_i40.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = binarynode_i40.getRight();
        boolean b43 = binaryTreeEquals31.areEqualsIterative(binarynode_i35, binarynode_i40);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = binarynode_i35.getLeft();
        boolean b45 = isBST25.checkIterative(binarynode_i35);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals46 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        boolean b51 = binarynode_i50.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        boolean b56 = binarynode_i55.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = binarynode_i55.getRight();
        boolean b58 = binaryTreeEquals46.areEqualsIterative(binarynode_i50, binarynode_i55);
        boolean b59 = isBST25.checkIterative(binarynode_i55);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = null;
        binarynode_i55.setLeft(binarynode_i60);
        try {
            binarynode_i24.setLeft(binarynode_i60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertNull(binaryNode23);
        org.junit.Assert.assertNull(binarynode_i24);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertTrue(b30 == true);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(binarynode_i40);
        org.junit.Assert.assertTrue(b41 == false);
        org.junit.Assert.assertNull(binarynode_i42);
        org.junit.Assert.assertTrue(b43 == true);
        org.junit.Assert.assertNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == true);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNull(binarynode_i57);
        org.junit.Assert.assertTrue(b58 == true);
        org.junit.Assert.assertTrue(b59 == true);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test052");
        com.github.pedrovgs.problem30.ScientificNotation scientificNotation0 = new com.github.pedrovgs.problem30.ScientificNotation();
        try {
            long long2 = scientificNotation0.calculate("/###01001/79/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test053");
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange1 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange2 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange1);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        com.github.pedrovgs.problem8.SplitArray splitArray5 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array8 = new int[] { (byte) 1, (byte) 10 };
        splitArray5.splitSwappingPartition(i_array8);
        int[] i_array16 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray5.splitSwappingRecursive(i_array16);
        com.github.pedrovgs.problem8.SplitArray splitArray18 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array21 = new int[] { (byte) 1, (byte) 10 };
        splitArray18.splitSwappingPartition(i_array21);
        int[] i_array29 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray18.splitSwappingRecursive(i_array29);
        int[] i_array31 = mergeSortedArrays3.merge(i_array16, i_array29);
        boolean b32 = pair_comparable_str_combinationsOfChange2.equals((java.lang.Object) i_array16);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates33 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        boolean b34 = pair_comparable_str_combinationsOfChange2.equals((java.lang.Object) removeDuplicates33);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        java.lang.Integer[] i_array39 = removeDuplicates33.removeUsingSorting(i_array37);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertNotNull(i_array39);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test054");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate2("BinaryNode{data=100}");
        boolean b6 = uniqueChars0.evaluate2("[");
        boolean b8 = uniqueChars0.evaluate("");
        boolean b10 = uniqueChars0.evaluate2("[nul2]");
        boolean b12 = uniqueChars0.evaluate("-6");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == true);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test055");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        try {
            int i4 = factorial0.getTailRecursive((-2147471027));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 3628800);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test056");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (short) -1, (int) 'a');
        float f9 = divideUsingSubtraction0.divideRecursive((-1241513984), 10);
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == (-0.010309278f));
        org.junit.Assert.assertTrue(f9 == (-1.241514E8f));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test057");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = reverseLinkedList32.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList37 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays40 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = null;
        binarynode_i43.setRight(binarynode_i44);
        boolean b46 = listnode_mergeSortedArrays39.equals((java.lang.Object) binarynode_i44);
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList37.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays39);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode48 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers55 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b56 = listnode_mergeSortedArrays54.equals((java.lang.Object) mergeBinaryNumbers55);
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i58 = reverseLinkedList37.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList60 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements61 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList62 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = null;
        binarynode_i68.setRight(binarynode_i69);
        boolean b71 = listnode_mergeSortedArrays64.equals((java.lang.Object) binarynode_i69);
        com.github.pedrovgs.linkedlist.ListNode listNode72 = reverseLinkedList62.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        removeListDuplicatedElements61.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements74 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList75 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays76 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays77 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays76);
        java.lang.String str78 = listnode_mergeSortedArrays77.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode79 = reverseLinkedList75.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays77);
        removeListDuplicatedElements74.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        removeListDuplicatedElements61.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i82 = getTheElementInTheMiddleOfTheList60.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode83 = reverseLinkedList32.reverseIterative(listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i84 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode86 = findKthElement0.find(listNode79, 0);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode87 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays88 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays89 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays88);
        java.lang.String str90 = listnode_mergeSortedArrays89.toString();
        deleteListNode87.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays89);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays92 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays93 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays92);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers94 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b95 = listnode_mergeSortedArrays93.equals((java.lang.Object) mergeBinaryNumbers94);
        deleteListNode87.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays93);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode98 = findKthElement0.find3((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays93, 28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays40);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays41);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listnode_i58);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays65);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays66);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(listNode72);
        org.junit.Assert.assertNotNull(listNode79);
        org.junit.Assert.assertNotNull(listnode_i82);
        org.junit.Assert.assertNotNull(listNode83);
        org.junit.Assert.assertNotNull(listnode_i84);
        org.junit.Assert.assertNotNull(listNode86);
        org.junit.Assert.assertTrue(b95 == false);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test058");
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList0 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i8 = getTheElementInTheMiddleOfTheList0.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList9 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements10 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList11 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = listnode_mergeSortedArrays13.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays15 = listnode_mergeSortedArrays13.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = null;
        binarynode_i17.setRight(binarynode_i18);
        boolean b20 = listnode_mergeSortedArrays13.equals((java.lang.Object) binarynode_i18);
        com.github.pedrovgs.linkedlist.ListNode listNode21 = reverseLinkedList11.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays13);
        removeListDuplicatedElements10.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode21);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        removeListDuplicatedElements10.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements31 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        removeListDuplicatedElements31.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        removeListDuplicatedElements10.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i39 = getTheElementInTheMiddleOfTheList9.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements40 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList41 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays42 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays42);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = listnode_mergeSortedArrays43.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = listnode_mergeSortedArrays43.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = null;
        binarynode_i47.setRight(binarynode_i48);
        boolean b50 = listnode_mergeSortedArrays43.equals((java.lang.Object) binarynode_i48);
        com.github.pedrovgs.linkedlist.ListNode listNode51 = reverseLinkedList41.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays43);
        removeListDuplicatedElements40.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode51);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements53 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements40);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList54 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements55 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList56 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays57 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays58 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays57);
        java.lang.String str59 = listnode_mergeSortedArrays58.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode60 = reverseLinkedList56.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays58);
        removeListDuplicatedElements55.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode60);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i62 = getTheElementInTheMiddleOfTheList54.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode60);
        removeListDuplicatedElements40.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode60);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i64 = getTheElementInTheMiddleOfTheList9.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode60);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i65 = getTheElementInTheMiddleOfTheList0.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode60);
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNotNull(listnode_i8);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays15);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(listNode21);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertNotNull(listnode_i39);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays44);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays45);
        org.junit.Assert.assertTrue(b50 == false);
        org.junit.Assert.assertNotNull(listNode51);
        org.junit.Assert.assertNotNull(listNode60);
        org.junit.Assert.assertNotNull(listnode_i62);
        org.junit.Assert.assertNotNull(listnode_i64);
        org.junit.Assert.assertNotNull(listnode_i65);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test059");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (byte) 1, (int) '#');
        float f9 = divideUsingSubtraction0.divideRecursive(0, 24);
        float f12 = divideUsingSubtraction0.divideIterative(720, 1);
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.028571429f);
        org.junit.Assert.assertTrue(f9 == 0.0f);
        org.junit.Assert.assertTrue(f12 == 720.0f);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test060");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        java.lang.String str5 = binarynode_i4.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_6 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_6.push((int) (byte) 10);
        int i9 = stack1_6.getMin();
        boolean b10 = binarynode_i4.equals((java.lang.Object) stack1_6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode11 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i4);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode16 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = binarynode_i15.getLeft();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "BinaryNode{data=100}" + "'", str5.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i9 == 10);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(list_binaryNode11);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertNotNull(list_binaryNode16);
        org.junit.Assert.assertNull(binarynode_i17);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test061");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((-52), (int) (byte) 100);
        int i6 = multiplicationWithoutMultiply0.calculate(3, 20);
        org.junit.Assert.assertTrue(i3 == (-5200));
        org.junit.Assert.assertTrue(i6 == 60);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test062");
        com.github.pedrovgs.problem56.IsRotationUsingIsSubstring isRotationUsingIsSubstring0 = new com.github.pedrovgs.problem56.IsRotationUsingIsSubstring();
        boolean b3 = isRotationUsingIsSubstring0.check("", "");
        boolean b6 = isRotationUsingIsSubstring0.check("10010###", "/");
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test063");
        com.github.pedrovgs.problem47.ReturnChange returnChange0 = new com.github.pedrovgs.problem47.ReturnChange();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements1 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array5 = multiplyArrayElements1.multiply(i_array4);
        com.github.pedrovgs.problem80.QuickSort quickSort6 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem8.SplitArray splitArray7 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array10 = new int[] { (byte) 1, (byte) 10 };
        splitArray7.splitSwappingPartition(i_array10);
        com.github.pedrovgs.problem2.Vector vector12 = new com.github.pedrovgs.problem2.Vector(i_array10);
        quickSort6.sort(i_array10);
        int[] i_array14 = multiplyArrayElements1.multiply(i_array10);
        java.util.List<java.lang.Integer> list_i16 = returnChange0.calculate(i_array14, 3);
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber17 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem72.FindTheMissingNumber> listnode_findTheMissingNumber18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem72.FindTheMissingNumber>(findTheMissingNumber17);
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray19 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem75.SelectionSort selectionSort20 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray21 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array24 = new int[] { (byte) 1, (byte) 10 };
        splitArray21.splitSwappingPartition(i_array24);
        selectionSort20.sort(i_array24);
        moveZerosInArray19.moveUsingTwoPointers(i_array24);
        int i28 = findTheMissingNumber17.find(i_array24);
        java.util.List<java.lang.Integer> list_i30 = returnChange0.calculate(i_array24, 60);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(list_i16);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertTrue(i28 == (-8));
        org.junit.Assert.assertNotNull(list_i30);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test064");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        floodFill0.apply(i_array_array2, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros9 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral10 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array11 = new int[][] {};
        int[] i_array12 = goThroughMatrixInSpiral10.go(i_array_array11);
        int[] i_array15 = new int[] { 107, 3628800 };
        int[][] i_array_array16 = new int[][] { i_array15 };
        int[] i_array17 = goThroughMatrixInSpiral10.go(i_array_array16);
        rewriteRowAndColumnsWithZeros9.rewrite(i_array_array16);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral19 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array20 = new int[][] {};
        int[] i_array21 = goThroughMatrixInSpiral19.go(i_array_array20);
        rewriteRowAndColumnsWithZeros9.rewrite(i_array_array20);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral23 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array24 = new int[][] {};
        int[] i_array25 = goThroughMatrixInSpiral23.go(i_array_array24);
        int[] i_array32 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array39 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array40 = new int[][] { i_array32, i_array39 };
        int[] i_array41 = goThroughMatrixInSpiral23.go(i_array_array40);
        rewriteRowAndColumnsWithZeros9.rewrite(i_array_array40);
        floodFill0.apply(i_array_array40, 52, 6, (int) (short) 0, 13631492);
        com.github.pedrovgs.problem42.FloodFill floodFill48 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral49 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array50 = new int[][] {};
        int[] i_array51 = goThroughMatrixInSpiral49.go(i_array_array50);
        floodFill48.apply(i_array_array50, (-52), 2, (int) '#', 51);
        floodFill0.apply(i_array_array50, 78, 23, 3, 27);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array_array20);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array_array24);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array_array40);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array_array50);
        org.junit.Assert.assertNotNull(i_array51);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test065");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("[null]");
        boolean b6 = palindromes0.evaluate("-52");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test066");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.ensureCapacity((int) (short) 100);
        boolean b3 = stack2_0.empty();
        stack2_0.ensureCapacity((-14040));
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction6 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f9 = divideUsingSubtraction6.divideRecursive(29, 4);
        float f12 = divideUsingSubtraction6.divideRecursive(107, (-1241513984));
        int i13 = stack2_0.search((java.lang.Object) divideUsingSubtraction6);
        try {
            java.lang.Integer i15 = stack2_0.elementAt(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(f9 == 7.25f);
        org.junit.Assert.assertTrue(f12 == 3.4594593f);
        org.junit.Assert.assertTrue(i13 == (-1));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test067");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        java.util.Spliterator<java.lang.Integer> spliterator_i5 = stack_i2.spliterator();
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertNotNull(spliterator_i5);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test068");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem16.BinaryTreePostOrder> listnode_binaryTreePostOrder42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem16.BinaryTreePostOrder>(binaryTreePostOrder0);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode43 = null;
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode44 = binaryTreePostOrder0.getRecursive(binaryNode43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test069");
        com.github.pedrovgs.problem62.PalindromeList palindromeList0 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i5 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        boolean b6 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays8 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays7);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = null;
        binarynode_i12.setRight(binarynode_i13);
        boolean b15 = listnode_mergeSortedArrays8.equals((java.lang.Object) binarynode_i13);
        listnode_mergeSortedArrays3.setNext(listnode_mergeSortedArrays8);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = listnode_mergeSortedArrays8.getData();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays19 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays20 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays19);
        java.lang.String str21 = listnode_mergeSortedArrays20.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays20.setData(mergeSortedArrays22);
        listnode_mergeSortedArrays8.setData(mergeSortedArrays22);
        org.junit.Assert.assertNotNull(listnode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays9);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays17);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test070");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel1 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel2 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = isBST3.checkRecursive(binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreeByLevel2.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode10 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i11 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian12 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d15 = avlTreeMedian12.find(binarynode_i14);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor16 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals17 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        boolean b27 = binarynode_i26.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i26.getRight();
        boolean b29 = binaryTreeEquals17.areEqualsIterative(binarynode_i21, binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode39 = lowestCommonAncestor16.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = binarynode_i26.getLeft();
        double d41 = avlTreeMedian12.find(binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        boolean b46 = binarynode_i45.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = binarynode_i45.getRight();
        java.lang.Integer i48 = binarynode_i45.getData();
        binarynode_i26.setLeft(binarynode_i45);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i50 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian51 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d54 = avlTreeMedian51.find(binarynode_i53);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor55 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals56 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        boolean b61 = binarynode_i60.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        boolean b66 = binarynode_i65.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = binarynode_i65.getRight();
        boolean b68 = binaryTreeEquals56.areEqualsIterative(binarynode_i60, binarynode_i65);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST69 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array71 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i72 = sortedArrayToBST69.transform(i_array71);
        boolean b73 = binarynode_i72.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST74 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array76 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = sortedArrayToBST74.transform(i_array76);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode78 = lowestCommonAncestor55.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i65, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i72, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i77);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = binarynode_i65.getLeft();
        double d80 = avlTreeMedian51.find(binarynode_i65);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST81 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array83 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = sortedArrayToBST81.transform(i_array83);
        boolean b85 = binarynode_i84.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i86 = binarynode_i84.getRight();
        java.lang.Integer i87 = binarynode_i84.getData();
        binarynode_i65.setLeft(binarynode_i84);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i89 = binarynode_i84.getRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i90 = binaryTreeInOrder0.getIterative(binarynode_i84);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(list_binaryNode10);
        org.junit.Assert.assertNotNull(list_binarynode_i11);
        org.junit.Assert.assertTrue(d15 == 10.0d);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertNull(binaryNode39);
        org.junit.Assert.assertNull(binarynode_i40);
        org.junit.Assert.assertTrue(d41 == 100.0d);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNull(binarynode_i47);
        org.junit.Assert.assertTrue("'" + i48 + "' != '" + 100 + "'", i48.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i50);
        org.junit.Assert.assertTrue(d54 == 10.0d);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNull(binarynode_i67);
        org.junit.Assert.assertTrue(b68 == true);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(binarynode_i72);
        org.junit.Assert.assertTrue(b73 == false);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(binarynode_i77);
        org.junit.Assert.assertNull(binaryNode78);
        org.junit.Assert.assertNull(binarynode_i79);
        org.junit.Assert.assertTrue(d80 == 100.0d);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(binarynode_i84);
        org.junit.Assert.assertTrue(b85 == false);
        org.junit.Assert.assertNull(binarynode_i86);
        org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100 + "'", i87.equals(100));
        org.junit.Assert.assertNull(binarynode_i89);
        org.junit.Assert.assertNotNull(list_binarynode_i90);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test071");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        java.lang.Integer i13 = vector_i4.lastElement();
        java.util.function.UnaryOperator<java.lang.Integer> unaryoperator_i14 = null;
        try {
            vector_i4.replaceAll(unaryoperator_i14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue("'" + i13 + "' != '" + (-1) + "'", i13.equals((-1)));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test072");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array4 = new int[] { (byte) 1, (byte) 10 };
        splitArray1.splitSwappingPartition(i_array4);
        splitArray0.splitSwappingRecursive(i_array4);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral7 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array8 = new int[][] {};
        int[] i_array9 = goThroughMatrixInSpiral7.go(i_array_array8);
        splitArray0.splitSwappingRecursive(i_array9);
        com.github.pedrovgs.problem47.ReturnChange returnChange11 = new com.github.pedrovgs.problem47.ReturnChange();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements12 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral13 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array14 = new int[][] {};
        int[] i_array15 = goThroughMatrixInSpiral13.go(i_array_array14);
        int[] i_array16 = multiplyArrayElements12.multiply(i_array15);
        com.github.pedrovgs.problem80.QuickSort quickSort17 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem8.SplitArray splitArray18 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array21 = new int[] { (byte) 1, (byte) 10 };
        splitArray18.splitSwappingPartition(i_array21);
        com.github.pedrovgs.problem2.Vector vector23 = new com.github.pedrovgs.problem2.Vector(i_array21);
        quickSort17.sort(i_array21);
        int[] i_array25 = multiplyArrayElements12.multiply(i_array21);
        java.util.List<java.lang.Integer> list_i27 = returnChange11.calculate(i_array25, 3);
        splitArray0.splitSorting(i_array25);
        com.github.pedrovgs.problem28.FindSums findSums29 = new com.github.pedrovgs.problem28.FindSums();
        com.github.pedrovgs.problem8.SplitArray splitArray30 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        com.github.pedrovgs.problem8.SplitArray splitArray33 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array36 = new int[] { (byte) 1, (byte) 10 };
        splitArray33.splitSwappingPartition(i_array36);
        int[] i_array44 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray33.splitSwappingRecursive(i_array44);
        com.github.pedrovgs.problem8.SplitArray splitArray46 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array49 = new int[] { (byte) 1, (byte) 10 };
        splitArray46.splitSwappingPartition(i_array49);
        int[] i_array57 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray46.splitSwappingRecursive(i_array57);
        int[] i_array59 = mergeSortedArrays31.merge(i_array44, i_array57);
        splitArray30.splitSwappingIterative(i_array57);
        com.github.pedrovgs.problem76.InsertionSort insertionSort61 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray62 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.problem8.SplitArray splitArray65 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array68 = new int[] { (byte) 1, (byte) 10 };
        splitArray65.splitSwappingPartition(i_array68);
        int[] i_array76 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray65.splitSwappingRecursive(i_array76);
        com.github.pedrovgs.problem8.SplitArray splitArray78 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array81 = new int[] { (byte) 1, (byte) 10 };
        splitArray78.splitSwappingPartition(i_array81);
        int[] i_array89 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray78.splitSwappingRecursive(i_array89);
        int[] i_array91 = mergeSortedArrays63.merge(i_array76, i_array89);
        splitArray62.splitSwappingIterative(i_array89);
        insertionSort61.sort(i_array89);
        splitArray30.splitSwappingRecursive(i_array89);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i96 = findSums29.findLinearComplexityOrder(i_array89, 0);
        splitArray0.splitSorting(i_array89);
        com.github.pedrovgs.problem2.Vector vector98 = new com.github.pedrovgs.problem2.Vector(i_array89);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array_array14);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(list_i27);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertNotNull(i_array89);
        org.junit.Assert.assertNotNull(i_array91);
        org.junit.Assert.assertNotNull(list_pair_i_i96);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test073");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        java.util.Spliterator<java.lang.Integer> spliterator_i10 = vector_i5.spliterator();
        vector_i5.clear();
        java.util.Spliterator<java.lang.Integer> spliterator_i12 = vector_i5.spliterator();
        try {
            java.util.List<java.lang.Integer> list_i15 = vector_i5.subList(60, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertNotNull(spliterator_i10);
        org.junit.Assert.assertNotNull(spliterator_i12);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test074");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        java.lang.String str3 = listnode_mergeSortedArrays2.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i4 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements5 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList6 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays8 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays7);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = null;
        binarynode_i12.setRight(binarynode_i13);
        boolean b15 = listnode_mergeSortedArrays8.equals((java.lang.Object) binarynode_i13);
        com.github.pedrovgs.linkedlist.ListNode listNode16 = reverseLinkedList6.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays8);
        removeListDuplicatedElements5.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode16);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList18 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays19 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays20 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays19);
        java.lang.String str21 = listnode_mergeSortedArrays20.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i22 = reverseLinkedList18.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays20);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode23 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        deleteListNode23.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays28 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays28);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers30 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b31 = listnode_mergeSortedArrays29.equals((java.lang.Object) mergeBinaryNumbers30);
        deleteListNode23.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays29);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i33 = reverseLinkedList18.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays29);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList34 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        java.lang.String str37 = listnode_mergeSortedArrays36.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i38 = reverseLinkedList34.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays36);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode39 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays40);
        java.lang.String str42 = listnode_mergeSortedArrays41.toString();
        deleteListNode39.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays44 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays44);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers46 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b47 = listnode_mergeSortedArrays45.equals((java.lang.Object) mergeBinaryNumbers46);
        deleteListNode39.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays45);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i49 = reverseLinkedList34.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays45);
        com.github.pedrovgs.linkedlist.ListNode listNode50 = reverseLinkedList18.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i49);
        removeListDuplicatedElements5.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        com.github.pedrovgs.linkedlist.ListNode listNode52 = reverseLinkedList0.reverseIterative(listNode50);
        org.junit.Assert.assertNotNull(listnode_i4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays9);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNotNull(listNode16);
        org.junit.Assert.assertNotNull(listnode_i22);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(listnode_i33);
        org.junit.Assert.assertNotNull(listnode_i38);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNotNull(listnode_i49);
        org.junit.Assert.assertNotNull(listNode50);
        org.junit.Assert.assertNotNull(listNode52);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test075");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        java.lang.Object obj5 = stack_i2.clone();
        java.lang.Object obj6 = null;
        boolean b7 = stack_i2.removeElement(obj6);
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(b7 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test076");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        boolean b8 = vector_i5.remove((java.lang.Object) (short) -1);
        boolean b10 = vector_i5.add((java.lang.Integer) 10);
        boolean b12 = vector_i5.remove((java.lang.Object) 10L);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList13 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements14 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode19 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        removeListDuplicatedElements14.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i21 = getTheElementInTheMiddleOfTheList13.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        boolean b22 = vector_i5.contains((java.lang.Object) listnode_i21);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem62.PalindromeList palindromeList30 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList31 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays32 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays32);
        java.lang.String str34 = listnode_mergeSortedArrays33.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i35 = reverseLinkedList31.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays33);
        boolean b36 = palindromeList30.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays33);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = listnode_mergeSortedArrays38.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays40 = listnode_mergeSortedArrays38.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = null;
        binarynode_i42.setRight(binarynode_i43);
        boolean b45 = listnode_mergeSortedArrays38.equals((java.lang.Object) binarynode_i43);
        listnode_mergeSortedArrays33.setNext(listnode_mergeSortedArrays38);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays47 = listnode_mergeSortedArrays38.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements48 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList49 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays50 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays50);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays52 = listnode_mergeSortedArrays51.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays53 = listnode_mergeSortedArrays51.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = null;
        binarynode_i55.setRight(binarynode_i56);
        boolean b58 = listnode_mergeSortedArrays51.equals((java.lang.Object) binarynode_i56);
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList49.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays51);
        removeListDuplicatedElements48.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode59);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements61 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements48);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList62 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements63 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList64 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays65 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays65);
        java.lang.String str67 = listnode_mergeSortedArrays66.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode68 = reverseLinkedList64.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays66);
        removeListDuplicatedElements63.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = getTheElementInTheMiddleOfTheList62.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        removeListDuplicatedElements48.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        listnode_mergeSortedArrays38.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode68);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        boolean b74 = vector_i5.equals((java.lang.Object) listNode68);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i76 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode19);
        org.junit.Assert.assertNotNull(listnode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listnode_i35);
        org.junit.Assert.assertTrue(b36 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays39);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays40);
        org.junit.Assert.assertTrue(b45 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays47);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays52);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays53);
        org.junit.Assert.assertTrue(b58 == false);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNotNull(listNode68);
        org.junit.Assert.assertNotNull(listnode_i70);
        org.junit.Assert.assertTrue(b74 == false);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test077");
        com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber reverseOrderOfBinaryNumber0 = new com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber();
        int i2 = reverseOrderOfBinaryNumber0.reverse((int) ' ');
        int i4 = reverseOrderOfBinaryNumber0.reverse(100);
        int i6 = reverseOrderOfBinaryNumber0.reverse((int) (byte) 0);
        int i8 = reverseOrderOfBinaryNumber0.reverse(72);
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 19);
        org.junit.Assert.assertTrue(i6 == 0);
        org.junit.Assert.assertTrue(i8 == 9);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test078");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        boolean b8 = vector_i5.remove((java.lang.Object) (short) -1);
        int i10 = vector_i5.indexOf((java.lang.Object) 1);
        int i12 = vector_i5.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj13 = vector_i5.clone();
        java.lang.Object obj14 = null;
        int i15 = vector_i5.lastIndexOf(obj14);
        int i17 = stack2_0.indexOf(obj14, 0);
        java.lang.Integer i19 = stack2_0.push((java.lang.Integer) 0);
        java.util.ListIterator<java.lang.Integer> listiterator_i20 = stack2_0.listIterator();
        try {
            java.lang.Integer i22 = stack2_0.get((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == (-1));
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue(i15 == (-1));
        org.junit.Assert.assertTrue(i17 == (-1));
        org.junit.Assert.assertTrue("'" + i19 + "' != '" + 0 + "'", i19.equals(0));
        org.junit.Assert.assertNotNull(listiterator_i20);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test079");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        boolean b13 = vector_i4.contains((java.lang.Object) (byte) 100);
        int i16 = vector_i4.lastIndexOf((java.lang.Object) (-5200), 3);
        java.util.function.UnaryOperator<java.lang.Integer> unaryoperator_i17 = null;
        try {
            vector_i4.replaceAll(unaryoperator_i17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertTrue(i16 == (-1));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test080");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        java.lang.Integer i13 = vector_i4.lastElement();
        vector_i4.removeAllElements();
        com.github.pedrovgs.problem71.ReverseBinaryNumber reverseBinaryNumber15 = new com.github.pedrovgs.problem71.ReverseBinaryNumber();
        int i16 = vector_i4.lastIndexOf((java.lang.Object) reverseBinaryNumber15);
        vector_i4.addElement((java.lang.Integer) 4);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue("'" + i13 + "' != '" + (-1) + "'", i13.equals((-1)));
        org.junit.Assert.assertTrue(i16 == (-1));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test081");
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList0 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i8 = getTheElementInTheMiddleOfTheList0.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList9 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        java.lang.String str12 = listnode_mergeSortedArrays11.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i13 = reverseLinkedList9.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays11);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = null;
        binarynode_i20.setRight(binarynode_i21);
        boolean b23 = listnode_mergeSortedArrays16.equals((java.lang.Object) binarynode_i21);
        com.github.pedrovgs.linkedlist.ListNode listNode24 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList9.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i26 = getTheElementInTheMiddleOfTheList0.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode25);
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange28 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange29 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange28);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode34 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        boolean b35 = pair_comparable_str_combinationsOfChange29.equals((java.lang.Object) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = getTheElementInTheMiddleOfTheList0.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList37 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements38 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList39 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays40);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = listnode_mergeSortedArrays41.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = listnode_mergeSortedArrays41.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = null;
        binarynode_i45.setRight(binarynode_i46);
        boolean b48 = listnode_mergeSortedArrays41.equals((java.lang.Object) binarynode_i46);
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList39.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        removeListDuplicatedElements38.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements51 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList52 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        java.lang.String str55 = listnode_mergeSortedArrays54.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode56 = reverseLinkedList52.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        removeListDuplicatedElements51.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode56);
        removeListDuplicatedElements38.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode56);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i59 = getTheElementInTheMiddleOfTheList37.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode56);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i60 = getTheElementInTheMiddleOfTheList0.get2(listnode_i59);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i61 = null;
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i62 = getTheElementInTheMiddleOfTheList0.get2(listnode_i61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNotNull(listnode_i8);
        org.junit.Assert.assertNotNull(listnode_i13);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(listNode24);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listnode_i26);
        org.junit.Assert.assertNotNull(listNode34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays42);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays43);
        org.junit.Assert.assertTrue(b48 == false);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(listNode56);
        org.junit.Assert.assertNotNull(listnode_i59);
        org.junit.Assert.assertNotNull(listnode_i60);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test082");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        boolean b8 = vector_i5.remove((java.lang.Object) (short) -1);
        int i10 = vector_i5.indexOf((java.lang.Object) 1);
        int i12 = vector_i5.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj13 = vector_i5.clone();
        java.lang.Object obj14 = null;
        int i15 = vector_i5.lastIndexOf(obj14);
        int i17 = stack2_0.indexOf(obj14, 0);
        java.lang.Object[] obj_array18 = stack2_0.toArray();
        try {
            java.lang.Integer i19 = stack2_0.peek();
            org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
        } catch (java.util.EmptyStackException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == (-1));
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue(i15 == (-1));
        org.junit.Assert.assertTrue(i17 == (-1));
        org.junit.Assert.assertNotNull(obj_array18);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test083");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((-52), (int) (byte) 100);
        int i6 = multiplicationWithoutMultiply0.calculate(1, (-14040));
        int i9 = multiplicationWithoutMultiply0.calculate((-7), 270);
        org.junit.Assert.assertTrue(i3 == (-5200));
        org.junit.Assert.assertTrue(i6 == (-14040));
        org.junit.Assert.assertTrue(i9 == (-1890));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test084");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideIterative(4, 100);
        float f9 = divideUsingSubtraction0.divideIterative(1946209058, 32);
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == 0.04f);
        org.junit.Assert.assertTrue(f9 == 1.6777216E7f);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test085");
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST0 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = sortedArrayToBST0.transform(i_array2);
        boolean b4 = binarynode_i3.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = binarynode_i3.getRight();
        try {
            boolean b6 = binarynode_i5.hasRight();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertNotNull(binarynode_i3);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertNull(binarynode_i5);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test086");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode12 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers19 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b20 = listnode_mergeSortedArrays18.equals((java.lang.Object) mergeBinaryNumbers19);
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i22 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays24.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = listnode_mergeSortedArrays24.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort28 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray29 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array32 = new int[] { (byte) 1, (byte) 10 };
        splitArray29.splitSwappingPartition(i_array32);
        selectionSort28.sort(i_array32);
        com.github.pedrovgs.problem8.SplitArray splitArray35 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array38 = new int[] { (byte) 1, (byte) 10 };
        splitArray35.splitSwappingPartition(i_array38);
        int[] i_array46 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray35.splitSwappingRecursive(i_array46);
        int[] i_array48 = mergeSortedArrays27.merge(i_array32, i_array46);
        listnode_mergeSortedArrays24.setData(mergeSortedArrays27);
        java.lang.String str50 = listnode_mergeSortedArrays24.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i51 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements52 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList53 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays54 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = listnode_mergeSortedArrays55.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = listnode_mergeSortedArrays55.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = null;
        binarynode_i59.setRight(binarynode_i60);
        boolean b62 = listnode_mergeSortedArrays55.equals((java.lang.Object) binarynode_i60);
        com.github.pedrovgs.linkedlist.ListNode listNode63 = reverseLinkedList53.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays55);
        removeListDuplicatedElements52.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode63);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements65 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements52);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList66 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements67 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList68 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays69 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays70 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays69);
        java.lang.String str71 = listnode_mergeSortedArrays70.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode72 = reverseLinkedList68.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays70);
        removeListDuplicatedElements67.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i74 = getTheElementInTheMiddleOfTheList66.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        removeListDuplicatedElements52.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        boolean b76 = listnode_mergeSortedArrays24.equals((java.lang.Object) listNode72);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays77 = listnode_mergeSortedArrays24.getData();
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode79 = findKthElement0.find((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(listnode_i22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays26);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(listnode_i51);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays56);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays57);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNotNull(listNode63);
        org.junit.Assert.assertNotNull(listNode72);
        org.junit.Assert.assertNotNull(listnode_i74);
        org.junit.Assert.assertTrue(b76 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays77);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test087");
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange3 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange4 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange3);
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange5 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "[", combinationsOfChange3);
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange6 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "1", combinationsOfChange3);
        com.github.pedrovgs.problem31.FindLongestConsecutiveSequence findLongestConsecutiveSequence7 = new com.github.pedrovgs.problem31.FindLongestConsecutiveSequence();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        com.github.pedrovgs.problem8.SplitArray splitArray10 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array13 = new int[] { (byte) 1, (byte) 10 };
        splitArray10.splitSwappingPartition(i_array13);
        int[] i_array21 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray10.splitSwappingRecursive(i_array21);
        com.github.pedrovgs.problem8.SplitArray splitArray23 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array26 = new int[] { (byte) 1, (byte) 10 };
        splitArray23.splitSwappingPartition(i_array26);
        int[] i_array34 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray23.splitSwappingRecursive(i_array34);
        int[] i_array36 = mergeSortedArrays8.merge(i_array21, i_array34);
        int i37 = findLongestConsecutiveSequence7.findIterative(i_array36);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        com.github.pedrovgs.problem8.SplitArray splitArray40 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array43 = new int[] { (byte) 1, (byte) 10 };
        splitArray40.splitSwappingPartition(i_array43);
        int[] i_array51 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray40.splitSwappingRecursive(i_array51);
        com.github.pedrovgs.problem8.SplitArray splitArray53 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array56 = new int[] { (byte) 1, (byte) 10 };
        splitArray53.splitSwappingPartition(i_array56);
        int[] i_array64 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray53.splitSwappingRecursive(i_array64);
        int[] i_array66 = mergeSortedArrays38.merge(i_array51, i_array64);
        int i67 = findLongestConsecutiveSequence7.findRecursive(i_array51);
        try {
            java.util.List<java.util.List<java.lang.Integer>> list_list_i69 = combinationsOfChange3.get(i_array51, (-2147483637));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertTrue(i37 == 2);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertTrue(i67 == 2);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test088");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode11);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList13 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays14 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays15 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays14);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = listnode_mergeSortedArrays15.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays15.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = null;
        binarynode_i19.setRight(binarynode_i20);
        boolean b22 = listnode_mergeSortedArrays15.equals((java.lang.Object) binarynode_i20);
        com.github.pedrovgs.linkedlist.ListNode listNode23 = reverseLinkedList13.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays15);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode24 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        deleteListNode24.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays29 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays29);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers31 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b32 = listnode_mergeSortedArrays30.equals((java.lang.Object) mergeBinaryNumbers31);
        deleteListNode24.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays30);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i34 = reverseLinkedList13.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays30);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays39 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort40 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray41 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array44 = new int[] { (byte) 1, (byte) 10 };
        splitArray41.splitSwappingPartition(i_array44);
        selectionSort40.sort(i_array44);
        com.github.pedrovgs.problem8.SplitArray splitArray47 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array50 = new int[] { (byte) 1, (byte) 10 };
        splitArray47.splitSwappingPartition(i_array50);
        int[] i_array58 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray47.splitSwappingRecursive(i_array58);
        int[] i_array60 = mergeSortedArrays39.merge(i_array44, i_array58);
        listnode_mergeSortedArrays36.setData(mergeSortedArrays39);
        java.lang.String str62 = listnode_mergeSortedArrays36.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i63 = reverseLinkedList13.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays36);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays64 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays64);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = listnode_mergeSortedArrays65.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays67 = listnode_mergeSortedArrays65.getNext();
        com.github.pedrovgs.linkedlist.ListNode listNode68 = reverseLinkedList13.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays65);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = null;
        try {
            removeListDuplicatedElements0.remove(listnode_i70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays16);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(listNode23);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertNotNull(listnode_i34);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays38);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(listnode_i63);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays66);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays67);
        org.junit.Assert.assertNotNull(listNode68);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test089");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("1", "97");
        boolean b6 = simpleRegularExpression0.evaluate("[", "[]");
        boolean b9 = simpleRegularExpression0.evaluate("/!ih/", "/!ih/");
        boolean b12 = simpleRegularExpression0.evaluate("[1, -1, 102, 0]", "[");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test090");
        com.github.pedrovgs.problem56.IsRotationUsingIsSubstring isRotationUsingIsSubstring0 = new com.github.pedrovgs.problem56.IsRotationUsingIsSubstring();
        boolean b3 = isRotationUsingIsSubstring0.check("hi!", "");
        boolean b6 = isRotationUsingIsSubstring0.check("/", "");
        boolean b9 = isRotationUsingIsSubstring0.check("hi!", "7");
        boolean b12 = isRotationUsingIsSubstring0.check("[1, -1, 100, 0]", "3");
        boolean b15 = isRotationUsingIsSubstring0.check("", "001");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b15 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test091");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array7 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces1.replace(char_array7);
        replaceSpaces0.replace(char_array7);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces10 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces11 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces12 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array13 = new char[] {};
        replaceSpaces12.replace2(char_array13);
        replaceSpaces11.replace(char_array13);
        replaceSpaces10.replace(char_array13);
        replaceSpaces0.replace(char_array13);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces18 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array24 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces18.replace(char_array24);
        replaceSpaces0.replace2(char_array24);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces27 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces28 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array34 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces28.replace(char_array34);
        replaceSpaces27.replace(char_array34);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces37 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array38 = new char[] {};
        replaceSpaces37.replace2(char_array38);
        replaceSpaces27.replace(char_array38);
        replaceSpaces0.replace2(char_array38);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces42 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces43 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array49 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces43.replace(char_array49);
        replaceSpaces42.replace(char_array49);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces52 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces53 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces54 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array55 = new char[] {};
        replaceSpaces54.replace2(char_array55);
        replaceSpaces53.replace(char_array55);
        replaceSpaces52.replace(char_array55);
        replaceSpaces42.replace(char_array55);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces60 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces61 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array67 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces61.replace(char_array67);
        replaceSpaces60.replace(char_array67);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces70 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces71 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces72 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array73 = new char[] {};
        replaceSpaces72.replace2(char_array73);
        replaceSpaces71.replace(char_array73);
        replaceSpaces70.replace(char_array73);
        replaceSpaces60.replace(char_array73);
        replaceSpaces42.replace2(char_array73);
        replaceSpaces0.replace(char_array73);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces80 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces81 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array87 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces81.replace(char_array87);
        replaceSpaces80.replace(char_array87);
        replaceSpaces0.replace(char_array87);
        org.junit.Assert.assertNotNull(char_array7);
        org.junit.Assert.assertNotNull(char_array13);
        org.junit.Assert.assertNotNull(char_array24);
        org.junit.Assert.assertNotNull(char_array34);
        org.junit.Assert.assertNotNull(char_array38);
        org.junit.Assert.assertNotNull(char_array49);
        org.junit.Assert.assertNotNull(char_array55);
        org.junit.Assert.assertNotNull(char_array67);
        org.junit.Assert.assertNotNull(char_array73);
        org.junit.Assert.assertNotNull(char_array87);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test092");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode5 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode5);
        com.github.pedrovgs.problem62.PalindromeList palindromeList7 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList8 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i12 = reverseLinkedList8.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        boolean b13 = palindromeList7.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays14 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays15 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays14);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = listnode_mergeSortedArrays15.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays15.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = null;
        binarynode_i19.setRight(binarynode_i20);
        boolean b22 = listnode_mergeSortedArrays15.equals((java.lang.Object) binarynode_i20);
        listnode_mergeSortedArrays10.setNext(listnode_mergeSortedArrays15);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = listnode_mergeSortedArrays15.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements25 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList26 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays27);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = listnode_mergeSortedArrays28.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = listnode_mergeSortedArrays28.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = null;
        binarynode_i32.setRight(binarynode_i33);
        boolean b35 = listnode_mergeSortedArrays28.equals((java.lang.Object) binarynode_i33);
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList26.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays28);
        removeListDuplicatedElements25.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements25);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList39 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements40 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList41 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays42 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays42);
        java.lang.String str44 = listnode_mergeSortedArrays43.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode45 = reverseLinkedList41.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays43);
        removeListDuplicatedElements40.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i47 = getTheElementInTheMiddleOfTheList39.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        removeListDuplicatedElements25.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        listnode_mergeSortedArrays15.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode45);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode51 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays52 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays53 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays52);
        java.lang.String str54 = listnode_mergeSortedArrays53.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays55);
        java.lang.String str57 = listnode_mergeSortedArrays56.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays58 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays56.setData(mergeSortedArrays58);
        listnode_mergeSortedArrays53.setNext(listnode_mergeSortedArrays56);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays61 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays62 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays61);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays63 = listnode_mergeSortedArrays62.getNext();
        listnode_mergeSortedArrays53.setNext(listnode_mergeSortedArrays62);
        deleteListNode51.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays62);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList66 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays67 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays68 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays67);
        java.lang.String str69 = listnode_mergeSortedArrays68.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = reverseLinkedList66.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays68);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList71 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays72 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays73 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays72);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays74 = listnode_mergeSortedArrays73.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays75 = listnode_mergeSortedArrays73.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = null;
        binarynode_i77.setRight(binarynode_i78);
        boolean b80 = listnode_mergeSortedArrays73.equals((java.lang.Object) binarynode_i78);
        com.github.pedrovgs.linkedlist.ListNode listNode81 = reverseLinkedList71.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        com.github.pedrovgs.linkedlist.ListNode listNode82 = reverseLinkedList66.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        deleteListNode51.delete(listNode82);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode82);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i85 = null;
        try {
            removeListDuplicatedElements0.remove2(listnode_i85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(listNode5);
        org.junit.Assert.assertNotNull(listnode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays16);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays24);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays29);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays30);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertNotNull(listNode45);
        org.junit.Assert.assertNotNull(listnode_i47);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays63);
        org.junit.Assert.assertNotNull(listnode_i70);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays74);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays75);
        org.junit.Assert.assertTrue(b80 == false);
        org.junit.Assert.assertNotNull(listNode81);
        org.junit.Assert.assertNotNull(listNode82);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test093");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization1 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        java.lang.Integer i7 = binarynode_i5.getData();
        java.lang.String str8 = binaryTreeSerialization1.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        boolean b9 = isBST0.checkIterative(binarynode_i5);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals10 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST17 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array19 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = sortedArrayToBST17.transform(i_array19);
        boolean b21 = binarynode_i20.hasRight();
        boolean b22 = binaryTreeEquals10.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i20);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced23 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem75.SelectionSort selectionSort24 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort> pair_isTreeBalanced_selectionSort25 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort>(isTreeBalanced23, selectionSort24);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        boolean b30 = isTreeBalanced23.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel31 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel32 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST33 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST34 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = sortedArrayToBST34.transform(i_array36);
        boolean b38 = isBST33.checkRecursive(binarynode_i37);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode39 = binaryTreeByLevel32.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i37);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode40 = binaryTreeByLevel31.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i37);
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i46 = new java.util.Vector<java.lang.Integer>();
        boolean b47 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i46, i_array45);
        int i50 = vector_i46.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i46.trimToSize();
        vector_i46.add((int) (short) 0, (java.lang.Integer) 0);
        java.util.stream.Stream<java.lang.Integer> stream_i55 = vector_i46.stream();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = vector_i46.removeElement((java.lang.Object) sortedArrayToBST56);
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem24.SortedArrayToBST> binarynode_sortedArrayToBST61 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem24.SortedArrayToBST>(sortedArrayToBST56);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode62 = binaryTreeByLevel31.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_sortedArrayToBST61);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor63 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals64 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST65 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = sortedArrayToBST65.transform(i_array67);
        boolean b69 = binarynode_i68.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        boolean b74 = binarynode_i73.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = binarynode_i73.getRight();
        boolean b76 = binaryTreeEquals64.areEqualsIterative(binarynode_i68, binarynode_i73);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        boolean b81 = binarynode_i80.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST82 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array84 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = sortedArrayToBST82.transform(i_array84);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode86 = lowestCommonAncestor63.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i85);
        java.lang.Integer i87 = binarynode_i80.getData();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode88 = binaryTreeByLevel31.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        boolean b89 = binaryTreeEquals10.areEqualsIterative(binarynode_i29, binarynode_i80);
        binarynode_i5.setLeft(binarynode_i80);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "100##" + "'", str8.equals("100##"));
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == false);
        org.junit.Assert.assertTrue(b22 == true);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertTrue(b30 == true);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == true);
        org.junit.Assert.assertNotNull(list_binaryNode39);
        org.junit.Assert.assertNotNull(list_binaryNode40);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertTrue(b47 == true);
        org.junit.Assert.assertTrue(i50 == (-1));
        org.junit.Assert.assertNotNull(stream_i55);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == false);
        org.junit.Assert.assertNotNull(list_binaryNode62);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == true);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertTrue(b81 == false);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(binarynode_i85);
        org.junit.Assert.assertNull(binaryNode86);
        org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100 + "'", i87.equals(100));
        org.junit.Assert.assertNotNull(list_binaryNode88);
        org.junit.Assert.assertTrue(b89 == true);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test094");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        java.lang.Object obj13 = null;
        int i14 = vector_i4.lastIndexOf(obj13);
        java.lang.Object obj15 = null;
        boolean b16 = vector_i4.removeElement(obj15);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue(i14 == (-1));
        org.junit.Assert.assertTrue(b16 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test095");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        try {
            stack1_0.setSize((-80));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test096");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = null;
        binarynode_i6.setRight(binarynode_i7);
        boolean b9 = listnode_mergeSortedArrays2.equals((java.lang.Object) binarynode_i7);
        com.github.pedrovgs.linkedlist.ListNode listNode10 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode11 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        java.lang.String str14 = listnode_mergeSortedArrays13.toString();
        deleteListNode11.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays13);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers18 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b19 = listnode_mergeSortedArrays17.equals((java.lang.Object) mergeBinaryNumbers18);
        deleteListNode11.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i21 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays22);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers24 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b25 = listnode_mergeSortedArrays23.equals((java.lang.Object) mergeBinaryNumbers24);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel27 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel28 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST29 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = isBST29.checkRecursive(binarynode_i33);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode35 = binaryTreeByLevel28.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode36 = binaryTreeByLevel27.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth37 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array39 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i40 = new java.util.Stack<java.lang.Integer>();
        boolean b41 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i40, i_array39);
        boolean b42 = stack_i40.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i44 = stack_i40.search((java.lang.Object) sortedArrayToBST43);
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST43.transform(i_array48);
        int i50 = binaryTreeDepth37.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i49);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth51 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i54 = new java.util.Stack<java.lang.Integer>();
        boolean b55 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i54, i_array53);
        boolean b56 = stack_i54.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i58 = stack_i54.search((java.lang.Object) sortedArrayToBST57);
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST57.transform(i_array62);
        int i64 = binaryTreeDepth51.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i63);
        int i65 = binaryTreeDepth37.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i63);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode66 = binaryTreeByLevel27.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i63);
        boolean b67 = listNode26.equals((java.lang.Object) binaryTreeByLevel27);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST68 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array70 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i71 = sortedArrayToBST68.transform(i_array70);
        boolean b72 = binarynode_i71.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = binarynode_i71.getRight();
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode74 = binaryTreeByLevel27.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNotNull(listNode10);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listnode_i21);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == true);
        org.junit.Assert.assertNotNull(list_binaryNode35);
        org.junit.Assert.assertNotNull(list_binaryNode36);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertTrue(b41 == true);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertTrue(i44 == (-1));
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertTrue(i50 == 2);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertTrue(i58 == (-1));
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue(i64 == 2);
        org.junit.Assert.assertTrue(i65 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode66);
        org.junit.Assert.assertTrue(b67 == false);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(binarynode_i71);
        org.junit.Assert.assertTrue(b72 == false);
        org.junit.Assert.assertNull(binarynode_i73);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test097");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("[0, 1, 1, -1]", "10010###");
        boolean b6 = simpleRegularExpression0.evaluate("-6", "3");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test098");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces2 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array3 = new char[] {};
        replaceSpaces2.replace2(char_array3);
        replaceSpaces1.replace(char_array3);
        replaceSpaces0.replace(char_array3);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces7 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces8 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array9 = new char[] {};
        replaceSpaces8.replace2(char_array9);
        replaceSpaces7.replace(char_array9);
        replaceSpaces0.replace2(char_array9);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces13 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces14 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array20 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces14.replace(char_array20);
        replaceSpaces13.replace(char_array20);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces23 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces24 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array25 = new char[] {};
        replaceSpaces24.replace2(char_array25);
        replaceSpaces23.replace(char_array25);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces28 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces29 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces30 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array31 = new char[] {};
        replaceSpaces30.replace2(char_array31);
        replaceSpaces29.replace(char_array31);
        replaceSpaces28.replace(char_array31);
        replaceSpaces23.replace(char_array31);
        replaceSpaces13.replace2(char_array31);
        replaceSpaces0.replace2(char_array31);
        org.junit.Assert.assertNotNull(char_array3);
        org.junit.Assert.assertNotNull(char_array9);
        org.junit.Assert.assertNotNull(char_array20);
        org.junit.Assert.assertNotNull(char_array25);
        org.junit.Assert.assertNotNull(char_array31);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test099");
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber0 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        int[] i_array1 = null;
        try {
            int i2 = findTheMissingNumber0.find(i_array1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test100");
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel0 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder1 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor2 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals3 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = binarynode_i7.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = binarynode_i12.getRight();
        boolean b15 = binaryTreeEquals3.areEqualsIterative(binarynode_i7, binarynode_i12);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array18 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = sortedArrayToBST16.transform(i_array18);
        boolean b20 = binarynode_i19.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode25 = lowestCommonAncestor2.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i19, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode26 = binaryTreePreOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i19);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder27 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian28 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d31 = avlTreeMedian28.find(binarynode_i30);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode32 = binaryTreePreOrder27.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i30);
        com.github.pedrovgs.problem18.IsBST isBST33 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST34 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = sortedArrayToBST34.transform(i_array36);
        boolean b38 = isBST33.checkRecursive(binarynode_i37);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode39 = binaryTreePreOrder27.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i37);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode40 = binaryTreePreOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i37);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = treeToListByLevel0.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i37);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder42 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder43 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian44 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d47 = avlTreeMedian44.find(binarynode_i46);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor48 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals49 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST50 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array52 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = sortedArrayToBST50.transform(i_array52);
        boolean b54 = binarynode_i53.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST55 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array57 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = sortedArrayToBST55.transform(i_array57);
        boolean b59 = binarynode_i58.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = binarynode_i58.getRight();
        boolean b61 = binaryTreeEquals49.areEqualsIterative(binarynode_i53, binarynode_i58);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        boolean b66 = binarynode_i65.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST67.transform(i_array69);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode71 = lowestCommonAncestor48.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i58, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i65, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i70);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i72 = binarynode_i58.getLeft();
        double d73 = avlTreeMedian44.find(binarynode_i58);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST74 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array76 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = sortedArrayToBST74.transform(i_array76);
        boolean b78 = binarynode_i77.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = binarynode_i77.getRight();
        java.lang.Integer i80 = binarynode_i77.getData();
        binarynode_i58.setLeft(binarynode_i77);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i82 = binaryTreeInOrder43.getIterative(binarynode_i77);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode83 = binaryTreePostOrder42.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i77);
        boolean b84 = binarynode_i37.equals((java.lang.Object) binarynode_i77);
        boolean b85 = binarynode_i37.hasRight();
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNull(binarynode_i14);
        org.junit.Assert.assertTrue(b15 == true);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertNull(binaryNode25);
        org.junit.Assert.assertNotNull(list_binaryNode26);
        org.junit.Assert.assertTrue(d31 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode32);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == true);
        org.junit.Assert.assertNotNull(list_binaryNode39);
        org.junit.Assert.assertNotNull(list_binaryNode40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertTrue(d47 == 10.0d);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(binarynode_i53);
        org.junit.Assert.assertTrue(b54 == false);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(binarynode_i58);
        org.junit.Assert.assertTrue(b59 == false);
        org.junit.Assert.assertNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == true);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertNull(binaryNode71);
        org.junit.Assert.assertNull(binarynode_i72);
        org.junit.Assert.assertTrue(d73 == 100.0d);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(binarynode_i77);
        org.junit.Assert.assertTrue(b78 == false);
        org.junit.Assert.assertNull(binarynode_i79);
        org.junit.Assert.assertTrue("'" + i80 + "' != '" + 100 + "'", i80.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i82);
        org.junit.Assert.assertNotNull(list_binaryNode83);
        org.junit.Assert.assertTrue(b84 == true);
        org.junit.Assert.assertTrue(b85 == false);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test101");
        com.github.pedrovgs.problem29.AreAnagrams areAnagrams0 = new com.github.pedrovgs.problem29.AreAnagrams();
        boolean b3 = areAnagrams0.check("3", "/!ih/hi!/");
        boolean b6 = areAnagrams0.check("[null]", "112197661");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test102");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder2 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreePreOrder2.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i8 = binaryTreeInOrder1.getIterative(binarynode_i5);
        com.github.pedrovgs.problem18.IsBST isBST9 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = isBST9.checkRecursive(binarynode_i13);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals15 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array18 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = sortedArrayToBST16.transform(i_array18);
        boolean b20 = binarynode_i19.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = binarynode_i24.getRight();
        boolean b27 = binaryTreeEquals15.areEqualsIterative(binarynode_i19, binarynode_i24);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i19.getLeft();
        boolean b29 = isBST9.checkIterative(binarynode_i19);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals30 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST36 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array38 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = sortedArrayToBST36.transform(i_array38);
        boolean b40 = binarynode_i39.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = binarynode_i39.getRight();
        boolean b42 = binaryTreeEquals30.areEqualsIterative(binarynode_i34, binarynode_i39);
        boolean b43 = isBST9.checkIterative(binarynode_i39);
        boolean b44 = binaryTreeEquals0.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i39);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = binarynode_i5.getLeft();
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(list_binarynode_i8);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == true);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(binarynode_i39);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == true);
        org.junit.Assert.assertTrue(b43 == true);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNull(binarynode_i45);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test103");
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding0 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i3 = subtractAdding0.subtract((int) (short) 0, (int) '4');
        int i6 = subtractAdding0.subtract((int) (byte) 10, (-97));
        int i9 = subtractAdding0.subtract((int) (short) 0, 2);
        int i12 = subtractAdding0.subtract(101, 29);
        int i15 = subtractAdding0.subtract(10, 2147483647);
        int i18 = subtractAdding0.subtract(52002, 29);
        org.junit.Assert.assertTrue(i3 == (-52));
        org.junit.Assert.assertTrue(i6 == 107);
        org.junit.Assert.assertTrue(i9 == (-2));
        org.junit.Assert.assertTrue(i12 == 72);
        org.junit.Assert.assertTrue(i15 == (-2147483637));
        org.junit.Assert.assertTrue(i18 == 51973);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test104");
        com.github.pedrovgs.problem29.AreAnagrams areAnagrams0 = new com.github.pedrovgs.problem29.AreAnagrams();
        boolean b3 = areAnagrams0.check("3", "/!ih/hi!/");
        boolean b6 = areAnagrams0.check("1", "3");
        boolean b9 = areAnagrams0.check("79", "[");
        boolean b12 = areAnagrams0.check("/]1-[/]1- ,1 ,1 ,0[/01/", "-6");
        boolean b15 = areAnagrams0.check("35", "102#2");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b15 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test105");
        com.github.pedrovgs.problem40.MoveElementsToPositions moveElementsToPositions0 = new com.github.pedrovgs.problem40.MoveElementsToPositions();
        com.github.pedrovgs.problem79.MergeSort mergeSort1 = new com.github.pedrovgs.problem79.MergeSort();
        int[] i_array2 = new int[] {};
        mergeSort1.sort(i_array2);
        moveElementsToPositions0.move(i_array2);
        com.github.pedrovgs.problem2.Vector vector5 = new com.github.pedrovgs.problem2.Vector(i_array2);
        try {
            int i7 = vector5.getAt(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array2);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test106");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100, 0, (-1), (-1) };
        java.util.Stack<java.lang.Integer> stack_i5 = new java.util.Stack<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i5, i_array4);
        java.lang.Integer i8 = stack_i5.push((java.lang.Integer) 0);
        stack_i5.trimToSize();
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue("'" + i8 + "' != '" + 0 + "'", i8.equals(0));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test107");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList8 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements9 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = listnode_mergeSortedArrays12.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = listnode_mergeSortedArrays12.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = null;
        binarynode_i16.setRight(binarynode_i17);
        boolean b19 = listnode_mergeSortedArrays12.equals((java.lang.Object) binarynode_i17);
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        removeListDuplicatedElements9.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        removeListDuplicatedElements9.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i30 = getTheElementInTheMiddleOfTheList8.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements31 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        removeListDuplicatedElements31.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i38 = getTheElementInTheMiddleOfTheList8.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i40 = null;
        try {
            int i41 = sumLists0.sumReverse((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36, listnode_i40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays13);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays14);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNotNull(listnode_i30);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertNotNull(listnode_i38);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test108");
        com.github.pedrovgs.problem29.AreAnagrams areAnagrams0 = new com.github.pedrovgs.problem29.AreAnagrams();
        boolean b3 = areAnagrams0.check("3", "/!ih/hi!/");
        boolean b6 = areAnagrams0.check("1", "3");
        boolean b9 = areAnagrams0.check("79", "[");
        boolean b12 = areAnagrams0.check("[]", "/hi!/");
        boolean b15 = areAnagrams0.check("]1- ,1 ,1 ,0[", "/###01001/79/");
        boolean b18 = areAnagrams0.check("-2", "}81=atad{edoNyraniB");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertTrue(b18 == false);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test109");
        com.github.pedrovgs.problem54.RotateMatrix rotateMatrix0 = new com.github.pedrovgs.problem54.RotateMatrix();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem42.FloodFill floodFill2 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral3 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array4 = new int[][] {};
        int[] i_array5 = goThroughMatrixInSpiral3.go(i_array_array4);
        floodFill2.apply(i_array_array4, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral11 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array12 = new int[][] {};
        int[] i_array13 = goThroughMatrixInSpiral11.go(i_array_array12);
        int[] i_array20 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array27 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array28 = new int[][] { i_array20, i_array27 };
        int[] i_array29 = goThroughMatrixInSpiral11.go(i_array_array28);
        floodFill2.apply(i_array_array28, (-8), (-14040), 2147483647, (-8));
        int[] i_array35 = goThroughMatrixInSpiral1.go(i_array_array28);
        try {
            rotateMatrix0.rotate(i_array_array28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array_array28);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array35);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test110");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = binarynode_i11.getLeft();
        boolean b21 = isBST1.checkIterative(binarynode_i11);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian22 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d25 = avlTreeMedian22.find(binarynode_i24);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor26 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals27 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST28 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array30 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = sortedArrayToBST28.transform(i_array30);
        boolean b32 = binarynode_i31.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        boolean b39 = binaryTreeEquals27.areEqualsIterative(binarynode_i31, binarynode_i36);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = sortedArrayToBST40.transform(i_array42);
        boolean b44 = binarynode_i43.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST45 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array47 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = sortedArrayToBST45.transform(i_array47);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode49 = lowestCommonAncestor26.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i43, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i48);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = binarynode_i36.getLeft();
        double d51 = avlTreeMedian22.find(binarynode_i36);
        boolean b52 = isBST1.checkRecursive(binarynode_i36);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor53 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals54 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST55 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array57 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = sortedArrayToBST55.transform(i_array57);
        boolean b59 = binarynode_i58.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST60 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST60.transform(i_array62);
        boolean b64 = binarynode_i63.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = binarynode_i63.getRight();
        boolean b66 = binaryTreeEquals54.areEqualsIterative(binarynode_i58, binarynode_i63);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST67.transform(i_array69);
        boolean b71 = binarynode_i70.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode76 = lowestCommonAncestor53.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i63, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i70, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        boolean b77 = isBST1.checkIterative(binarynode_i63);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST78 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array80 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i81 = sortedArrayToBST78.transform(i_array80);
        java.lang.String str82 = binarynode_i81.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_83 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_83.push((int) (byte) 10);
        int i86 = stack1_83.getMin();
        boolean b87 = binarynode_i81.equals((java.lang.Object) stack1_83);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel88 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST89 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST90 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array92 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i93 = sortedArrayToBST90.transform(i_array92);
        boolean b94 = isBST89.checkRecursive(binarynode_i93);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode95 = binaryTreeByLevel88.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i93);
        binarynode_i81.setRight(binarynode_i93);
        boolean b97 = isBST1.checkRecursive(binarynode_i81);
        try {
            java.lang.Integer i99 = findMinNumberAtPosition0.find(binarynode_i81, (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertTrue(d25 == 10.0d);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(binarynode_i31);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == true);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(binarynode_i48);
        org.junit.Assert.assertNull(binaryNode49);
        org.junit.Assert.assertNull(binarynode_i50);
        org.junit.Assert.assertTrue(d51 == 100.0d);
        org.junit.Assert.assertTrue(b52 == true);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(binarynode_i58);
        org.junit.Assert.assertTrue(b59 == false);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue(b64 == false);
        org.junit.Assert.assertNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == true);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertNull(binaryNode76);
        org.junit.Assert.assertTrue(b77 == true);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertNotNull(binarynode_i81);
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "BinaryNode{data=100}" + "'", str82.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i86 == 10);
        org.junit.Assert.assertTrue(b87 == false);
        org.junit.Assert.assertNotNull(i_array92);
        org.junit.Assert.assertNotNull(binarynode_i93);
        org.junit.Assert.assertTrue(b94 == true);
        org.junit.Assert.assertNotNull(list_binaryNode95);
        org.junit.Assert.assertTrue(b97 == true);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test111");
        com.github.pedrovgs.problem11.IntToString intToString0 = new com.github.pedrovgs.problem11.IntToString();
        java.lang.String str2 = intToString0.transform((int) '#');
        java.lang.String str4 = intToString0.transform(10);
        java.lang.String str6 = intToString0.transform((int) (byte) 100);
        java.lang.String str8 = intToString0.transform(112197661);
        java.lang.String str10 = intToString0.transform(29);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "35" + "'", str2.equals("35"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "10" + "'", str4.equals("10"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "100" + "'", str6.equals("100"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "112197661" + "'", str8.equals("112197661"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "29" + "'", str10.equals("29"));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test112");
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange3 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange4 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange3);
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange5 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "[", combinationsOfChange3);
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange6 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "1", combinationsOfChange3);
        com.github.pedrovgs.problem75.SelectionSort selectionSort7 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray8 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array11 = new int[] { (byte) 1, (byte) 10 };
        splitArray8.splitSwappingPartition(i_array11);
        selectionSort7.sort(i_array11);
        com.github.pedrovgs.problem76.InsertionSort insertionSort14 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray15 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.problem8.SplitArray splitArray18 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array21 = new int[] { (byte) 1, (byte) 10 };
        splitArray18.splitSwappingPartition(i_array21);
        int[] i_array29 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray18.splitSwappingRecursive(i_array29);
        com.github.pedrovgs.problem8.SplitArray splitArray31 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array34 = new int[] { (byte) 1, (byte) 10 };
        splitArray31.splitSwappingPartition(i_array34);
        int[] i_array42 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray31.splitSwappingRecursive(i_array42);
        int[] i_array44 = mergeSortedArrays16.merge(i_array29, i_array42);
        splitArray15.splitSwappingIterative(i_array42);
        insertionSort14.sort(i_array42);
        selectionSort7.sort(i_array42);
        com.github.pedrovgs.problem8.SplitArray splitArray48 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray49 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array52 = new int[] { (byte) 1, (byte) 10 };
        splitArray49.splitSwappingPartition(i_array52);
        splitArray48.splitSwappingRecursive(i_array52);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral55 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array56 = new int[][] {};
        int[] i_array57 = goThroughMatrixInSpiral55.go(i_array_array56);
        splitArray48.splitSwappingRecursive(i_array57);
        selectionSort7.sort(i_array57);
        int[] i_array61 = new int[] { (byte) 100 };
        selectionSort7.sort(i_array61);
        try {
            java.util.List<java.util.List<java.lang.Integer>> list_list_i64 = combinationsOfChange3.get(i_array61, (-132));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array_array56);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array61);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test113");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        floodFill0.apply(i_array_array2, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros9 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral10 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array11 = new int[][] {};
        int[] i_array12 = goThroughMatrixInSpiral10.go(i_array_array11);
        int[] i_array15 = new int[] { 107, 3628800 };
        int[][] i_array_array16 = new int[][] { i_array15 };
        int[] i_array17 = goThroughMatrixInSpiral10.go(i_array_array16);
        rewriteRowAndColumnsWithZeros9.rewrite(i_array_array16);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral19 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array20 = new int[][] {};
        int[] i_array21 = goThroughMatrixInSpiral19.go(i_array_array20);
        int[] i_array24 = new int[] { 107, 3628800 };
        int[][] i_array_array25 = new int[][] { i_array24 };
        int[] i_array26 = goThroughMatrixInSpiral19.go(i_array_array25);
        rewriteRowAndColumnsWithZeros9.rewrite(i_array_array25);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral28 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array29 = new int[][] {};
        int[] i_array30 = goThroughMatrixInSpiral28.go(i_array_array29);
        rewriteRowAndColumnsWithZeros9.rewrite(i_array_array29);
        floodFill0.apply(i_array_array29, 51, 270, 7, (int) (byte) 10);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral37 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem42.FloodFill floodFill38 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral39 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array40 = new int[][] {};
        int[] i_array41 = goThroughMatrixInSpiral39.go(i_array_array40);
        floodFill38.apply(i_array_array40, (-52), 2, (int) '#', 51);
        int[] i_array47 = goThroughMatrixInSpiral37.go(i_array_array40);
        com.github.pedrovgs.problem42.FloodFill floodFill48 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral49 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array50 = new int[][] {};
        int[] i_array51 = goThroughMatrixInSpiral49.go(i_array_array50);
        int[] i_array58 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array65 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array66 = new int[][] { i_array58, i_array65 };
        int[] i_array67 = goThroughMatrixInSpiral49.go(i_array_array66);
        floodFill48.apply(i_array_array66, (int) (byte) 1, (int) (byte) 0, (int) ' ', (-5200));
        int[] i_array73 = goThroughMatrixInSpiral37.go(i_array_array66);
        floodFill0.apply(i_array_array66, (-80), 6, 1241513983, 0);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array_array20);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array_array25);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array_array29);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array_array40);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array_array50);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(i_array_array66);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array73);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test114");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseIterative("/97/10010###/");
        java.lang.String str8 = reverseString0.reverseRecursive("]1-[");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "/###01001/79/" + "'", str6.equals("/###01001/79/"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[-1]" + "'", str8.equals("[-1]"));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test115");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("112197661", "/23/[/#2021/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test116");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("10");
        boolean b6 = palindromes0.evaluate("/23/[/#2021/");
        boolean b8 = palindromes0.evaluate("[]");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test117");
        com.github.pedrovgs.problem30.ScientificNotation scientificNotation0 = new com.github.pedrovgs.problem30.ScientificNotation();
        try {
            long long2 = scientificNotation0.calculate("-");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test118");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian1 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals2 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder3 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder4 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian5 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d8 = avlTreeMedian5.find(binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreePreOrder4.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i10 = binaryTreeInOrder3.getIterative(binarynode_i7);
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals17 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        boolean b27 = binarynode_i26.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i26.getRight();
        boolean b29 = binaryTreeEquals17.areEqualsIterative(binarynode_i21, binarynode_i26);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i21.getLeft();
        boolean b31 = isBST11.checkIterative(binarynode_i21);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals32 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = binarynode_i41.getRight();
        boolean b44 = binaryTreeEquals32.areEqualsIterative(binarynode_i36, binarynode_i41);
        boolean b45 = isBST11.checkIterative(binarynode_i41);
        boolean b46 = binaryTreeEquals2.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i41);
        double d47 = avlTreeMedian1.find(binarynode_i41);
        try {
            java.lang.Integer i49 = findMinNumberAtPosition0.find(binarynode_i41, (-107));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d8 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(list_binarynode_i10);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == true);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == true);
        org.junit.Assert.assertTrue(b45 == true);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertTrue(d47 == 100.0d);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test119");
        com.github.pedrovgs.problem7.FibonacciNumbers fibonacciNumbers0 = new com.github.pedrovgs.problem7.FibonacciNumbers();
        long long2 = fibonacciNumbers0.getIterative((long) 10);
        long long4 = fibonacciNumbers0.getIterative((long) '4');
        org.junit.Assert.assertTrue(long2 == 55L);
        org.junit.Assert.assertTrue(long4 == 32951280099L);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test120");
        com.github.pedrovgs.problem30.ScientificNotation scientificNotation0 = new com.github.pedrovgs.problem30.ScientificNotation();
        try {
            long long2 = scientificNotation0.calculate("35");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test121");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getRecursive((int) '#');
        int i8 = factorial0.getRecursive(0);
        int i10 = factorial0.getRecursive(32);
        try {
            int i12 = factorial0.getTailRecursive((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 0);
        org.junit.Assert.assertTrue(i8 == 1);
        org.junit.Assert.assertTrue(i10 == (-2147483648));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test122");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder8 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        java.lang.String str13 = binarynode_i12.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_14 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_14.push((int) (byte) 10);
        int i17 = stack1_14.getMin();
        boolean b18 = binarynode_i12.equals((java.lang.Object) stack1_14);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode19 = binaryTreePostOrder8.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode20 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = null;
        binarynode_i22.setRight(binarynode_i23);
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode25 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "BinaryNode{data=100}" + "'", str13.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i17 == 10);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(list_binaryNode19);
        org.junit.Assert.assertNotNull(list_binaryNode20);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test123");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compress("/!ih/");
        java.lang.String str14 = compressString0.compressAlternativeApproach("[null]");
        java.lang.String str16 = compressString0.compress("79");
        java.lang.String str18 = compressString0.compressAlternativeApproach("!ih");
        java.lang.String str20 = compressString0.compressRecursive("/32/-52/7/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[nul2]" + "'", str14.equals("[nul2]"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "7" + "'", str16.equals("7"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "!ih" + "'", str18.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "/32/-52/7/" + "'", str20.equals("/32/-52/7/"));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test124");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = reverseLinkedList32.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList37 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays40 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = null;
        binarynode_i43.setRight(binarynode_i44);
        boolean b46 = listnode_mergeSortedArrays39.equals((java.lang.Object) binarynode_i44);
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList37.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays39);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode48 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers55 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b56 = listnode_mergeSortedArrays54.equals((java.lang.Object) mergeBinaryNumbers55);
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i58 = reverseLinkedList37.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList60 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements61 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList62 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = null;
        binarynode_i68.setRight(binarynode_i69);
        boolean b71 = listnode_mergeSortedArrays64.equals((java.lang.Object) binarynode_i69);
        com.github.pedrovgs.linkedlist.ListNode listNode72 = reverseLinkedList62.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        removeListDuplicatedElements61.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements74 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList75 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays76 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays77 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays76);
        java.lang.String str78 = listnode_mergeSortedArrays77.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode79 = reverseLinkedList75.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays77);
        removeListDuplicatedElements74.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        removeListDuplicatedElements61.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i82 = getTheElementInTheMiddleOfTheList60.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode83 = reverseLinkedList32.reverseIterative(listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i84 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode86 = findKthElement0.find(listNode79, 0);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList87 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays88 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays89 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays88);
        java.lang.String str90 = listnode_mergeSortedArrays89.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode91 = reverseLinkedList87.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays89);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode93 = findKthElement0.find(listNode91, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays40);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays41);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listnode_i58);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays65);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays66);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(listNode72);
        org.junit.Assert.assertNotNull(listNode79);
        org.junit.Assert.assertNotNull(listnode_i82);
        org.junit.Assert.assertNotNull(listNode83);
        org.junit.Assert.assertNotNull(listnode_i84);
        org.junit.Assert.assertNotNull(listNode86);
        org.junit.Assert.assertNotNull(listNode91);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test125");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        java.util.Spliterator<java.lang.Integer> spliterator_i10 = vector_i5.spliterator();
        vector_i5.clear();
        java.util.Spliterator<java.lang.Integer> spliterator_i12 = vector_i5.spliterator();
        try {
            vector_i5.removeElementAt((-14040));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertNotNull(spliterator_i10);
        org.junit.Assert.assertNotNull(spliterator_i12);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test126");
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { (-1), (-14040), 107, 72, (-2), (-8), (-52000), (-14040), 56, (-1241513984), 7, 112197661, (-6), 24, 30, 56, (-5200), 5, 1484783616, 4, (-5200) };
        java.util.Vector<java.lang.Integer> vector_i22 = new java.util.Vector<java.lang.Integer>();
        boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i22, i_array21);
        java.util.ListIterator<java.lang.Integer> listiterator_i24 = vector_i22.listIterator();
        java.util.function.UnaryOperator<java.lang.Integer> unaryoperator_i25 = null;
        try {
            vector_i22.replaceAll(unaryoperator_i25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertNotNull(listiterator_i24);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test127");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnString(10);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 2);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test128");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode44 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i43);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList45 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays46);
        java.lang.String str48 = listnode_mergeSortedArrays47.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList45.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        com.github.pedrovgs.problem18.IsBST isBST50 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        boolean b55 = isBST50.checkRecursive(binarynode_i54);
        boolean b56 = listNode49.equals((java.lang.Object) binarynode_i54);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode57 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54);
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertNotNull(list_binaryNode44);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(list_binaryNode57);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test129");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Integer i3 = stack2_0.peek();
        java.lang.Integer i4 = stack2_0.pop();
        try {
            java.lang.Integer i6 = stack2_0.get(6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + i3 + "' != '" + (-1) + "'", i3.equals((-1)));
        org.junit.Assert.assertTrue("'" + i4 + "' != '" + (-1) + "'", i4.equals((-1)));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test130");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersCheating("[3]", "/[nul2]/]1-[/BinaryNode{data=10}/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test131");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator0 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str4 = pathCalculator0.calculate("!ih", "hi!", "/");
        java.lang.String str8 = pathCalculator0.calculate("1", "3", "[0, 1, 1, -1]");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/!ih/hi!/" + "'", str4.equals("/!ih/hi!/"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/1/3/[0, 1, 1, -1]/" + "'", str8.equals("/1/3/[0, 1, 1, -1]/"));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test132");
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor0 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals1 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = binarynode_i10.getRight();
        boolean b13 = binaryTreeEquals1.areEqualsIterative(binarynode_i5, binarynode_i10);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode23 = lowestCommonAncestor0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder24 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder25 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian26 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d29 = avlTreeMedian26.find(binarynode_i28);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode30 = binaryTreePreOrder25.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i31 = binaryTreeInOrder24.getIterative(binarynode_i28);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced32 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor33 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals34 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        boolean b39 = binarynode_i38.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = sortedArrayToBST40.transform(i_array42);
        boolean b44 = binarynode_i43.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = binarynode_i43.getRight();
        boolean b46 = binaryTreeEquals34.areEqualsIterative(binarynode_i38, binarynode_i43);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        boolean b51 = binarynode_i50.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode56 = lowestCommonAncestor33.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i43, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i50, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55);
        boolean b57 = isTreeBalanced32.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55);
        java.lang.Integer i58 = binarynode_i55.getData();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian59 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d62 = avlTreeMedian59.find(binarynode_i61);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor63 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals64 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST65 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = sortedArrayToBST65.transform(i_array67);
        boolean b69 = binarynode_i68.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        boolean b74 = binarynode_i73.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = binarynode_i73.getRight();
        boolean b76 = binaryTreeEquals64.areEqualsIterative(binarynode_i68, binarynode_i73);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        boolean b81 = binarynode_i80.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST82 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array84 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = sortedArrayToBST82.transform(i_array84);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode86 = lowestCommonAncestor63.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i85);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i87 = binarynode_i73.getLeft();
        double d88 = avlTreeMedian59.find(binarynode_i73);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST89 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array91 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i92 = sortedArrayToBST89.transform(i_array91);
        boolean b93 = binarynode_i92.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i94 = binarynode_i92.getRight();
        java.lang.Integer i95 = binarynode_i92.getData();
        binarynode_i73.setLeft(binarynode_i92);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i97 = binarynode_i92.getRight();
        try {
            com.github.pedrovgs.binarytree.BinaryNode binaryNode98 = lowestCommonAncestor0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertNull(binaryNode23);
        org.junit.Assert.assertTrue(d29 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode30);
        org.junit.Assert.assertNotNull(list_binarynode_i31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == true);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertNull(binaryNode56);
        org.junit.Assert.assertTrue(b57 == true);
        org.junit.Assert.assertTrue("'" + i58 + "' != '" + 100 + "'", i58.equals(100));
        org.junit.Assert.assertTrue(d62 == 10.0d);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == true);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertTrue(b81 == false);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(binarynode_i85);
        org.junit.Assert.assertNull(binaryNode86);
        org.junit.Assert.assertNull(binarynode_i87);
        org.junit.Assert.assertTrue(d88 == 100.0d);
        org.junit.Assert.assertNotNull(i_array91);
        org.junit.Assert.assertNotNull(binarynode_i92);
        org.junit.Assert.assertTrue(b93 == false);
        org.junit.Assert.assertNull(binarynode_i94);
        org.junit.Assert.assertTrue("'" + i95 + "' != '" + 100 + "'", i95.equals(100));
        org.junit.Assert.assertNull(binarynode_i97);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test133");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        java.lang.Integer i42 = binarynode_i35.getData();
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertTrue("'" + i42 + "' != '" + 100 + "'", i42.equals(100));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test134");
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 0, 0 };
        java.util.Vector<java.lang.Integer> vector_i3 = new java.util.Vector<java.lang.Integer>();
        boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i3, i_array2);
        java.lang.Object obj5 = vector_i3.clone();
        int i6 = vector_i3.size();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i9 = new java.util.Stack<java.lang.Integer>();
        boolean b10 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i9, i_array8);
        boolean b11 = stack_i9.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i13 = stack_i9.search((java.lang.Object) sortedArrayToBST12);
        com.github.pedrovgs.problem28.FindSums findSums14 = new com.github.pedrovgs.problem28.FindSums();
        int i15 = stack_i9.indexOf((java.lang.Object) findSums14);
        try {
            int i17 = vector_i3.lastIndexOf((java.lang.Object) findSums14, 475165);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(i6 == 2);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertTrue(i13 == (-1));
        org.junit.Assert.assertTrue(i15 == (-1));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test135");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (short) -1, (int) 'a');
        float f9 = divideUsingSubtraction0.divideIterative((int) 'a', 27);
        try {
            float f12 = divideUsingSubtraction0.divideIterative(34, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == (-0.010309278f));
        org.junit.Assert.assertTrue(f9 == 3.5925927f);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test136");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("112197661", "");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test137");
        com.github.pedrovgs.problem69.BitsToTransform bitsToTransform0 = new com.github.pedrovgs.problem69.BitsToTransform();
        int i3 = bitsToTransform0.calculate((int) (short) 10, 4);
        int i6 = bitsToTransform0.calculate(107, 30);
        int i9 = bitsToTransform0.calculate((-8), 0);
        int i12 = bitsToTransform0.calculate((-6), (int) (short) 0);
        org.junit.Assert.assertTrue(i3 == 3);
        org.junit.Assert.assertTrue(i6 == 5);
        org.junit.Assert.assertTrue(i9 == 29);
        org.junit.Assert.assertTrue(i12 == 30);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test138");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(0);
        int i4 = factorial0.getTailRecursive((int) (byte) 100);
        int i6 = factorial0.getIterative((int) (byte) 0);
        int i8 = factorial0.getIterative(27);
        int i10 = factorial0.getIterative(1);
        try {
            int i12 = factorial0.getRecursive((-132));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 0);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 1484783616);
        org.junit.Assert.assertTrue(i10 == 1);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test139");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        floodFill0.apply(i_array_array2, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral9 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array10 = new int[][] {};
        int[] i_array11 = goThroughMatrixInSpiral9.go(i_array_array10);
        int[] i_array18 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array25 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array26 = new int[][] { i_array18, i_array25 };
        int[] i_array27 = goThroughMatrixInSpiral9.go(i_array_array26);
        floodFill0.apply(i_array_array26, (-8), (-14040), 2147483647, (-8));
        int[][] i_array_array33 = null;
        try {
            floodFill0.apply(i_array_array33, (-2147483648), 23, (int) 'a', 2414);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array_array10);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array_array26);
        org.junit.Assert.assertNotNull(i_array27);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test140");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        try {
            java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("&0///0", "/7/25-/23/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test141");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("97");
        java.lang.String str4 = reverseSentence0.reverse("/10/100/[/");
        java.lang.String str6 = reverseSentence0.reverse("-6");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/10/100/[/" + "'", str4.equals("/10/100/[/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "-6" + "'", str6.equals("-6"));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test142");
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers0 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        int i5 = mergeBinaryNumbers0.merge((-8), (-1096810424), (-5200), (int) '4');
        org.junit.Assert.assertTrue(i5 == (-1507336));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test143");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers> listnode_sumBinaryNumbers4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers>(sumBinaryNumbers0);
        try {
            java.lang.String str7 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("-", "[1, 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test144");
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode0 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode12 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers19 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b20 = listnode_mergeSortedArrays18.equals((java.lang.Object) mergeBinaryNumbers19);
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i22 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements24 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList25 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays26);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = listnode_mergeSortedArrays27.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = listnode_mergeSortedArrays27.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = null;
        binarynode_i31.setRight(binarynode_i32);
        boolean b34 = listnode_mergeSortedArrays27.equals((java.lang.Object) binarynode_i32);
        com.github.pedrovgs.linkedlist.ListNode listNode35 = reverseLinkedList25.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays27);
        removeListDuplicatedElements24.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements24);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList38 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements39 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList40 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        java.lang.String str43 = listnode_mergeSortedArrays42.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode44 = reverseLinkedList40.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        removeListDuplicatedElements39.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = getTheElementInTheMiddleOfTheList38.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        removeListDuplicatedElements24.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        deleteListNode0.delete(listNode44);
        com.github.pedrovgs.linkedlist.ListNode listNode49 = null;
        try {
            deleteListNode0.delete(listNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(listnode_i22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays28);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays29);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(listNode35);
        org.junit.Assert.assertNotNull(listNode44);
        org.junit.Assert.assertNotNull(listnode_i46);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test145");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        java.lang.String str3 = listnode_mergeSortedArrays2.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i4 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays5 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays5);
        java.lang.String str7 = listnode_mergeSortedArrays6.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        java.lang.String str10 = listnode_mergeSortedArrays9.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays9.setData(mergeSortedArrays11);
        listnode_mergeSortedArrays6.setNext(listnode_mergeSortedArrays9);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = listnode_mergeSortedArrays6.getNext();
        com.github.pedrovgs.problem62.PalindromeList palindromeList15 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i20 = reverseLinkedList16.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        boolean b21 = palindromeList15.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = listnode_mergeSortedArrays18.getNext();
        listnode_mergeSortedArrays14.setNext(listnode_mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i24 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        com.github.pedrovgs.problem8.SplitArray splitArray27 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray28 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array31 = new int[] { (byte) 1, (byte) 10 };
        splitArray28.splitSwappingPartition(i_array31);
        splitArray27.splitSwappingRecursive(i_array31);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral34 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array35 = new int[][] {};
        int[] i_array36 = goThroughMatrixInSpiral34.go(i_array_array35);
        splitArray27.splitSwappingRecursive(i_array36);
        com.github.pedrovgs.problem80.QuickSort quickSort38 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays39 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort40 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray41 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array44 = new int[] { (byte) 1, (byte) 10 };
        splitArray41.splitSwappingPartition(i_array44);
        selectionSort40.sort(i_array44);
        com.github.pedrovgs.problem8.SplitArray splitArray47 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array50 = new int[] { (byte) 1, (byte) 10 };
        splitArray47.splitSwappingPartition(i_array50);
        int[] i_array58 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray47.splitSwappingRecursive(i_array58);
        int[] i_array60 = mergeSortedArrays39.merge(i_array44, i_array58);
        quickSort38.sort(i_array44);
        int[] i_array62 = mergeSortedArrays25.merge(i_array36, i_array44);
        listnode_mergeSortedArrays14.setData(mergeSortedArrays25);
        org.junit.Assert.assertNotNull(listnode_i4);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays14);
        org.junit.Assert.assertNotNull(listnode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays22);
        org.junit.Assert.assertNotNull(listnode_i24);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array_array35);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(i_array62);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test146");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements1 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array5 = multiplyArrayElements1.multiply(i_array4);
        splitArray0.splitSwappingPartition(i_array4);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral7 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array8 = new int[][] {};
        int[] i_array9 = goThroughMatrixInSpiral7.go(i_array_array8);
        splitArray0.splitSwappingPartition(i_array9);
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray11 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem8.SplitArray splitArray12 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray13 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array16 = new int[] { (byte) 1, (byte) 10 };
        splitArray13.splitSwappingPartition(i_array16);
        splitArray12.splitSwappingRecursive(i_array16);
        moveZerosInArray11.moveSorting(i_array16);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced20 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem75.SelectionSort selectionSort21 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort> pair_isTreeBalanced_selectionSort22 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort>(isTreeBalanced20, selectionSort21);
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber23 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.problem75.SelectionSort selectionSort24 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray25 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array28 = new int[] { (byte) 1, (byte) 10 };
        splitArray25.splitSwappingPartition(i_array28);
        selectionSort24.sort(i_array28);
        int i31 = findTheMissingNumber23.find(i_array28);
        selectionSort21.sort(i_array28);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral33 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array34 = new int[][] {};
        int[] i_array35 = goThroughMatrixInSpiral33.go(i_array_array34);
        int[] i_array42 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array49 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array50 = new int[][] { i_array42, i_array49 };
        int[] i_array51 = goThroughMatrixInSpiral33.go(i_array_array50);
        selectionSort21.sort(i_array51);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced53 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem75.SelectionSort selectionSort54 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort> pair_isTreeBalanced_selectionSort55 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort>(isTreeBalanced53, selectionSort54);
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber56 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.problem75.SelectionSort selectionSort57 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray58 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array61 = new int[] { (byte) 1, (byte) 10 };
        splitArray58.splitSwappingPartition(i_array61);
        selectionSort57.sort(i_array61);
        int i64 = findTheMissingNumber56.find(i_array61);
        selectionSort54.sort(i_array61);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral66 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array67 = new int[][] {};
        int[] i_array68 = goThroughMatrixInSpiral66.go(i_array_array67);
        int[] i_array75 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array82 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array83 = new int[][] { i_array75, i_array82 };
        int[] i_array84 = goThroughMatrixInSpiral66.go(i_array_array83);
        selectionSort54.sort(i_array84);
        selectionSort21.sort(i_array84);
        moveZerosInArray11.moveSorting(i_array84);
        splitArray0.splitSwappingPartition(i_array84);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertTrue(i31 == (-8));
        org.junit.Assert.assertNotNull(i_array_array34);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(i_array_array50);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertTrue(i64 == (-8));
        org.junit.Assert.assertNotNull(i_array_array67);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(i_array75);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(i_array_array83);
        org.junit.Assert.assertNotNull(i_array84);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test147");
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber0 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem72.FindTheMissingNumber> listnode_findTheMissingNumber1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem72.FindTheMissingNumber>(findTheMissingNumber0);
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray2 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem75.SelectionSort selectionSort3 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray4 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array7 = new int[] { (byte) 1, (byte) 10 };
        splitArray4.splitSwappingPartition(i_array7);
        selectionSort3.sort(i_array7);
        moveZerosInArray2.moveUsingTwoPointers(i_array7);
        int i11 = findTheMissingNumber0.find(i_array7);
        com.github.pedrovgs.problem8.SplitArray splitArray12 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array15 = new int[] { (byte) 1, (byte) 10 };
        splitArray12.splitSwappingPartition(i_array15);
        int[] i_array23 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray12.splitSwappingRecursive(i_array23);
        com.github.pedrovgs.problem75.SelectionSort selectionSort25 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray26 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array29 = new int[] { (byte) 1, (byte) 10 };
        splitArray26.splitSwappingPartition(i_array29);
        selectionSort25.sort(i_array29);
        com.github.pedrovgs.problem76.InsertionSort insertionSort32 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray33 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        com.github.pedrovgs.problem8.SplitArray splitArray36 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array39 = new int[] { (byte) 1, (byte) 10 };
        splitArray36.splitSwappingPartition(i_array39);
        int[] i_array47 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray36.splitSwappingRecursive(i_array47);
        com.github.pedrovgs.problem8.SplitArray splitArray49 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array52 = new int[] { (byte) 1, (byte) 10 };
        splitArray49.splitSwappingPartition(i_array52);
        int[] i_array60 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray49.splitSwappingRecursive(i_array60);
        int[] i_array62 = mergeSortedArrays34.merge(i_array47, i_array60);
        splitArray33.splitSwappingIterative(i_array60);
        insertionSort32.sort(i_array60);
        selectionSort25.sort(i_array60);
        com.github.pedrovgs.problem8.SplitArray splitArray66 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray67 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array70 = new int[] { (byte) 1, (byte) 10 };
        splitArray67.splitSwappingPartition(i_array70);
        splitArray66.splitSwappingRecursive(i_array70);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral73 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array74 = new int[][] {};
        int[] i_array75 = goThroughMatrixInSpiral73.go(i_array_array74);
        splitArray66.splitSwappingRecursive(i_array75);
        selectionSort25.sort(i_array75);
        splitArray12.splitSwappingPartition(i_array75);
        try {
            int i79 = findTheMissingNumber0.find(i_array75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertTrue(i11 == (-8));
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(i_array_array74);
        org.junit.Assert.assertNotNull(i_array75);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test148");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersCheating("/]1-[/]1- ,1 ,1 ,0[/01/", "[0, 1, 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test149");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.linkedlist.ListNode listNode1 = null;
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode3 = findKthElement0.find(listNode1, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test150");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList8 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i12 = reverseLinkedList8.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode13 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays14 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays15 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays14);
        java.lang.String str16 = listnode_mergeSortedArrays15.toString();
        deleteListNode13.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays15);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers20 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b21 = listnode_mergeSortedArrays19.equals((java.lang.Object) mergeBinaryNumbers20);
        deleteListNode13.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i23 = reverseLinkedList8.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i28 = reverseLinkedList24.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode29 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays30);
        java.lang.String str32 = listnode_mergeSortedArrays31.toString();
        deleteListNode29.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers36 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b37 = listnode_mergeSortedArrays35.equals((java.lang.Object) mergeBinaryNumbers36);
        deleteListNode29.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i39 = reverseLinkedList24.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList8.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i39);
        java.lang.String str41 = listNode40.toString();
        boolean b42 = binarynode_i5.equals((java.lang.Object) str41);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(listnode_i12);
        org.junit.Assert.assertTrue(b21 == false);
        org.junit.Assert.assertNotNull(listnode_i23);
        org.junit.Assert.assertNotNull(listnode_i28);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNotNull(listnode_i39);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertTrue(b42 == false);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test151");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST5.transform(i_array10);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates12 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates13 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        java.lang.Integer[] i_array18 = removeDuplicates13.removeUsingSorting(i_array16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        java.lang.Integer[] i_array23 = removeDuplicates13.removeUsingSorting(i_array21);
        java.lang.Integer[] i_array24 = removeDuplicates12.removeUsingSorting(i_array21);
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 2, (-14040), (-14040), 27 };
        java.lang.Integer[] i_array30 = removeDuplicates12.removeUsingSet(i_array29);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates31 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates32 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        java.lang.Integer[] i_array37 = removeDuplicates32.removeUsingSorting(i_array35);
        java.lang.Integer[] i_array38 = removeDuplicates31.removeUsingSorting(i_array37);
        java.lang.Integer[] i_array39 = removeDuplicates12.removeUsingSet(i_array38);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates40 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        java.lang.Integer[] i_array45 = removeDuplicates40.removeUsingSorting(i_array43);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST46 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST46.transform(i_array48);
        java.lang.Integer[] i_array50 = removeDuplicates40.removeUsingSorting(i_array48);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates51 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates52 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST53 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array55 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = sortedArrayToBST53.transform(i_array55);
        java.lang.Integer[] i_array57 = removeDuplicates52.removeUsingSorting(i_array55);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST58 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = sortedArrayToBST58.transform(i_array60);
        java.lang.Integer[] i_array62 = removeDuplicates52.removeUsingSorting(i_array60);
        java.lang.Integer[] i_array63 = removeDuplicates51.removeUsingSorting(i_array60);
        java.lang.Integer[] i_array64 = removeDuplicates40.removeUsingSet(i_array63);
        java.lang.Integer[] i_array65 = removeDuplicates12.removeUsingSet(i_array64);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates66 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST67.transform(i_array69);
        java.lang.Integer[] i_array71 = removeDuplicates66.removeUsingSorting(i_array69);
        java.lang.Integer[] i_array72 = removeDuplicates12.removeUsingSet(i_array71);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST5.transform(i_array71);
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(binarynode_i56);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(binarynode_i61);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test152");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        com.github.pedrovgs.problem18.IsBST isBST7 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = isBST7.checkRecursive(binarynode_i11);
        boolean b13 = listNode6.equals((java.lang.Object) binarynode_i11);
        com.github.pedrovgs.linkedlist.ListNode listNode14 = reverseLinkedList1.reverseIterative(listNode6);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i19 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList20 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = null;
        binarynode_i26.setRight(binarynode_i27);
        boolean b29 = listnode_mergeSortedArrays22.equals((java.lang.Object) binarynode_i27);
        com.github.pedrovgs.linkedlist.ListNode listNode30 = reverseLinkedList20.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode31 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays32 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays32);
        java.lang.String str34 = listnode_mergeSortedArrays33.toString();
        deleteListNode31.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays33);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers38 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b39 = listnode_mergeSortedArrays37.equals((java.lang.Object) mergeBinaryNumbers38);
        deleteListNode31.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i41 = reverseLinkedList20.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        com.github.pedrovgs.linkedlist.ListNode listNode42 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        com.github.pedrovgs.linkedlist.ListNode listNode43 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i45 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode43, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(listNode14);
        org.junit.Assert.assertNotNull(listnode_i19);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertNotNull(listNode30);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(listnode_i41);
        org.junit.Assert.assertNotNull(listNode42);
        org.junit.Assert.assertNotNull(listNode43);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test153");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        try {
            java.lang.Integer i14 = vector_i4.get(9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test154");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        java.lang.Integer i8 = stack_i2.push((java.lang.Integer) 10);
        java.util.Enumeration<java.lang.Integer> enumeration_i9 = stack_i2.elements();
        java.util.Enumeration<java.lang.Integer> enumeration_i10 = stack_i2.elements();
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertTrue("'" + i8 + "' != '" + 10 + "'", i8.equals(10));
        org.junit.Assert.assertNotNull(enumeration_i9);
        org.junit.Assert.assertNotNull(enumeration_i10);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test155");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        java.lang.String str13 = listnode_mergeSortedArrays12.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = reverseLinkedList10.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList28 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements29 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode34 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        removeListDuplicatedElements29.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = getTheElementInTheMiddleOfTheList28.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i37 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList38 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements39 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList40 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        java.lang.String str43 = listnode_mergeSortedArrays42.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode44 = reverseLinkedList40.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        removeListDuplicatedElements39.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = getTheElementInTheMiddleOfTheList38.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i47 = getTheElementInTheMiddleOfTheList1.get(listnode_i46);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode49 = findKthElement0.find2((com.github.pedrovgs.linkedlist.ListNode) listnode_i46, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertNotNull(listnode_i9);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNotNull(listNode34);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNotNull(listnode_i37);
        org.junit.Assert.assertNotNull(listNode44);
        org.junit.Assert.assertNotNull(listnode_i46);
        org.junit.Assert.assertNotNull(listnode_i47);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test156");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array4 = new int[] { (byte) 1, (byte) 10 };
        splitArray1.splitSwappingPartition(i_array4);
        splitArray0.splitSwappingRecursive(i_array4);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral7 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array8 = new int[][] {};
        int[] i_array9 = goThroughMatrixInSpiral7.go(i_array_array8);
        splitArray0.splitSwappingRecursive(i_array9);
        com.github.pedrovgs.problem80.QuickSort quickSort11 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem8.SplitArray splitArray12 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array15 = new int[] { (byte) 1, (byte) 10 };
        splitArray12.splitSwappingPartition(i_array15);
        com.github.pedrovgs.problem2.Vector vector17 = new com.github.pedrovgs.problem2.Vector(i_array15);
        quickSort11.sort(i_array15);
        splitArray0.splitSwappingRecursive(i_array15);
        com.github.pedrovgs.problem2.Vector vector20 = new com.github.pedrovgs.problem2.Vector(i_array15);
        int i21 = vector20.size();
        int i22 = vector20.size();
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertTrue(i21 == 2);
        org.junit.Assert.assertTrue(i22 == 2);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test157");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getRecursive(0);
        int i8 = factorial0.getIterative(3);
        int i10 = factorial0.getTailRecursive(270);
        try {
            int i12 = factorial0.getIterative((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 6);
        org.junit.Assert.assertTrue(i10 == 0);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test158");
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode0 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        java.lang.String str3 = listnode_mergeSortedArrays2.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays5.setData(mergeSortedArrays7);
        listnode_mergeSortedArrays2.setNext(listnode_mergeSortedArrays5);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = listnode_mergeSortedArrays11.getNext();
        listnode_mergeSortedArrays2.setNext(listnode_mergeSortedArrays11);
        deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays11);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i19 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList20 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = null;
        binarynode_i26.setRight(binarynode_i27);
        boolean b29 = listnode_mergeSortedArrays22.equals((java.lang.Object) binarynode_i27);
        com.github.pedrovgs.linkedlist.ListNode listNode30 = reverseLinkedList20.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode listNode31 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        deleteListNode0.delete(listNode31);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements33 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList34 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = null;
        binarynode_i40.setRight(binarynode_i41);
        boolean b43 = listnode_mergeSortedArrays36.equals((java.lang.Object) binarynode_i41);
        com.github.pedrovgs.linkedlist.ListNode listNode44 = reverseLinkedList34.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays36);
        removeListDuplicatedElements33.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements46 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements33);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList47 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = null;
        binarynode_i53.setRight(binarynode_i54);
        boolean b56 = listnode_mergeSortedArrays49.equals((java.lang.Object) binarynode_i54);
        com.github.pedrovgs.linkedlist.ListNode listNode57 = reverseLinkedList47.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays49);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode58 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays59 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays60 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays59);
        java.lang.String str61 = listnode_mergeSortedArrays60.toString();
        deleteListNode58.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays60);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers65 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b66 = listnode_mergeSortedArrays64.equals((java.lang.Object) mergeBinaryNumbers65);
        deleteListNode58.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i68 = reverseLinkedList47.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays69 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays70 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays69);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers71 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b72 = listnode_mergeSortedArrays70.equals((java.lang.Object) mergeBinaryNumbers71);
        com.github.pedrovgs.linkedlist.ListNode listNode73 = reverseLinkedList47.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays70);
        removeListDuplicatedElements33.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode73);
        java.lang.String str75 = listNode73.toString();
        deleteListNode0.delete(listNode73);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays12);
        org.junit.Assert.assertNotNull(listnode_i19);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertNotNull(listNode30);
        org.junit.Assert.assertNotNull(listNode31);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays38);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(listNode44);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays50);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays51);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listNode57);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNotNull(listnode_i68);
        org.junit.Assert.assertTrue(b72 == false);
        org.junit.Assert.assertNotNull(listNode73);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test159");
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder0 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian1 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d4 = avlTreeMedian1.find(binarynode_i3);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode5 = binaryTreePreOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i3);
        com.github.pedrovgs.problem18.IsBST isBST6 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = isBST6.checkRecursive(binarynode_i10);
        boolean b12 = binarynode_i10.hasRight();
        java.lang.Integer i13 = binarynode_i10.getData();
        java.lang.Integer i14 = binarynode_i10.getData();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode15 = binaryTreePreOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor16 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals17 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        boolean b27 = binarynode_i26.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i26.getRight();
        boolean b29 = binaryTreeEquals17.areEqualsIterative(binarynode_i21, binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode39 = lowestCommonAncestor16.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian40 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d43 = avlTreeMedian40.find(binarynode_i42);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor44 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals45 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST46 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST46.transform(i_array48);
        boolean b50 = binarynode_i49.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        boolean b55 = binarynode_i54.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = binarynode_i54.getRight();
        boolean b57 = binaryTreeEquals45.areEqualsIterative(binarynode_i49, binarynode_i54);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST58 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = sortedArrayToBST58.transform(i_array60);
        boolean b62 = binarynode_i61.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST63 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = sortedArrayToBST63.transform(i_array65);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode67 = lowestCommonAncestor44.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i61, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = binarynode_i54.getLeft();
        double d69 = avlTreeMedian40.find(binarynode_i54);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        boolean b74 = binarynode_i73.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = binarynode_i73.getRight();
        java.lang.Integer i76 = binarynode_i73.getData();
        binarynode_i54.setLeft(binarynode_i73);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian78 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d81 = avlTreeMedian78.find(binarynode_i80);
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf82 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf83 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf82);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode84 = lowestCommonAncestor16.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_pathToEveryLeaf83);
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode85 = binaryTreePreOrder0.getIterative(binaryNode84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d4 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode5);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == true);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue("'" + i13 + "' != '" + 100 + "'", i13.equals(100));
        org.junit.Assert.assertTrue("'" + i14 + "' != '" + 100 + "'", i14.equals(100));
        org.junit.Assert.assertNotNull(list_binaryNode15);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertNull(binaryNode39);
        org.junit.Assert.assertTrue(d43 == 10.0d);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertTrue(b50 == false);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == false);
        org.junit.Assert.assertNull(binarynode_i56);
        org.junit.Assert.assertTrue(b57 == true);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(binarynode_i61);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(binarynode_i66);
        org.junit.Assert.assertNull(binaryNode67);
        org.junit.Assert.assertNull(binarynode_i68);
        org.junit.Assert.assertTrue(d69 == 100.0d);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertNull(binarynode_i75);
        org.junit.Assert.assertTrue("'" + i76 + "' != '" + 100 + "'", i76.equals(100));
        org.junit.Assert.assertTrue(d81 == 10.0d);
        org.junit.Assert.assertNull(binaryNode84);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test160");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        java.lang.String str13 = listnode_mergeSortedArrays12.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = reverseLinkedList10.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem62.PalindromeList palindromeList28 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList29 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays30);
        java.lang.String str32 = listnode_mergeSortedArrays31.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i33 = reverseLinkedList29.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        boolean b34 = palindromeList28.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = null;
        binarynode_i40.setRight(binarynode_i41);
        boolean b43 = listnode_mergeSortedArrays36.equals((java.lang.Object) binarynode_i41);
        listnode_mergeSortedArrays31.setNext(listnode_mergeSortedArrays36);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays45 = listnode_mergeSortedArrays36.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements46 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList47 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = null;
        binarynode_i53.setRight(binarynode_i54);
        boolean b56 = listnode_mergeSortedArrays49.equals((java.lang.Object) binarynode_i54);
        com.github.pedrovgs.linkedlist.ListNode listNode57 = reverseLinkedList47.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays49);
        removeListDuplicatedElements46.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode57);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements59 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements46);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList60 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements61 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList62 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        java.lang.String str65 = listnode_mergeSortedArrays64.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode66 = reverseLinkedList62.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        removeListDuplicatedElements61.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i68 = getTheElementInTheMiddleOfTheList60.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
        removeListDuplicatedElements46.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
        listnode_mergeSortedArrays36.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode66);
        try {
            int i71 = sumLists0.sum(listnode_i27, (com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertNotNull(listnode_i9);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNotNull(listnode_i33);
        org.junit.Assert.assertTrue(b34 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays38);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays45);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays50);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays51);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listNode57);
        org.junit.Assert.assertNotNull(listNode66);
        org.junit.Assert.assertNotNull(listnode_i68);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test161");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.lang.Object obj8 = vector_i4.clone();
        java.lang.Integer i9 = vector_i4.firstElement();
        java.util.ListIterator<java.lang.Integer> listiterator_i10 = vector_i4.listIterator();
        int i11 = vector_i4.capacity();
        vector_i4.clear();
        java.util.Iterator<java.lang.Integer> iterator_i13 = vector_i4.iterator();
        vector_i4.removeAllElements();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + i9 + "' != '" + 0 + "'", i9.equals(0));
        org.junit.Assert.assertNotNull(listiterator_i10);
        org.junit.Assert.assertTrue(i11 == 10);
        org.junit.Assert.assertNotNull(iterator_i13);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test162");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseIterative("1");
        java.lang.String str8 = reverseString0.reverseRecursive("/");
        java.lang.String str10 = reverseString0.reverseIterative("100##");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1" + "'", str6.equals("1"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/" + "'", str8.equals("/"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "##001" + "'", str10.equals("##001"));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test163");
        com.github.pedrovgs.problem76.InsertionSort insertionSort0 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements1 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array5 = multiplyArrayElements1.multiply(i_array4);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays6 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays6);
        com.github.pedrovgs.problem8.SplitArray splitArray8 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray9 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array12 = new int[] { (byte) 1, (byte) 10 };
        splitArray9.splitSwappingPartition(i_array12);
        splitArray8.splitSwappingRecursive(i_array12);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral15 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array16 = new int[][] {};
        int[] i_array17 = goThroughMatrixInSpiral15.go(i_array_array16);
        splitArray8.splitSwappingRecursive(i_array17);
        com.github.pedrovgs.problem80.QuickSort quickSort19 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays20 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort21 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray22 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array25 = new int[] { (byte) 1, (byte) 10 };
        splitArray22.splitSwappingPartition(i_array25);
        selectionSort21.sort(i_array25);
        com.github.pedrovgs.problem8.SplitArray splitArray28 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array31 = new int[] { (byte) 1, (byte) 10 };
        splitArray28.splitSwappingPartition(i_array31);
        int[] i_array39 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray28.splitSwappingRecursive(i_array39);
        int[] i_array41 = mergeSortedArrays20.merge(i_array25, i_array39);
        quickSort19.sort(i_array25);
        int[] i_array43 = mergeSortedArrays6.merge(i_array17, i_array25);
        int[] i_array44 = multiplyArrayElements1.multiply(i_array25);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral45 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array46 = new int[][] {};
        int[] i_array47 = goThroughMatrixInSpiral45.go(i_array_array46);
        int[] i_array50 = new int[] { 107, 3628800 };
        int[][] i_array_array51 = new int[][] { i_array50 };
        int[] i_array52 = goThroughMatrixInSpiral45.go(i_array_array51);
        com.github.pedrovgs.problem42.FloodFill floodFill53 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral54 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array55 = new int[][] {};
        int[] i_array56 = goThroughMatrixInSpiral54.go(i_array_array55);
        floodFill53.apply(i_array_array55, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral62 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array63 = new int[][] {};
        int[] i_array64 = goThroughMatrixInSpiral62.go(i_array_array63);
        int[] i_array71 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array78 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array79 = new int[][] { i_array71, i_array78 };
        int[] i_array80 = goThroughMatrixInSpiral62.go(i_array_array79);
        floodFill53.apply(i_array_array79, (-8), (-14040), 2147483647, (-8));
        int[] i_array86 = goThroughMatrixInSpiral45.go(i_array_array79);
        int[] i_array87 = multiplyArrayElements1.multiply(i_array86);
        insertionSort0.sort(i_array87);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array_array46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array_array51);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array_array55);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array_array63);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(i_array_array79);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertNotNull(i_array86);
        org.junit.Assert.assertNotNull(i_array87);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test164");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        vector_i4.setSize(10);
        com.github.pedrovgs.problem32.Contains contains15 = new com.github.pedrovgs.problem32.Contains();
        boolean b18 = contains15.evaluate("", "/");
        int i19 = vector_i4.indexOf((java.lang.Object) b18);
        vector_i4.clear();
        vector_i4.trimToSize();
        vector_i4.trimToSize();
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding23 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i26 = subtractAdding23.subtract((int) (short) 0, (int) '4');
        int i29 = subtractAdding23.subtract((int) (byte) 10, (-97));
        int i32 = subtractAdding23.subtract((int) (short) 0, 2);
        int i35 = subtractAdding23.subtract((int) (byte) 100, 107);
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding36 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i39 = subtractAdding36.subtract((int) '4', (int) (short) 1);
        int i42 = subtractAdding36.subtract(72, (-6));
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding43 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i46 = subtractAdding43.subtract((int) '4', (int) (short) 1);
        int i49 = subtractAdding43.subtract(0, (int) 'a');
        int i52 = subtractAdding43.subtract((-1), 51);
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding53 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i56 = subtractAdding53.subtract((int) '4', (int) (short) 1);
        int i59 = subtractAdding53.subtract(72, (-6));
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding60 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i63 = subtractAdding60.subtract((int) '4', (int) (short) 1);
        int i66 = subtractAdding60.subtract(0, (int) 'a');
        int i69 = subtractAdding60.subtract((-1), 51);
        int i72 = subtractAdding60.subtract(2, (-52000));
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding73 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i76 = subtractAdding73.subtract((int) '4', (int) (short) 1);
        com.github.pedrovgs.problem73.SubtractAdding[] subtractAdding_array77 = new com.github.pedrovgs.problem73.SubtractAdding[] { subtractAdding23, subtractAdding36, subtractAdding43, subtractAdding53, subtractAdding60, subtractAdding73 };
        com.github.pedrovgs.problem73.SubtractAdding[] subtractAdding_array78 = vector_i4.toArray(subtractAdding_array77);
        java.util.Enumeration<java.lang.Integer> enumeration_i79 = vector_i4.elements();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertTrue(i19 == (-1));
        org.junit.Assert.assertTrue(i26 == (-52));
        org.junit.Assert.assertTrue(i29 == 107);
        org.junit.Assert.assertTrue(i32 == (-2));
        org.junit.Assert.assertTrue(i35 == (-7));
        org.junit.Assert.assertTrue(i39 == 51);
        org.junit.Assert.assertTrue(i42 == 78);
        org.junit.Assert.assertTrue(i46 == 51);
        org.junit.Assert.assertTrue(i49 == (-97));
        org.junit.Assert.assertTrue(i52 == (-52));
        org.junit.Assert.assertTrue(i56 == 51);
        org.junit.Assert.assertTrue(i59 == 78);
        org.junit.Assert.assertTrue(i63 == 51);
        org.junit.Assert.assertTrue(i66 == (-97));
        org.junit.Assert.assertTrue(i69 == (-52));
        org.junit.Assert.assertTrue(i72 == 52002);
        org.junit.Assert.assertTrue(i76 == 51);
        org.junit.Assert.assertNotNull(subtractAdding_array77);
        org.junit.Assert.assertNotNull(subtractAdding_array78);
        org.junit.Assert.assertNotNull(enumeration_i79);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test165");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array7 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces1.replace(char_array7);
        replaceSpaces0.replace(char_array7);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces10 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces11 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces12 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array13 = new char[] {};
        replaceSpaces12.replace2(char_array13);
        replaceSpaces11.replace(char_array13);
        replaceSpaces10.replace(char_array13);
        replaceSpaces0.replace(char_array13);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces18 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces19 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array25 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces19.replace(char_array25);
        replaceSpaces18.replace(char_array25);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces28 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces29 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces30 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array31 = new char[] {};
        replaceSpaces30.replace2(char_array31);
        replaceSpaces29.replace(char_array31);
        replaceSpaces28.replace(char_array31);
        replaceSpaces18.replace(char_array31);
        replaceSpaces0.replace2(char_array31);
        char[] char_array37 = null;
        try {
            replaceSpaces0.replace(char_array37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(char_array7);
        org.junit.Assert.assertNotNull(char_array13);
        org.junit.Assert.assertNotNull(char_array25);
        org.junit.Assert.assertNotNull(char_array31);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test166");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("1", "97");
        boolean b6 = simpleRegularExpression0.evaluate("/97/10210#3/", "[0, 1, 1]");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test167");
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral0 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array1 = new int[][] {};
        int[] i_array2 = goThroughMatrixInSpiral0.go(i_array_array1);
        com.github.pedrovgs.problem42.FloodFill floodFill3 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral4 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array5 = new int[][] {};
        int[] i_array6 = goThroughMatrixInSpiral4.go(i_array_array5);
        floodFill3.apply(i_array_array5, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros12 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral13 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array14 = new int[][] {};
        int[] i_array15 = goThroughMatrixInSpiral13.go(i_array_array14);
        int[] i_array18 = new int[] { 107, 3628800 };
        int[][] i_array_array19 = new int[][] { i_array18 };
        int[] i_array20 = goThroughMatrixInSpiral13.go(i_array_array19);
        rewriteRowAndColumnsWithZeros12.rewrite(i_array_array19);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral22 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array23 = new int[][] {};
        int[] i_array24 = goThroughMatrixInSpiral22.go(i_array_array23);
        rewriteRowAndColumnsWithZeros12.rewrite(i_array_array23);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral26 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array27 = new int[][] {};
        int[] i_array28 = goThroughMatrixInSpiral26.go(i_array_array27);
        int[] i_array35 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array42 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array43 = new int[][] { i_array35, i_array42 };
        int[] i_array44 = goThroughMatrixInSpiral26.go(i_array_array43);
        rewriteRowAndColumnsWithZeros12.rewrite(i_array_array43);
        floodFill3.apply(i_array_array43, 52, 6, (int) (short) 0, 13631492);
        int[] i_array51 = goThroughMatrixInSpiral0.go(i_array_array43);
        int[][] i_array_array52 = null;
        try {
            int[] i_array53 = goThroughMatrixInSpiral0.go(i_array_array52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array1);
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertNotNull(i_array_array5);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(i_array_array14);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array_array19);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array_array23);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array_array27);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array_array43);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array51);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test168");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces2 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array3 = new char[] {};
        replaceSpaces2.replace2(char_array3);
        replaceSpaces1.replace(char_array3);
        replaceSpaces0.replace(char_array3);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces7 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces8 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array9 = new char[] {};
        replaceSpaces8.replace2(char_array9);
        replaceSpaces7.replace(char_array9);
        replaceSpaces0.replace2(char_array9);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces13 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array19 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces13.replace(char_array19);
        replaceSpaces0.replace2(char_array19);
        char[] char_array22 = null;
        try {
            replaceSpaces0.replace2(char_array22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(char_array3);
        org.junit.Assert.assertNotNull(char_array9);
        org.junit.Assert.assertNotNull(char_array19);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test169");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressRecursive("/hi!/");
        java.lang.String str12 = compressString0.compress("");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "/hi!/" + "'", str10.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test170");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("hi!");
        java.lang.String str4 = reverseSentence0.reverse("/32/-52/7/");
        java.lang.String str6 = reverseSentence0.reverse("/[-1]/]1-[/]1- ,1 ,1 ,0[/01/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!" + "'", str2.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/32/-52/7/" + "'", str4.equals("/32/-52/7/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + ",0[/01/ ,1 ,1 /[-1]/]1-[/]1-" + "'", str6.equals(",0[/01/ ,1 ,1 /[-1]/]1-[/]1-"));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test171");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("hi!");
        java.lang.String str4 = reverseSentence0.reverse("/hi!/");
        java.lang.String str6 = reverseSentence0.reverse("[]");
        java.lang.String str8 = reverseSentence0.reverse("hi!");
        java.lang.String str10 = reverseSentence0.reverse("[");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!" + "'", str2.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/hi!/" + "'", str4.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[]" + "'", str6.equals("[]"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[" + "'", str10.equals("["));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test172");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        boolean b23 = palindromeList1.checkReversing(listNode20);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList24 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements25 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList26 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays27);
        java.lang.String str29 = listnode_mergeSortedArrays28.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode30 = reverseLinkedList26.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays28);
        removeListDuplicatedElements25.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode30);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i32 = getTheElementInTheMiddleOfTheList24.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode30);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList33 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        java.lang.String str36 = listnode_mergeSortedArrays35.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i37 = reverseLinkedList33.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList38 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays39 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays40 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays39);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = listnode_mergeSortedArrays40.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = listnode_mergeSortedArrays40.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = null;
        binarynode_i44.setRight(binarynode_i45);
        boolean b47 = listnode_mergeSortedArrays40.equals((java.lang.Object) binarynode_i45);
        com.github.pedrovgs.linkedlist.ListNode listNode48 = reverseLinkedList38.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays40);
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList33.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays40);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i50 = getTheElementInTheMiddleOfTheList24.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList51 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements52 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList53 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays54 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays54);
        java.lang.String str56 = listnode_mergeSortedArrays55.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode57 = reverseLinkedList53.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays55);
        removeListDuplicatedElements52.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode57);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i59 = getTheElementInTheMiddleOfTheList51.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode57);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i60 = getTheElementInTheMiddleOfTheList24.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode57);
        try {
            int i61 = sumLists0.sumReverse((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20, (com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertNotNull(listNode30);
        org.junit.Assert.assertNotNull(listnode_i32);
        org.junit.Assert.assertNotNull(listnode_i37);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays41);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays42);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNotNull(listNode48);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(listnode_i50);
        org.junit.Assert.assertNotNull(listNode57);
        org.junit.Assert.assertNotNull(listnode_i59);
        org.junit.Assert.assertNotNull(listnode_i60);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test173");
        com.github.pedrovgs.problem30.ScientificNotation scientificNotation0 = new com.github.pedrovgs.problem30.ScientificNotation();
        try {
            long long2 = scientificNotation0.calculate("[1, -1, 100, 0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test174");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("10");
        boolean b6 = palindromes0.evaluate("/23/[/#2021/");
        boolean b8 = palindromes0.evaluate("/BinaryNode{data=10}/100##/[/32/112197661/");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test175");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("hi!");
        java.lang.String str4 = reverseSentence0.reverse("/32/-52/7/");
        java.lang.String str6 = reverseSentence0.reverse("/23/[/##001/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!" + "'", str2.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/32/-52/7/" + "'", str4.equals("/32/-52/7/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "/23/[/##001/" + "'", str6.equals("/23/[/##001/"));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test176");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder1 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode6 = binaryTreePreOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i4);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i7 = binaryTreeInOrder0.getIterative(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor8 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals9 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = binarynode_i13.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = binarynode_i18.getRight();
        boolean b21 = binaryTreeEquals9.areEqualsIterative(binarynode_i13, binarynode_i18);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST22 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array24 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = sortedArrayToBST22.transform(i_array24);
        boolean b26 = binarynode_i25.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode31 = lowestCommonAncestor8.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i25, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i30);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        binarynode_i25.setRight(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i39 = binaryTreeInOrder0.getIterative(binarynode_i35);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian40 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals41 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder42 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder43 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian44 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d47 = avlTreeMedian44.find(binarynode_i46);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode48 = binaryTreePreOrder43.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i46);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i49 = binaryTreeInOrder42.getIterative(binarynode_i46);
        com.github.pedrovgs.problem18.IsBST isBST50 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        boolean b55 = isBST50.checkRecursive(binarynode_i54);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals56 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        boolean b61 = binarynode_i60.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        boolean b66 = binarynode_i65.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = binarynode_i65.getRight();
        boolean b68 = binaryTreeEquals56.areEqualsIterative(binarynode_i60, binarynode_i65);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = binarynode_i60.getLeft();
        boolean b70 = isBST50.checkIterative(binarynode_i60);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals71 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        boolean b76 = binarynode_i75.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        boolean b81 = binarynode_i80.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i82 = binarynode_i80.getRight();
        boolean b83 = binaryTreeEquals71.areEqualsIterative(binarynode_i75, binarynode_i80);
        boolean b84 = isBST50.checkIterative(binarynode_i80);
        boolean b85 = binaryTreeEquals41.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i46, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        double d86 = avlTreeMedian40.find(binarynode_i80);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i87 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode6);
        org.junit.Assert.assertNotNull(list_binarynode_i7);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(binarynode_i25);
        org.junit.Assert.assertTrue(b26 == false);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertNull(binaryNode31);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertNotNull(list_binarynode_i39);
        org.junit.Assert.assertTrue(d47 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode48);
        org.junit.Assert.assertNotNull(list_binarynode_i49);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNull(binarynode_i67);
        org.junit.Assert.assertTrue(b68 == true);
        org.junit.Assert.assertNull(binarynode_i69);
        org.junit.Assert.assertTrue(b70 == true);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == false);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertTrue(b81 == false);
        org.junit.Assert.assertNull(binarynode_i82);
        org.junit.Assert.assertTrue(b83 == true);
        org.junit.Assert.assertTrue(b84 == true);
        org.junit.Assert.assertTrue(b85 == false);
        org.junit.Assert.assertTrue(d86 == 100.0d);
        org.junit.Assert.assertNotNull(list_binarynode_i87);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test177");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor42 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals43 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST44 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array46 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = sortedArrayToBST44.transform(i_array46);
        boolean b48 = binarynode_i47.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        boolean b53 = binarynode_i52.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = binarynode_i52.getRight();
        boolean b55 = binaryTreeEquals43.areEqualsIterative(binarynode_i47, binarynode_i52);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = binarynode_i59.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST61 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = sortedArrayToBST61.transform(i_array63);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode65 = lowestCommonAncestor42.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i64);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST66 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array68 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = sortedArrayToBST66.transform(i_array68);
        boolean b70 = binarynode_i69.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i71 = binarynode_i69.getRight();
        binarynode_i59.setRight(binarynode_i69);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode73 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i69);
        boolean b74 = binarynode_i69.hasLeft();
        boolean b75 = binarynode_i69.hasLeft();
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(binarynode_i47);
        org.junit.Assert.assertTrue(b48 == false);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue(b53 == false);
        org.junit.Assert.assertNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == false);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(binarynode_i64);
        org.junit.Assert.assertNull(binaryNode65);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(binarynode_i69);
        org.junit.Assert.assertTrue(b70 == false);
        org.junit.Assert.assertNull(binarynode_i71);
        org.junit.Assert.assertNotNull(list_binaryNode73);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertTrue(b75 == false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test178");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate2("35");
        boolean b6 = uniqueChars0.evaluate("/32/-52/7/");
        boolean b8 = uniqueChars0.evaluate("[100]");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test179");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        try {
            java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("][", "35");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test180");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = null;
        binarynode_i8.setRight(binarynode_i9);
        boolean b11 = listnode_mergeSortedArrays4.equals((java.lang.Object) binarynode_i9);
        com.github.pedrovgs.linkedlist.ListNode listNode12 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode12);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements1);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode26 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays27);
        java.lang.String str29 = listnode_mergeSortedArrays28.toString();
        deleteListNode26.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays28);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers33 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b34 = listnode_mergeSortedArrays32.equals((java.lang.Object) mergeBinaryNumbers33);
        deleteListNode26.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers39 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b40 = listnode_mergeSortedArrays38.equals((java.lang.Object) mergeBinaryNumbers39);
        com.github.pedrovgs.linkedlist.ListNode listNode41 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays38);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode41);
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange44 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange45 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange44);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList46 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays47 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays48 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays47);
        java.lang.String str49 = listnode_mergeSortedArrays48.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode50 = reverseLinkedList46.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays48);
        boolean b51 = pair_comparable_str_combinationsOfChange45.equals((java.lang.Object) listNode50);
        try {
            int i52 = sumLists0.sumReverse((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode41, (com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(listNode12);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNotNull(listNode41);
        org.junit.Assert.assertNotNull(listNode50);
        org.junit.Assert.assertTrue(b51 == false);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test181");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i5 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList6 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays8 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays7);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = null;
        binarynode_i12.setRight(binarynode_i13);
        boolean b15 = listnode_mergeSortedArrays8.equals((java.lang.Object) binarynode_i13);
        com.github.pedrovgs.linkedlist.ListNode listNode16 = reverseLinkedList6.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays8);
        com.github.pedrovgs.linkedlist.ListNode listNode17 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays8);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode18 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList19 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays20 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays21 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays20);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = listnode_mergeSortedArrays21.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays21.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = null;
        binarynode_i25.setRight(binarynode_i26);
        boolean b28 = listnode_mergeSortedArrays21.equals((java.lang.Object) binarynode_i26);
        com.github.pedrovgs.linkedlist.ListNode listNode29 = reverseLinkedList19.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays21);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode30 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        deleteListNode30.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers37 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b38 = listnode_mergeSortedArrays36.equals((java.lang.Object) mergeBinaryNumbers37);
        deleteListNode30.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays36);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i40 = reverseLinkedList19.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays36);
        deleteListNode18.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays36);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        java.lang.String str45 = listnode_mergeSortedArrays44.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode46 = reverseLinkedList42.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays47 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays48 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays47);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = listnode_mergeSortedArrays48.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = listnode_mergeSortedArrays48.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays51 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort52 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray53 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array56 = new int[] { (byte) 1, (byte) 10 };
        splitArray53.splitSwappingPartition(i_array56);
        selectionSort52.sort(i_array56);
        com.github.pedrovgs.problem8.SplitArray splitArray59 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array62 = new int[] { (byte) 1, (byte) 10 };
        splitArray59.splitSwappingPartition(i_array62);
        int[] i_array70 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray59.splitSwappingRecursive(i_array70);
        int[] i_array72 = mergeSortedArrays51.merge(i_array56, i_array70);
        listnode_mergeSortedArrays48.setData(mergeSortedArrays51);
        listNode46.setData(mergeSortedArrays51);
        listnode_mergeSortedArrays36.setData(mergeSortedArrays51);
        listnode_mergeSortedArrays8.setData(mergeSortedArrays51);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode78 = findKthElement0.find2((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays8, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(listnode_i5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays9);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNotNull(listNode16);
        org.junit.Assert.assertNotNull(listNode17);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertTrue(b28 == false);
        org.junit.Assert.assertNotNull(listNode29);
        org.junit.Assert.assertTrue(b38 == false);
        org.junit.Assert.assertNotNull(listnode_i40);
        org.junit.Assert.assertNotNull(listNode46);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays49);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays50);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(i_array72);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test182");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = reverseLinkedList32.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList37 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays40 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = null;
        binarynode_i43.setRight(binarynode_i44);
        boolean b46 = listnode_mergeSortedArrays39.equals((java.lang.Object) binarynode_i44);
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList37.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays39);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode48 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers55 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b56 = listnode_mergeSortedArrays54.equals((java.lang.Object) mergeBinaryNumbers55);
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i58 = reverseLinkedList37.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList60 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements61 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList62 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = null;
        binarynode_i68.setRight(binarynode_i69);
        boolean b71 = listnode_mergeSortedArrays64.equals((java.lang.Object) binarynode_i69);
        com.github.pedrovgs.linkedlist.ListNode listNode72 = reverseLinkedList62.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        removeListDuplicatedElements61.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements74 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList75 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays76 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays77 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays76);
        java.lang.String str78 = listnode_mergeSortedArrays77.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode79 = reverseLinkedList75.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays77);
        removeListDuplicatedElements74.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        removeListDuplicatedElements61.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i82 = getTheElementInTheMiddleOfTheList60.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode83 = reverseLinkedList32.reverseIterative(listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i84 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode86 = findKthElement0.find(listNode79, 0);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList87 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements88 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList89 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays90 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays91 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays90);
        java.lang.String str92 = listnode_mergeSortedArrays91.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode93 = reverseLinkedList89.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays91);
        removeListDuplicatedElements88.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode93);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i95 = getTheElementInTheMiddleOfTheList87.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode93);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode97 = findKthElement0.find2(listNode93, (-52000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays40);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays41);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listnode_i58);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays65);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays66);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(listNode72);
        org.junit.Assert.assertNotNull(listNode79);
        org.junit.Assert.assertNotNull(listnode_i82);
        org.junit.Assert.assertNotNull(listNode83);
        org.junit.Assert.assertNotNull(listnode_i84);
        org.junit.Assert.assertNotNull(listNode86);
        org.junit.Assert.assertNotNull(listNode93);
        org.junit.Assert.assertNotNull(listnode_i95);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test183");
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i1 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        boolean b2 = binarynode_i1.hasLeft();
        org.junit.Assert.assertTrue(b2 == false);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test184");
        com.github.pedrovgs.problem78.AutoBoxingTrick autoBoxingTrick0 = new com.github.pedrovgs.problem78.AutoBoxingTrick();
        boolean b3 = autoBoxingTrick0.compare((java.lang.Integer) 0, (java.lang.Integer) 2147483647);
        boolean b6 = autoBoxingTrick0.compare((java.lang.Integer) (-7), (java.lang.Integer) 13631492);
        boolean b9 = autoBoxingTrick0.compare((java.lang.Integer) (-5200), (java.lang.Integer) (-24));
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test185");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        java.lang.Object obj13 = null;
        int i14 = vector_i4.lastIndexOf(obj13);
        java.lang.Object[] obj_array15 = vector_i4.toArray();
        try {
            vector_i4.removeElementAt((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue(i14 == (-1));
        org.junit.Assert.assertNotNull(obj_array15);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test186");
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel0 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder1 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder2 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor7 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i17.getRight();
        boolean b20 = binaryTreeEquals8.areEqualsIterative(binarynode_i12, binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode30 = lowestCommonAncestor7.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i17.getLeft();
        double d32 = avlTreeMedian3.find(binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        java.lang.Integer i39 = binarynode_i36.getData();
        binarynode_i17.setLeft(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i41 = binaryTreeInOrder2.getIterative(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode42 = binaryTreePostOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode43 = treeToListByLevel0.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode44 = null;
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode45 = treeToListByLevel0.transform(binaryNode44);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth46 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i49 = new java.util.Stack<java.lang.Integer>();
        boolean b50 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i49, i_array48);
        boolean b51 = stack_i49.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i53 = stack_i49.search((java.lang.Object) sortedArrayToBST52);
        java.lang.Integer[] i_array57 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = sortedArrayToBST52.transform(i_array57);
        int i59 = binaryTreeDepth46.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i58);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode60 = treeToListByLevel0.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i58);
        com.github.pedrovgs.problem18.IsBST isBST61 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        boolean b66 = isBST61.checkRecursive(binarynode_i65);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth67 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i70 = new java.util.Stack<java.lang.Integer>();
        boolean b71 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i70, i_array69);
        boolean b72 = stack_i70.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST73 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i74 = stack_i70.search((java.lang.Object) sortedArrayToBST73);
        java.lang.Integer[] i_array78 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = sortedArrayToBST73.transform(i_array78);
        int i80 = binaryTreeDepth67.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i79);
        binarynode_i65.setRight(binarynode_i79);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode82 = treeToListByLevel0.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i79);
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertNull(binaryNode30);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(d32 == 100.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i41);
        org.junit.Assert.assertNotNull(list_binaryNode42);
        org.junit.Assert.assertNotNull(list_binaryNode43);
        org.junit.Assert.assertNotNull(list_binaryNode45);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertTrue(b50 == true);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertTrue(i53 == (-1));
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(binarynode_i58);
        org.junit.Assert.assertTrue(i59 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode60);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == true);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertTrue(b71 == true);
        org.junit.Assert.assertTrue(b72 == false);
        org.junit.Assert.assertTrue(i74 == (-1));
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(binarynode_i79);
        org.junit.Assert.assertTrue(i80 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode82);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test187");
        com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber reverseOrderOfBinaryNumber0 = new com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber();
        int i2 = reverseOrderOfBinaryNumber0.reverse(10);
        int i4 = reverseOrderOfBinaryNumber0.reverse(7);
        int i6 = reverseOrderOfBinaryNumber0.reverse(2147471031);
        org.junit.Assert.assertTrue(i2 == 5);
        org.junit.Assert.assertTrue(i4 == 7);
        org.junit.Assert.assertTrue(i6 == 1991901183);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test188");
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber0 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.problem75.SelectionSort selectionSort1 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray2 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array5 = new int[] { (byte) 1, (byte) 10 };
        splitArray2.splitSwappingPartition(i_array5);
        selectionSort1.sort(i_array5);
        int i8 = findTheMissingNumber0.find(i_array5);
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements9 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral10 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array11 = new int[][] {};
        int[] i_array12 = goThroughMatrixInSpiral10.go(i_array_array11);
        int[] i_array13 = multiplyArrayElements9.multiply(i_array12);
        com.github.pedrovgs.problem80.QuickSort quickSort14 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem8.SplitArray splitArray15 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array18 = new int[] { (byte) 1, (byte) 10 };
        splitArray15.splitSwappingPartition(i_array18);
        com.github.pedrovgs.problem2.Vector vector20 = new com.github.pedrovgs.problem2.Vector(i_array18);
        quickSort14.sort(i_array18);
        int[] i_array22 = multiplyArrayElements9.multiply(i_array18);
        int i23 = findTheMissingNumber0.find(i_array22);
        int[] i_array24 = null;
        try {
            int i25 = findTheMissingNumber0.find(i_array24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertTrue(i8 == (-8));
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertTrue(i23 == (-8));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test189");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("", "/!ih");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test190");
        com.github.pedrovgs.problem30.ScientificNotation scientificNotation0 = new com.github.pedrovgs.problem30.ScientificNotation();
        try {
            long long2 = scientificNotation0.calculate("[-1, 10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test191");
        com.github.pedrovgs.problem11.IntToString intToString0 = new com.github.pedrovgs.problem11.IntToString();
        java.lang.String str2 = intToString0.transform((int) 'a');
        java.lang.String str4 = intToString0.transform(1241513983);
        java.lang.String str6 = intToString0.transform((int) (short) 10);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "1241513983" + "'", str4.equals("1241513983"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10" + "'", str6.equals("10"));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test192");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_1 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_1.push((int) (byte) 10);
        int i4 = stack1_1.getMin();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList5 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements6 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList7 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = null;
        binarynode_i13.setRight(binarynode_i14);
        boolean b16 = listnode_mergeSortedArrays9.equals((java.lang.Object) binarynode_i14);
        com.github.pedrovgs.linkedlist.ListNode listNode17 = reverseLinkedList7.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays9);
        removeListDuplicatedElements6.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode17);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements19 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList20 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        java.lang.String str23 = listnode_mergeSortedArrays22.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode24 = reverseLinkedList20.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        removeListDuplicatedElements19.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode24);
        removeListDuplicatedElements6.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode24);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList5.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode24);
        boolean b28 = stack1_1.remove((java.lang.Object) listnode_i27);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i30 = partitionList0.split(listnode_i27, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue(i4 == 10);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays11);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNotNull(listNode17);
        org.junit.Assert.assertNotNull(listNode24);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertTrue(b28 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test193");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        try {
            java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersCheating("]1-[", "[");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test194");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((-52), (int) (byte) 100);
        int i6 = multiplicationWithoutMultiply0.calculate((-5200), 10);
        int i9 = multiplicationWithoutMultiply0.calculate(28, 2);
        int i12 = multiplicationWithoutMultiply0.calculate(32, 0);
        int i15 = multiplicationWithoutMultiply0.calculate((-132), 78);
        org.junit.Assert.assertTrue(i3 == (-5200));
        org.junit.Assert.assertTrue(i6 == (-52000));
        org.junit.Assert.assertTrue(i9 == 56);
        org.junit.Assert.assertTrue(i12 == 0);
        org.junit.Assert.assertTrue(i15 == (-10296));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test195");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("[nul2]", "[nul2]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test196");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressRecursive("/hi!/");
        java.lang.String str12 = compressString0.compressAlternativeApproach("3");
        java.lang.String str14 = compressString0.compressAlternativeApproach("35");
        java.lang.String str16 = compressString0.compressAlternativeApproach("01");
        java.lang.String str18 = compressString0.compress("");
        java.lang.String str20 = compressString0.compressRecursive("/2147483647/]1-[/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "/hi!/" + "'", str10.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "3" + "'", str12.equals("3"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "35" + "'", str14.equals("35"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "01" + "'", str16.equals("01"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "/2147483647/]1-[/" + "'", str20.equals("/2147483647/]1-[/"));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test197");
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization0 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i2 = binaryTreeSerialization0.deserialize("BinaryNode{data=100}");
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor4 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals5 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = sortedArrayToBST6.transform(i_array8);
        boolean b10 = binarynode_i9.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST11 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array13 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = sortedArrayToBST11.transform(i_array13);
        boolean b15 = binarynode_i14.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = binarynode_i14.getRight();
        boolean b17 = binaryTreeEquals5.areEqualsIterative(binarynode_i9, binarynode_i14);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode27 = lowestCommonAncestor4.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i14, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i21, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26);
        java.lang.String str28 = binarynode_i26.toString();
        boolean b29 = isBST3.checkIterative(binarynode_i26);
        java.lang.String str30 = binarynode_i26.toString();
        java.lang.String str31 = binaryTreeSerialization0.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = binaryTreeSerialization0.deserialize("[100]");
        org.junit.Assert.assertNotNull(binarynode_i2);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(binarynode_i9);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(binarynode_i14);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertNull(binaryNode27);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "BinaryNode{data=100}" + "'", str28.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "BinaryNode{data=100}" + "'", str30.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "100##" + "'", str31.equals("100##"));
        org.junit.Assert.assertNull(binarynode_i33);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test198");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        boolean b9 = vector_i4.add((java.lang.Integer) 10);
        boolean b11 = vector_i4.remove((java.lang.Object) 10L);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList12 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements13 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode18 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        removeListDuplicatedElements13.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i20 = getTheElementInTheMiddleOfTheList12.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        boolean b21 = vector_i4.contains((java.lang.Object) listnode_i20);
        java.util.Enumeration<java.lang.Integer> enumeration_i22 = vector_i4.elements();
        com.github.pedrovgs.problem37.PathCalculator pathCalculator23 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str27 = pathCalculator23.calculate("/", "97", "10010###");
        java.lang.String str31 = pathCalculator23.calculate("]1-[", "]1- ,1 ,1 ,0[", "01");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator32 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str36 = pathCalculator32.calculate("", "/", "hi!");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator37 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str41 = pathCalculator37.calculate("/", "97", "10010###");
        java.lang.String str45 = pathCalculator37.calculate("]1-[", "]1- ,1 ,1 ,0[", "01");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator46 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str50 = pathCalculator46.calculate("", "/", "hi!");
        java.lang.String str54 = pathCalculator46.calculate("BinaryNode{data=10}", "/100##/[/32/", "112197661");
        com.github.pedrovgs.problem37.PathCalculator[] pathCalculator_array55 = new com.github.pedrovgs.problem37.PathCalculator[] { pathCalculator23, pathCalculator32, pathCalculator37, pathCalculator46 };
        try {
            com.github.pedrovgs.problem37.PathCalculator[] pathCalculator_array56 = vector_i4.toArray(pathCalculator_array55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(listNode18);
        org.junit.Assert.assertNotNull(listnode_i20);
        org.junit.Assert.assertTrue(b21 == false);
        org.junit.Assert.assertNotNull(enumeration_i22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "/97/10010###/" + "'", str27.equals("/97/10010###/"));
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "/]1-[/]1- ,1 ,1 ,0[/01/" + "'", str31.equals("/]1-[/]1- ,1 ,1 ,0[/01/"));
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "/hi!/" + "'", str36.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "/97/10010###/" + "'", str41.equals("/97/10010###/"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "/]1-[/]1- ,1 ,1 ,0[/01/" + "'", str45.equals("/]1-[/]1- ,1 ,1 ,0[/01/"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "/hi!/" + "'", str50.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "/BinaryNode{data=10}/100##/[/32/112197661/" + "'", str54.equals("/BinaryNode{data=10}/100##/[/32/112197661/"));
        org.junit.Assert.assertNotNull(pathCalculator_array55);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test199");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compress("/!ih/");
        java.lang.String str14 = compressString0.compressAlternativeApproach("[null]");
        java.lang.String str16 = compressString0.compressRecursive("/23/[/##001/");
        java.lang.String str18 = compressString0.compressRecursive("!ih");
        java.lang.String str20 = compressString0.compressRecursive("[1, -1, 102, 0]");
        java.lang.String str22 = compressString0.compress("100##");
        java.lang.String str24 = compressString0.compress("");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[nul2]" + "'", str14.equals("[nul2]"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "/23/[/#2021/" + "'", str16.equals("/23/[/#2021/"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "!ih" + "'", str18.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[1, -1, 102, 0]" + "'", str20.equals("[1, -1, 102, 0]"));
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "102#2" + "'", str22.equals("102#2"));
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "" + "'", str24.equals(""));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test200");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator0 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str4 = pathCalculator0.calculate("32", "-52", "7");
        java.lang.String str8 = pathCalculator0.calculate("[0, 1, 1, -1]", "/#301021/79/", "-2");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/32/-52/7/" + "'", str4.equals("/32/-52/7/"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/[0, 1, 1, -1]/#301021/79/-2/" + "'", str8.equals("/[0, 1, 1, -1]/#301021/79/-2/"));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test201");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        com.github.pedrovgs.problem18.IsBST isBST8 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization9 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = binarynode_i13.hasRight();
        java.lang.Integer i15 = binarynode_i13.getData();
        java.lang.String str16 = binaryTreeSerialization9.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        boolean b17 = isBST8.checkIterative(binarynode_i13);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode18 = binaryTreeByLevel0.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        java.lang.String str21 = binarynode_i20.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode22 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i20);
        com.github.pedrovgs.problem18.IsBST isBST23 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor24 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals25 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        boolean b30 = binarynode_i29.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = binarynode_i34.getRight();
        boolean b37 = binaryTreeEquals25.areEqualsIterative(binarynode_i29, binarynode_i34);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode47 = lowestCommonAncestor24.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i34, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i41, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i46);
        java.lang.String str48 = binarynode_i46.toString();
        boolean b49 = isBST23.checkIterative(binarynode_i46);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST50 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array52 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = sortedArrayToBST50.transform(i_array52);
        boolean b54 = binarynode_i53.hasRight();
        java.lang.Integer i55 = binarynode_i53.getData();
        boolean b56 = isBST23.checkRecursive(binarynode_i53);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced57 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor58 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals59 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST60 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST60.transform(i_array62);
        boolean b64 = binarynode_i63.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST65 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = sortedArrayToBST65.transform(i_array67);
        boolean b69 = binarynode_i68.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = binarynode_i68.getRight();
        boolean b71 = binaryTreeEquals59.areEqualsIterative(binarynode_i63, binarynode_i68);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        boolean b76 = binarynode_i75.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode81 = lowestCommonAncestor58.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i68, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST82 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array84 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = sortedArrayToBST82.transform(i_array84);
        boolean b86 = binarynode_i85.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i87 = binarynode_i85.getRight();
        binarynode_i75.setRight(binarynode_i85);
        java.lang.Integer i89 = binarynode_i75.getData();
        boolean b90 = isTreeBalanced57.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        boolean b91 = isBST23.checkIterative(binarynode_i75);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode92 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertTrue("'" + i15 + "' != '" + 100 + "'", i15.equals(100));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "100##" + "'", str16.equals("100##"));
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNotNull(list_binaryNode18);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "BinaryNode{data=10}" + "'", str21.equals("BinaryNode{data=10}"));
        org.junit.Assert.assertNotNull(list_binaryNode22);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertTrue(b30 == false);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == true);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertNull(binaryNode47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "BinaryNode{data=100}" + "'", str48.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(b49 == true);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(binarynode_i53);
        org.junit.Assert.assertTrue(b54 == false);
        org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100 + "'", i55.equals(100));
        org.junit.Assert.assertTrue(b56 == true);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue(b64 == false);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNull(binarynode_i70);
        org.junit.Assert.assertTrue(b71 == true);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == false);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertNull(binaryNode81);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(binarynode_i85);
        org.junit.Assert.assertTrue(b86 == false);
        org.junit.Assert.assertNull(binarynode_i87);
        org.junit.Assert.assertTrue("'" + i89 + "' != '" + 100 + "'", i89.equals(100));
        org.junit.Assert.assertTrue(b90 == true);
        org.junit.Assert.assertTrue(b91 == true);
        org.junit.Assert.assertNotNull(list_binaryNode92);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test202");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("10");
        boolean b6 = palindromes0.evaluate("/23/[/#2021/");
        boolean b8 = palindromes0.evaluate("");
        boolean b10 = palindromes0.evaluate("-");
        boolean b12 = palindromes0.evaluate("[");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == true);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test203");
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian0 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i2 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d3 = avlTreeMedian0.find(binarynode_i2);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor4 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals5 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = sortedArrayToBST6.transform(i_array8);
        boolean b10 = binarynode_i9.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST11 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array13 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = sortedArrayToBST11.transform(i_array13);
        boolean b15 = binarynode_i14.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = binarynode_i14.getRight();
        boolean b17 = binaryTreeEquals5.areEqualsIterative(binarynode_i9, binarynode_i14);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode27 = lowestCommonAncestor4.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i14, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i21, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i14.getLeft();
        double d29 = avlTreeMedian0.find(binarynode_i14);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = binarynode_i33.getRight();
        java.lang.Integer i36 = binarynode_i33.getData();
        binarynode_i14.setLeft(binarynode_i33);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i33.getRight();
        boolean b39 = binarynode_i33.hasRight();
        org.junit.Assert.assertTrue(d3 == 10.0d);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(binarynode_i9);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(binarynode_i14);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertNull(binaryNode27);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(d29 == 100.0d);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNull(binarynode_i35);
        org.junit.Assert.assertTrue("'" + i36 + "' != '" + 100 + "'", i36.equals(100));
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test204");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode11);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements13 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode18 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        removeListDuplicatedElements13.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements21 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList22 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        java.lang.String str25 = listnode_mergeSortedArrays24.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList22.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        removeListDuplicatedElements21.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        java.lang.String str29 = listNode26.toString();
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertNotNull(listNode18);
        org.junit.Assert.assertNotNull(listNode26);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test205");
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros0 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        int[] i_array6 = new int[] { 107, 3628800 };
        int[][] i_array_array7 = new int[][] { i_array6 };
        int[] i_array8 = goThroughMatrixInSpiral1.go(i_array_array7);
        rewriteRowAndColumnsWithZeros0.rewrite(i_array_array7);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral10 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array11 = new int[][] {};
        int[] i_array12 = goThroughMatrixInSpiral10.go(i_array_array11);
        int[] i_array15 = new int[] { 107, 3628800 };
        int[][] i_array_array16 = new int[][] { i_array15 };
        int[] i_array17 = goThroughMatrixInSpiral10.go(i_array_array16);
        rewriteRowAndColumnsWithZeros0.rewrite(i_array_array16);
        com.github.pedrovgs.problem42.FloodFill floodFill19 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral20 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array21 = new int[][] {};
        int[] i_array22 = goThroughMatrixInSpiral20.go(i_array_array21);
        floodFill19.apply(i_array_array21, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros28 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral29 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array30 = new int[][] {};
        int[] i_array31 = goThroughMatrixInSpiral29.go(i_array_array30);
        int[] i_array34 = new int[] { 107, 3628800 };
        int[][] i_array_array35 = new int[][] { i_array34 };
        int[] i_array36 = goThroughMatrixInSpiral29.go(i_array_array35);
        rewriteRowAndColumnsWithZeros28.rewrite(i_array_array35);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral38 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array39 = new int[][] {};
        int[] i_array40 = goThroughMatrixInSpiral38.go(i_array_array39);
        int[] i_array43 = new int[] { 107, 3628800 };
        int[][] i_array_array44 = new int[][] { i_array43 };
        int[] i_array45 = goThroughMatrixInSpiral38.go(i_array_array44);
        rewriteRowAndColumnsWithZeros28.rewrite(i_array_array44);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral47 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array48 = new int[][] {};
        int[] i_array49 = goThroughMatrixInSpiral47.go(i_array_array48);
        rewriteRowAndColumnsWithZeros28.rewrite(i_array_array48);
        floodFill19.apply(i_array_array48, 51, 270, 7, (int) (byte) 10);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros56 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral57 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array58 = new int[][] {};
        int[] i_array59 = goThroughMatrixInSpiral57.go(i_array_array58);
        int[] i_array62 = new int[] { 107, 3628800 };
        int[][] i_array_array63 = new int[][] { i_array62 };
        int[] i_array64 = goThroughMatrixInSpiral57.go(i_array_array63);
        rewriteRowAndColumnsWithZeros56.rewrite(i_array_array63);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral66 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array67 = new int[][] {};
        int[] i_array68 = goThroughMatrixInSpiral66.go(i_array_array67);
        rewriteRowAndColumnsWithZeros56.rewrite(i_array_array67);
        floodFill19.apply(i_array_array67, 0, 0, (int) ' ', (-8));
        rewriteRowAndColumnsWithZeros0.rewrite(i_array_array67);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros76 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral77 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array78 = new int[][] {};
        int[] i_array79 = goThroughMatrixInSpiral77.go(i_array_array78);
        int[] i_array82 = new int[] { 107, 3628800 };
        int[][] i_array_array83 = new int[][] { i_array82 };
        int[] i_array84 = goThroughMatrixInSpiral77.go(i_array_array83);
        rewriteRowAndColumnsWithZeros76.rewrite(i_array_array83);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral86 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array87 = new int[][] {};
        int[] i_array88 = goThroughMatrixInSpiral86.go(i_array_array87);
        int[] i_array91 = new int[] { 107, 3628800 };
        int[][] i_array_array92 = new int[][] { i_array91 };
        int[] i_array93 = goThroughMatrixInSpiral86.go(i_array_array92);
        rewriteRowAndColumnsWithZeros76.rewrite(i_array_array92);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral95 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array96 = new int[][] {};
        int[] i_array97 = goThroughMatrixInSpiral95.go(i_array_array96);
        rewriteRowAndColumnsWithZeros76.rewrite(i_array_array96);
        rewriteRowAndColumnsWithZeros0.rewrite(i_array_array96);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(i_array_array7);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array_array21);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(i_array_array30);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array_array35);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array_array39);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array_array44);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array_array48);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(i_array_array58);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array_array63);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(i_array_array67);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(i_array_array78);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(i_array_array83);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(i_array_array87);
        org.junit.Assert.assertNotNull(i_array88);
        org.junit.Assert.assertNotNull(i_array91);
        org.junit.Assert.assertNotNull(i_array_array92);
        org.junit.Assert.assertNotNull(i_array93);
        org.junit.Assert.assertNotNull(i_array_array96);
        org.junit.Assert.assertNotNull(i_array97);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test206");
        com.github.pedrovgs.problem56.IsRotationUsingIsSubstring isRotationUsingIsSubstring0 = new com.github.pedrovgs.problem56.IsRotationUsingIsSubstring();
        boolean b3 = isRotationUsingIsSubstring0.check("", "[]");
        boolean b6 = isRotationUsingIsSubstring0.check("/hi!/", "hi!");
        boolean b9 = isRotationUsingIsSubstring0.check("]01 ,1-[", "/32/!ih/hi!/###01001/");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test207");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode12 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers19 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b20 = listnode_mergeSortedArrays18.equals((java.lang.Object) mergeBinaryNumbers19);
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i22 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays24.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = listnode_mergeSortedArrays24.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort28 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray29 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array32 = new int[] { (byte) 1, (byte) 10 };
        splitArray29.splitSwappingPartition(i_array32);
        selectionSort28.sort(i_array32);
        com.github.pedrovgs.problem8.SplitArray splitArray35 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array38 = new int[] { (byte) 1, (byte) 10 };
        splitArray35.splitSwappingPartition(i_array38);
        int[] i_array46 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray35.splitSwappingRecursive(i_array46);
        int[] i_array48 = mergeSortedArrays27.merge(i_array32, i_array46);
        listnode_mergeSortedArrays24.setData(mergeSortedArrays27);
        java.lang.String str50 = listnode_mergeSortedArrays24.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i51 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList52 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        java.lang.String str55 = listnode_mergeSortedArrays54.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i56 = reverseLinkedList52.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays57 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays58 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays57);
        java.lang.String str59 = listnode_mergeSortedArrays58.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays60 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays61 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays60);
        java.lang.String str62 = listnode_mergeSortedArrays61.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays61.setData(mergeSortedArrays63);
        listnode_mergeSortedArrays58.setNext(listnode_mergeSortedArrays61);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = listnode_mergeSortedArrays58.getNext();
        com.github.pedrovgs.problem62.PalindromeList palindromeList67 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList68 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays69 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays70 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays69);
        java.lang.String str71 = listnode_mergeSortedArrays70.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i72 = reverseLinkedList68.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays70);
        boolean b73 = palindromeList67.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays70);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays74 = listnode_mergeSortedArrays70.getNext();
        listnode_mergeSortedArrays66.setNext(listnode_mergeSortedArrays70);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i76 = reverseLinkedList52.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays66);
        com.github.pedrovgs.linkedlist.ListNode listNode77 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i76);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode79 = findKthElement0.find3(listNode77, 107);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(listnode_i22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays26);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(listnode_i51);
        org.junit.Assert.assertNotNull(listnode_i56);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays66);
        org.junit.Assert.assertNotNull(listnode_i72);
        org.junit.Assert.assertTrue(b73 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays74);
        org.junit.Assert.assertNotNull(listnode_i76);
        org.junit.Assert.assertNotNull(listNode77);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test208");
        com.github.pedrovgs.problem29.AreAnagrams areAnagrams0 = new com.github.pedrovgs.problem29.AreAnagrams();
        boolean b3 = areAnagrams0.check("3", "/!ih/hi!/");
        boolean b6 = areAnagrams0.check("1", "3");
        boolean b9 = areAnagrams0.check("79", "[");
        boolean b12 = areAnagrams0.check("[1, 1]", "");
        boolean b15 = areAnagrams0.check("/#301021/79/", "/10210#3/[-1]/");
        boolean b18 = areAnagrams0.check("][", "/BinaryNode{data=10}/10/]1-[/");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertTrue(b18 == false);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test209");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        vector_i4.setSize(10);
        com.github.pedrovgs.problem32.Contains contains15 = new com.github.pedrovgs.problem32.Contains();
        boolean b18 = contains15.evaluate("", "/");
        int i19 = vector_i4.indexOf((java.lang.Object) b18);
        vector_i4.clear();
        vector_i4.trimToSize();
        vector_i4.trimToSize();
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding23 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i26 = subtractAdding23.subtract((int) (short) 0, (int) '4');
        int i29 = subtractAdding23.subtract((int) (byte) 10, (-97));
        int i32 = subtractAdding23.subtract((int) (short) 0, 2);
        int i35 = subtractAdding23.subtract((int) (byte) 100, 107);
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding36 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i39 = subtractAdding36.subtract((int) '4', (int) (short) 1);
        int i42 = subtractAdding36.subtract(72, (-6));
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding43 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i46 = subtractAdding43.subtract((int) '4', (int) (short) 1);
        int i49 = subtractAdding43.subtract(0, (int) 'a');
        int i52 = subtractAdding43.subtract((-1), 51);
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding53 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i56 = subtractAdding53.subtract((int) '4', (int) (short) 1);
        int i59 = subtractAdding53.subtract(72, (-6));
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding60 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i63 = subtractAdding60.subtract((int) '4', (int) (short) 1);
        int i66 = subtractAdding60.subtract(0, (int) 'a');
        int i69 = subtractAdding60.subtract((-1), 51);
        int i72 = subtractAdding60.subtract(2, (-52000));
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding73 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i76 = subtractAdding73.subtract((int) '4', (int) (short) 1);
        com.github.pedrovgs.problem73.SubtractAdding[] subtractAdding_array77 = new com.github.pedrovgs.problem73.SubtractAdding[] { subtractAdding23, subtractAdding36, subtractAdding43, subtractAdding53, subtractAdding60, subtractAdding73 };
        com.github.pedrovgs.problem73.SubtractAdding[] subtractAdding_array78 = vector_i4.toArray(subtractAdding_array77);
        try {
            java.util.ListIterator<java.lang.Integer> listiterator_i80 = vector_i4.listIterator(56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertTrue(i19 == (-1));
        org.junit.Assert.assertTrue(i26 == (-52));
        org.junit.Assert.assertTrue(i29 == 107);
        org.junit.Assert.assertTrue(i32 == (-2));
        org.junit.Assert.assertTrue(i35 == (-7));
        org.junit.Assert.assertTrue(i39 == 51);
        org.junit.Assert.assertTrue(i42 == 78);
        org.junit.Assert.assertTrue(i46 == 51);
        org.junit.Assert.assertTrue(i49 == (-97));
        org.junit.Assert.assertTrue(i52 == (-52));
        org.junit.Assert.assertTrue(i56 == 51);
        org.junit.Assert.assertTrue(i59 == 78);
        org.junit.Assert.assertTrue(i63 == 51);
        org.junit.Assert.assertTrue(i66 == (-97));
        org.junit.Assert.assertTrue(i69 == (-52));
        org.junit.Assert.assertTrue(i72 == 52002);
        org.junit.Assert.assertTrue(i76 == 51);
        org.junit.Assert.assertNotNull(subtractAdding_array77);
        org.junit.Assert.assertNotNull(subtractAdding_array78);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test210");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        com.github.pedrovgs.problem18.IsBST isBST8 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization9 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = binarynode_i13.hasRight();
        java.lang.Integer i15 = binarynode_i13.getData();
        java.lang.String str16 = binaryTreeSerialization9.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        boolean b17 = isBST8.checkIterative(binarynode_i13);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode18 = binaryTreeByLevel0.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode19 = null;
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode20 = binaryTreeByLevel0.getUsingQueue(binaryNode19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertTrue("'" + i15 + "' != '" + 100 + "'", i15.equals(100));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "100##" + "'", str16.equals("100##"));
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNotNull(list_binaryNode18);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test211");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        vector_i4.removeElementAt((int) (short) 0);
        try {
            java.util.ListIterator<java.lang.Integer> listiterator_i15 = vector_i4.listIterator((-82));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test212");
        com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber reverseOrderOfBinaryNumber0 = new com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber();
        int i2 = reverseOrderOfBinaryNumber0.reverse(10);
        int i4 = reverseOrderOfBinaryNumber0.reverse(11427);
        int i6 = reverseOrderOfBinaryNumber0.reverse(49);
        int i8 = reverseOrderOfBinaryNumber0.reverse(0);
        int i10 = reverseOrderOfBinaryNumber0.reverse(72);
        org.junit.Assert.assertTrue(i2 == 5);
        org.junit.Assert.assertTrue(i4 == 12621);
        org.junit.Assert.assertTrue(i6 == 35);
        org.junit.Assert.assertTrue(i8 == 0);
        org.junit.Assert.assertTrue(i10 == 9);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test213");
        com.github.pedrovgs.problem47.ReturnChange returnChange0 = new com.github.pedrovgs.problem47.ReturnChange();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem42.FloodFill floodFill2 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral3 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array4 = new int[][] {};
        int[] i_array5 = goThroughMatrixInSpiral3.go(i_array_array4);
        floodFill2.apply(i_array_array4, (-52), 2, (int) '#', 51);
        int[] i_array11 = goThroughMatrixInSpiral1.go(i_array_array4);
        com.github.pedrovgs.problem42.FloodFill floodFill12 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral13 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array14 = new int[][] {};
        int[] i_array15 = goThroughMatrixInSpiral13.go(i_array_array14);
        int[] i_array22 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array29 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array30 = new int[][] { i_array22, i_array29 };
        int[] i_array31 = goThroughMatrixInSpiral13.go(i_array_array30);
        floodFill12.apply(i_array_array30, (int) (byte) 1, (int) (byte) 0, (int) ' ', (-5200));
        int[] i_array37 = goThroughMatrixInSpiral1.go(i_array_array30);
        java.util.List<java.lang.Integer> list_i39 = returnChange0.calculate(i_array37, 60);
        org.junit.Assert.assertNotNull(i_array_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(i_array_array14);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array_array30);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(list_i39);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test214");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersCheating("]01 ,1-[", "29");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test215");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("1241513983", "/[-1, 10]/7/25-/23/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test216");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder8 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        java.lang.String str13 = binarynode_i12.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_14 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_14.push((int) (byte) 10);
        int i17 = stack1_14.getMin();
        boolean b18 = binarynode_i12.equals((java.lang.Object) stack1_14);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode19 = binaryTreePostOrder8.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode20 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12);
        com.github.pedrovgs.problem18.IsBST isBST21 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST22 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array24 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = sortedArrayToBST22.transform(i_array24);
        boolean b26 = isBST21.checkRecursive(binarynode_i25);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals27 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST28 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array30 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = sortedArrayToBST28.transform(i_array30);
        boolean b32 = binarynode_i31.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        boolean b39 = binaryTreeEquals27.areEqualsIterative(binarynode_i31, binarynode_i36);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = binarynode_i31.getLeft();
        boolean b41 = isBST21.checkIterative(binarynode_i31);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian42 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d45 = avlTreeMedian42.find(binarynode_i44);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor46 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals47 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST48 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = sortedArrayToBST48.transform(i_array50);
        boolean b52 = binarynode_i51.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST53 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array55 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = sortedArrayToBST53.transform(i_array55);
        boolean b57 = binarynode_i56.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = binarynode_i56.getRight();
        boolean b59 = binaryTreeEquals47.areEqualsIterative(binarynode_i51, binarynode_i56);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST60 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST60.transform(i_array62);
        boolean b64 = binarynode_i63.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST65 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = sortedArrayToBST65.transform(i_array67);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode69 = lowestCommonAncestor46.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i56, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i63, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i68);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = binarynode_i56.getLeft();
        double d71 = avlTreeMedian42.find(binarynode_i56);
        boolean b72 = isBST21.checkRecursive(binarynode_i56);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor73 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals74 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST75 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array77 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = sortedArrayToBST75.transform(i_array77);
        boolean b79 = binarynode_i78.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST80 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array82 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i83 = sortedArrayToBST80.transform(i_array82);
        boolean b84 = binarynode_i83.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = binarynode_i83.getRight();
        boolean b86 = binaryTreeEquals74.areEqualsIterative(binarynode_i78, binarynode_i83);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST87 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array89 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i90 = sortedArrayToBST87.transform(i_array89);
        boolean b91 = binarynode_i90.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST92 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array94 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i95 = sortedArrayToBST92.transform(i_array94);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode96 = lowestCommonAncestor73.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i83, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i90, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i95);
        boolean b97 = isBST21.checkIterative(binarynode_i83);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode98 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i83);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "BinaryNode{data=100}" + "'", str13.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i17 == 10);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(list_binaryNode19);
        org.junit.Assert.assertNotNull(list_binaryNode20);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(binarynode_i25);
        org.junit.Assert.assertTrue(b26 == true);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(binarynode_i31);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == true);
        org.junit.Assert.assertNull(binarynode_i40);
        org.junit.Assert.assertTrue(b41 == true);
        org.junit.Assert.assertTrue(d45 == 10.0d);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(binarynode_i51);
        org.junit.Assert.assertTrue(b52 == false);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(binarynode_i56);
        org.junit.Assert.assertTrue(b57 == false);
        org.junit.Assert.assertNull(binarynode_i58);
        org.junit.Assert.assertTrue(b59 == true);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue(b64 == false);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(binarynode_i68);
        org.junit.Assert.assertNull(binaryNode69);
        org.junit.Assert.assertNull(binarynode_i70);
        org.junit.Assert.assertTrue(d71 == 100.0d);
        org.junit.Assert.assertTrue(b72 == true);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertNotNull(binarynode_i78);
        org.junit.Assert.assertTrue(b79 == false);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(binarynode_i83);
        org.junit.Assert.assertTrue(b84 == false);
        org.junit.Assert.assertNull(binarynode_i85);
        org.junit.Assert.assertTrue(b86 == true);
        org.junit.Assert.assertNotNull(i_array89);
        org.junit.Assert.assertNotNull(binarynode_i90);
        org.junit.Assert.assertTrue(b91 == false);
        org.junit.Assert.assertNotNull(i_array94);
        org.junit.Assert.assertNotNull(binarynode_i95);
        org.junit.Assert.assertNull(binaryNode96);
        org.junit.Assert.assertTrue(b97 == true);
        org.junit.Assert.assertNotNull(list_binaryNode98);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test217");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.linkedlist.ListNode listNode1 = null;
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode3 = findKthElement0.find(listNode1, 60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test218");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compress("/!ih/");
        java.lang.String str14 = compressString0.compressAlternativeApproach("[null]");
        java.lang.String str16 = compressString0.compressRecursive("1241513983");
        java.lang.String str18 = compressString0.compressRecursive("/[nul2]/]1-[/BinaryNode{data=10}/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[nul2]" + "'", str14.equals("[nul2]"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "1241513983" + "'", str16.equals("1241513983"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "/[nul2]/]1-[/BinaryNode{data=10}/" + "'", str18.equals("/[nul2]/]1-[/BinaryNode{data=10}/"));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test219");
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates0 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        java.lang.Integer[] i_array5 = removeDuplicates0.removeUsingSorting(i_array3);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = sortedArrayToBST6.transform(i_array8);
        java.lang.Integer[] i_array10 = removeDuplicates0.removeUsingSorting(i_array8);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates11 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        java.lang.Integer[] i_array16 = removeDuplicates11.removeUsingSorting(i_array14);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates17 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        java.lang.Integer[] i_array22 = removeDuplicates17.removeUsingSorting(i_array20);
        java.lang.Integer[] i_array23 = removeDuplicates11.removeUsingSorting(i_array20);
        java.lang.Integer[] i_array24 = removeDuplicates0.removeUsingSorting(i_array20);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates25 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates26 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        java.lang.Integer[] i_array31 = removeDuplicates26.removeUsingSorting(i_array29);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        java.lang.Integer[] i_array36 = removeDuplicates26.removeUsingSorting(i_array34);
        java.lang.Integer[] i_array37 = removeDuplicates25.removeUsingSorting(i_array34);
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 2, (-14040), (-14040), 27 };
        java.lang.Integer[] i_array43 = removeDuplicates25.removeUsingSet(i_array42);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates44 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates45 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST46 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST46.transform(i_array48);
        java.lang.Integer[] i_array50 = removeDuplicates45.removeUsingSorting(i_array48);
        java.lang.Integer[] i_array51 = removeDuplicates44.removeUsingSorting(i_array50);
        java.lang.Integer[] i_array52 = removeDuplicates25.removeUsingSet(i_array51);
        java.lang.Integer[] i_array53 = removeDuplicates0.removeUsingSorting(i_array51);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates54 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates55 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        java.lang.Integer[] i_array60 = removeDuplicates55.removeUsingSorting(i_array58);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST61 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = sortedArrayToBST61.transform(i_array63);
        java.lang.Integer[] i_array65 = removeDuplicates55.removeUsingSorting(i_array63);
        java.lang.Integer[] i_array66 = removeDuplicates54.removeUsingSorting(i_array63);
        java.lang.Integer[] i_array71 = new java.lang.Integer[] { 2, (-14040), (-14040), 27 };
        java.lang.Integer[] i_array72 = removeDuplicates54.removeUsingSet(i_array71);
        java.lang.Integer[] i_array73 = removeDuplicates0.removeUsingSorting(i_array71);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(binarynode_i9);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(binarynode_i64);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(i_array73);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test220");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST5.transform(i_array10);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates12 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates13 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        java.lang.Integer[] i_array18 = removeDuplicates13.removeUsingSorting(i_array16);
        java.lang.Integer[] i_array19 = removeDuplicates12.removeUsingSorting(i_array18);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = sortedArrayToBST5.transform(i_array18);
        java.lang.Integer[] i_array21 = null;
        try {
            com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST5.transform(i_array21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(binarynode_i20);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test221");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor1 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem18.IsBST isBST2 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = isBST2.checkRecursive(binarynode_i6);
        boolean b8 = binarynode_i6.hasRight();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder9 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian10 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d13 = avlTreeMedian10.find(binarynode_i12);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode14 = binaryTreePreOrder9.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12);
        com.github.pedrovgs.problem18.IsBST isBST15 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array18 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = sortedArrayToBST16.transform(i_array18);
        boolean b20 = isBST15.checkRecursive(binarynode_i19);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode21 = binaryTreePreOrder9.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i19);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = binarynode_i19.getLeft();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder23 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian24 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d27 = avlTreeMedian24.find(binarynode_i26);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor28 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals29 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        boolean b39 = binarynode_i38.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = binarynode_i38.getRight();
        boolean b41 = binaryTreeEquals29.areEqualsIterative(binarynode_i33, binarynode_i38);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        boolean b46 = binarynode_i45.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode51 = lowestCommonAncestor28.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i50);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = binarynode_i38.getLeft();
        double d53 = avlTreeMedian24.find(binarynode_i38);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST54 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array56 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = sortedArrayToBST54.transform(i_array56);
        boolean b58 = binarynode_i57.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = binarynode_i57.getRight();
        java.lang.Integer i60 = binarynode_i57.getData();
        binarynode_i38.setLeft(binarynode_i57);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i62 = binaryTreeInOrder23.getIterative(binarynode_i57);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode63 = lowestCommonAncestor1.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i6, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i19, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i57);
        try {
            java.lang.Integer i65 = findMinNumberAtPosition0.find(binarynode_i57, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(d13 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode14);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(list_binaryNode21);
        org.junit.Assert.assertNull(binarynode_i22);
        org.junit.Assert.assertTrue(d27 == 10.0d);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNull(binarynode_i40);
        org.junit.Assert.assertTrue(b41 == true);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertNull(binaryNode51);
        org.junit.Assert.assertNull(binarynode_i52);
        org.junit.Assert.assertTrue(d53 == 100.0d);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(binarynode_i57);
        org.junit.Assert.assertTrue(b58 == false);
        org.junit.Assert.assertNull(binarynode_i59);
        org.junit.Assert.assertTrue("'" + i60 + "' != '" + 100 + "'", i60.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i62);
        org.junit.Assert.assertNull(binaryNode63);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test222");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (short) -1, (int) 'a');
        float f9 = divideUsingSubtraction0.divideIterative((int) 'a', 27);
        float f12 = divideUsingSubtraction0.divideRecursive((int) (short) -1, 18);
        float f15 = divideUsingSubtraction0.divideIterative(100, (-13631485));
        float f18 = divideUsingSubtraction0.divideIterative((-13631485), 1484783616);
        float f21 = divideUsingSubtraction0.divideIterative(0, (-13631485));
        float f24 = divideUsingSubtraction0.divideRecursive((int) '#', 112197661);
        float f27 = divideUsingSubtraction0.divideIterative((int) (byte) 1, 78);
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == (-0.010309278f));
        org.junit.Assert.assertTrue(f9 == 3.5925927f);
        org.junit.Assert.assertTrue(f12 == (-0.055555556f));
        org.junit.Assert.assertTrue(f15 == 315.07697f);
        org.junit.Assert.assertTrue(f18 == (-0.009180789f));
        org.junit.Assert.assertTrue(f21 == 315.077f);
        org.junit.Assert.assertTrue(f24 == 3.1194946E-7f);
        org.junit.Assert.assertTrue(f27 == 0.012820513f);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test223");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = null;
        binarynode_i8.setRight(binarynode_i9);
        boolean b11 = listnode_mergeSortedArrays4.equals((java.lang.Object) binarynode_i9);
        com.github.pedrovgs.linkedlist.ListNode listNode12 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        com.github.pedrovgs.problem62.PalindromeList palindromeList13 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i18 = reverseLinkedList14.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        boolean b19 = palindromeList13.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays20 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays21 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays20);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = listnode_mergeSortedArrays21.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays21.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = null;
        binarynode_i25.setRight(binarynode_i26);
        boolean b28 = listnode_mergeSortedArrays21.equals((java.lang.Object) binarynode_i26);
        listnode_mergeSortedArrays16.setNext(listnode_mergeSortedArrays21);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = listnode_mergeSortedArrays21.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements31 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = listnode_mergeSortedArrays34.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = listnode_mergeSortedArrays34.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = null;
        binarynode_i38.setRight(binarynode_i39);
        boolean b41 = listnode_mergeSortedArrays34.equals((java.lang.Object) binarynode_i39);
        com.github.pedrovgs.linkedlist.ListNode listNode42 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        removeListDuplicatedElements31.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode42);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements31);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList45 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements46 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList47 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        java.lang.String str50 = listnode_mergeSortedArrays49.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode51 = reverseLinkedList47.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays49);
        removeListDuplicatedElements46.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode51);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i53 = getTheElementInTheMiddleOfTheList45.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode51);
        removeListDuplicatedElements31.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode51);
        listnode_mergeSortedArrays21.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode51);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i56 = reverseLinkedList2.reverseRecursive(listNode51);
        boolean b57 = palindromeList1.checkReversing(listNode51);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i59 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode51, 6154);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(listNode12);
        org.junit.Assert.assertNotNull(listnode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertTrue(b28 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays30);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays35);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays36);
        org.junit.Assert.assertTrue(b41 == false);
        org.junit.Assert.assertNotNull(listNode42);
        org.junit.Assert.assertNotNull(listNode51);
        org.junit.Assert.assertNotNull(listnode_i53);
        org.junit.Assert.assertNotNull(listnode_i56);
        org.junit.Assert.assertTrue(b57 == true);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test224");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) (byte) 1);
        int i8 = bitsCounter0.countBitsToOneBasedOnString(101);
        int i10 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(32);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(245366856);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 4);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == 7);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test225");
        com.github.pedrovgs.problem74.BubbleSort bubbleSort0 = new com.github.pedrovgs.problem74.BubbleSort();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        int[] i_array10 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array17 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array18 = new int[][] { i_array10, i_array17 };
        int[] i_array19 = goThroughMatrixInSpiral1.go(i_array_array18);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral20 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array21 = new int[][] {};
        int[] i_array22 = goThroughMatrixInSpiral20.go(i_array_array21);
        int[] i_array29 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array36 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array37 = new int[][] { i_array29, i_array36 };
        int[] i_array38 = goThroughMatrixInSpiral20.go(i_array_array37);
        int[] i_array39 = goThroughMatrixInSpiral1.go(i_array_array37);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros40 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral41 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array42 = new int[][] {};
        int[] i_array43 = goThroughMatrixInSpiral41.go(i_array_array42);
        int[] i_array46 = new int[] { 107, 3628800 };
        int[][] i_array_array47 = new int[][] { i_array46 };
        int[] i_array48 = goThroughMatrixInSpiral41.go(i_array_array47);
        rewriteRowAndColumnsWithZeros40.rewrite(i_array_array47);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral50 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array51 = new int[][] {};
        int[] i_array52 = goThroughMatrixInSpiral50.go(i_array_array51);
        int[] i_array55 = new int[] { 107, 3628800 };
        int[][] i_array_array56 = new int[][] { i_array55 };
        int[] i_array57 = goThroughMatrixInSpiral50.go(i_array_array56);
        rewriteRowAndColumnsWithZeros40.rewrite(i_array_array56);
        int[] i_array59 = goThroughMatrixInSpiral1.go(i_array_array56);
        bubbleSort0.sort(i_array59);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array_array18);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array_array21);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array_array37);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array_array42);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(i_array_array47);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(i_array_array51);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(i_array_array56);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array59);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test226");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Integer i3 = stack2_0.peek();
        java.lang.Integer i4 = stack2_0.pop();
        stack2_0.push(100);
        int i7 = stack2_0.getMin();
        com.github.pedrovgs.problem11.IntToString intToString8 = new com.github.pedrovgs.problem11.IntToString();
        java.lang.String str10 = intToString8.transform(3);
        java.lang.String str12 = intToString8.transform((int) (byte) 10);
        boolean b13 = stack2_0.contains((java.lang.Object) str12);
        java.lang.Integer i14 = stack2_0.peek();
        org.junit.Assert.assertTrue("'" + i3 + "' != '" + (-1) + "'", i3.equals((-1)));
        org.junit.Assert.assertTrue("'" + i4 + "' != '" + (-1) + "'", i4.equals((-1)));
        org.junit.Assert.assertTrue(i7 == 100);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "3" + "'", str10.equals("3"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "10" + "'", str12.equals("10"));
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertTrue("'" + i14 + "' != '" + 100 + "'", i14.equals(100));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test227");
        com.github.pedrovgs.problem37.PathCalculator pathCalculator0 = new com.github.pedrovgs.problem37.PathCalculator();
        java.lang.String str4 = pathCalculator0.calculate("/", "97", "10010###");
        java.lang.String str8 = pathCalculator0.calculate("32", "/!ih/hi!/", "###01001");
        java.lang.String str12 = pathCalculator0.calculate("[0, 1, 1, -1]", "[0, 1, 1]", "[3]");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/97/10010###/" + "'", str4.equals("/97/10010###/"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/32/!ih/hi!/###01001/" + "'", str8.equals("/32/!ih/hi!/###01001/"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/[0, 1, 1, -1]/[0, 1, 1]/[3]/" + "'", str12.equals("/[0, 1, 1, -1]/[0, 1, 1]/[3]/"));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test228");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        java.lang.Integer i8 = stack_i2.push((java.lang.Integer) 10);
        java.lang.Object[] obj_array9 = stack_i2.toArray();
        java.util.function.UnaryOperator<java.lang.Integer> unaryoperator_i10 = null;
        try {
            stack_i2.replaceAll(unaryoperator_i10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertTrue("'" + i8 + "' != '" + 10 + "'", i8.equals(10));
        org.junit.Assert.assertNotNull(obj_array9);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test229");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        boolean b9 = vector_i4.add((java.lang.Integer) 10);
        boolean b10 = vector_i4.isEmpty();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b10 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test230");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization1 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        java.lang.Integer i7 = binarynode_i5.getData();
        java.lang.String str8 = binaryTreeSerialization1.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        boolean b9 = isBST0.checkIterative(binarynode_i5);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder10 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian11 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d14 = avlTreeMedian11.find(binarynode_i13);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode15 = binaryTreePreOrder10.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        com.github.pedrovgs.problem18.IsBST isBST16 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST17 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array19 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = sortedArrayToBST17.transform(i_array19);
        boolean b21 = isBST16.checkRecursive(binarynode_i20);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode22 = binaryTreePreOrder10.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i20);
        boolean b23 = isBST0.checkRecursive(binarynode_i20);
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel24 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder25 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder26 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian27 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d30 = avlTreeMedian27.find(binarynode_i29);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor31 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals32 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = binarynode_i41.getRight();
        boolean b44 = binaryTreeEquals32.areEqualsIterative(binarynode_i36, binarynode_i41);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST45 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array47 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = sortedArrayToBST45.transform(i_array47);
        boolean b49 = binarynode_i48.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST50 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array52 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = sortedArrayToBST50.transform(i_array52);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode54 = lowestCommonAncestor31.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i41, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i48, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i53);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = binarynode_i41.getLeft();
        double d56 = avlTreeMedian27.find(binarynode_i41);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        boolean b61 = binarynode_i60.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i62 = binarynode_i60.getRight();
        java.lang.Integer i63 = binarynode_i60.getData();
        binarynode_i41.setLeft(binarynode_i60);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i65 = binaryTreeInOrder26.getIterative(binarynode_i60);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode66 = binaryTreePostOrder25.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i60);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode67 = treeToListByLevel24.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i60);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST68 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array70 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i71 = sortedArrayToBST68.transform(i_array70);
        boolean b72 = binarynode_i71.hasRight();
        java.lang.Integer i73 = binarynode_i71.getData();
        boolean b74 = binarynode_i71.hasRight();
        boolean b75 = binarynode_i71.hasRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode76 = treeToListByLevel24.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i71);
        boolean b77 = isBST0.checkIterative(binarynode_i71);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "100##" + "'", str8.equals("100##"));
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(d14 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode15);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNotNull(list_binaryNode22);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertTrue(d30 == 10.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == true);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(binarynode_i48);
        org.junit.Assert.assertTrue(b49 == false);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(binarynode_i53);
        org.junit.Assert.assertNull(binaryNode54);
        org.junit.Assert.assertNull(binarynode_i55);
        org.junit.Assert.assertTrue(d56 == 100.0d);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNull(binarynode_i62);
        org.junit.Assert.assertTrue("'" + i63 + "' != '" + 100 + "'", i63.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i65);
        org.junit.Assert.assertNotNull(list_binaryNode66);
        org.junit.Assert.assertNotNull(list_binaryNode67);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(binarynode_i71);
        org.junit.Assert.assertTrue(b72 == false);
        org.junit.Assert.assertTrue("'" + i73 + "' != '" + 100 + "'", i73.equals(100));
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertTrue(b75 == false);
        org.junit.Assert.assertNotNull(list_binaryNode76);
        org.junit.Assert.assertTrue(b77 == true);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test231");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced10 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        int i11 = vector_i5.lastIndexOf((java.lang.Object) isTreeBalanced10);
        try {
            vector_i5.insertElementAt((java.lang.Integer) 0, (-52));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertTrue(i11 == (-1));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test232");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("1", "97");
        boolean b6 = simpleRegularExpression0.evaluate("[", "[]");
        boolean b9 = simpleRegularExpression0.evaluate("/23/[/##001/", "0");
        boolean b12 = simpleRegularExpression0.evaluate("/[-1]/]1-[/]1- ,1 ,1 ,0[/01/", "/10210#3/[-1]/");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test233");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays4.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = null;
        binarynode_i8.setRight(binarynode_i9);
        boolean b11 = listnode_mergeSortedArrays4.equals((java.lang.Object) binarynode_i9);
        com.github.pedrovgs.linkedlist.ListNode listNode12 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode12);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements14 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode19 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        removeListDuplicatedElements14.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = listnode_mergeSortedArrays32.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = listnode_mergeSortedArrays32.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = null;
        binarynode_i36.setRight(binarynode_i37);
        boolean b39 = listnode_mergeSortedArrays32.equals((java.lang.Object) binarynode_i37);
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.problem62.PalindromeList palindromeList41 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        java.lang.String str45 = listnode_mergeSortedArrays44.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = reverseLinkedList42.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        boolean b47 = palindromeList41.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = null;
        binarynode_i53.setRight(binarynode_i54);
        boolean b56 = listnode_mergeSortedArrays49.equals((java.lang.Object) binarynode_i54);
        listnode_mergeSortedArrays44.setNext(listnode_mergeSortedArrays49);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays58 = listnode_mergeSortedArrays49.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements59 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList60 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays61 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays62 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays61);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays63 = listnode_mergeSortedArrays62.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = listnode_mergeSortedArrays62.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = null;
        binarynode_i66.setRight(binarynode_i67);
        boolean b69 = listnode_mergeSortedArrays62.equals((java.lang.Object) binarynode_i67);
        com.github.pedrovgs.linkedlist.ListNode listNode70 = reverseLinkedList60.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays62);
        removeListDuplicatedElements59.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode70);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements72 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements59);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList73 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements74 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList75 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays76 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays77 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays76);
        java.lang.String str78 = listnode_mergeSortedArrays77.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode79 = reverseLinkedList75.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays77);
        removeListDuplicatedElements74.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i81 = getTheElementInTheMiddleOfTheList73.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        removeListDuplicatedElements59.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        listnode_mergeSortedArrays49.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i84 = reverseLinkedList30.reverseRecursive(listNode79);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i87 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79, 2147483620);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(listNode12);
        org.junit.Assert.assertNotNull(listNode19);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays33);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays34);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertNotNull(listnode_i46);
        org.junit.Assert.assertTrue(b47 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays50);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays51);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays58);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays63);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays64);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNotNull(listNode70);
        org.junit.Assert.assertNotNull(listNode79);
        org.junit.Assert.assertNotNull(listnode_i81);
        org.junit.Assert.assertNotNull(listnode_i84);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test234");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        java.lang.Integer i11 = vector_i5.get((int) (short) 1);
        java.lang.Integer i12 = vector_i5.firstElement();
        java.util.Enumeration<java.lang.Integer> enumeration_i13 = vector_i5.elements();
        vector_i5.removeAllElements();
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertTrue("'" + i11 + "' != '" + (-1) + "'", i11.equals((-1)));
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 1 + "'", i12.equals(1));
        org.junit.Assert.assertNotNull(enumeration_i13);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test235");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("/BinaryNode{data=10}/10/]1-[/", "&0///0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test236");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.ensureCapacity((int) (short) 100);
        int i3 = stack2_0.getMin();
        java.util.ListIterator<java.lang.Integer> listiterator_i4 = stack2_0.listIterator();
        stack2_0.push((int) (byte) 1);
        int i7 = stack2_0.getMin();
        int i8 = stack2_0.getMin();
        org.junit.Assert.assertTrue(i3 == 2147483647);
        org.junit.Assert.assertNotNull(listiterator_i4);
        org.junit.Assert.assertTrue(i7 == 1);
        org.junit.Assert.assertTrue(i8 == 1);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test237");
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral0 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros1 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array7 = new int[] { 107, 3628800 };
        int[][] i_array_array8 = new int[][] { i_array7 };
        int[] i_array9 = goThroughMatrixInSpiral2.go(i_array_array8);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array8);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral11 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array12 = new int[][] {};
        int[] i_array13 = goThroughMatrixInSpiral11.go(i_array_array12);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array12);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral15 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array16 = new int[][] {};
        int[] i_array17 = goThroughMatrixInSpiral15.go(i_array_array16);
        int[] i_array24 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array31 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array32 = new int[][] { i_array24, i_array31 };
        int[] i_array33 = goThroughMatrixInSpiral15.go(i_array_array32);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array32);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros35 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral36 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array37 = new int[][] {};
        int[] i_array38 = goThroughMatrixInSpiral36.go(i_array_array37);
        int[] i_array41 = new int[] { 107, 3628800 };
        int[][] i_array_array42 = new int[][] { i_array41 };
        int[] i_array43 = goThroughMatrixInSpiral36.go(i_array_array42);
        rewriteRowAndColumnsWithZeros35.rewrite(i_array_array42);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral45 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array46 = new int[][] {};
        int[] i_array47 = goThroughMatrixInSpiral45.go(i_array_array46);
        int[] i_array50 = new int[] { 107, 3628800 };
        int[][] i_array_array51 = new int[][] { i_array50 };
        int[] i_array52 = goThroughMatrixInSpiral45.go(i_array_array51);
        rewriteRowAndColumnsWithZeros35.rewrite(i_array_array51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral54 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array55 = new int[][] {};
        int[] i_array56 = goThroughMatrixInSpiral54.go(i_array_array55);
        rewriteRowAndColumnsWithZeros35.rewrite(i_array_array55);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array55);
        int[] i_array62 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array66 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array70 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array74 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array78 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array82 = new int[] { 6, (byte) 10, 1484783616 };
        int[][] i_array_array83 = new int[][] { i_array62, i_array66, i_array70, i_array74, i_array78, i_array82 };
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array83);
        int[] i_array85 = goThroughMatrixInSpiral0.go(i_array_array83);
        com.github.pedrovgs.problem2.Vector vector86 = new com.github.pedrovgs.problem2.Vector(i_array85);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array_array32);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(i_array_array37);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array_array42);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array_array46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array_array51);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array_array55);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(i_array_array83);
        org.junit.Assert.assertNotNull(i_array85);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test238");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_0.push((int) (byte) 10);
        stack1_0.push((-5200));
        stack1_0.push(3);
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i11 = new java.util.Vector<java.lang.Integer>();
        boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i11, i_array10);
        boolean b14 = vector_i11.remove((java.lang.Object) (short) -1);
        int i16 = vector_i11.indexOf((java.lang.Object) 1);
        int i18 = vector_i11.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj19 = vector_i11.clone();
        java.lang.Object obj20 = null;
        int i21 = vector_i11.lastIndexOf(obj20);
        try {
            int i23 = stack1_0.lastIndexOf((java.lang.Object) vector_i11, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertTrue(i16 == 1);
        org.junit.Assert.assertTrue(i18 == (-1));
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue(i21 == (-1));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test239");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList8 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements9 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = listnode_mergeSortedArrays12.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = listnode_mergeSortedArrays12.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = null;
        binarynode_i16.setRight(binarynode_i17);
        boolean b19 = listnode_mergeSortedArrays12.equals((java.lang.Object) binarynode_i17);
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        removeListDuplicatedElements9.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        removeListDuplicatedElements9.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i30 = getTheElementInTheMiddleOfTheList8.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements31 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        removeListDuplicatedElements31.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i38 = getTheElementInTheMiddleOfTheList8.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i41 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36, (-80));
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays13);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays14);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNotNull(listnode_i30);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertNotNull(listnode_i38);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test240");
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced0 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor1 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals2 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = binarynode_i6.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = binarynode_i11.getRight();
        boolean b14 = binaryTreeEquals2.areEqualsIterative(binarynode_i6, binarynode_i11);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode24 = lowestCommonAncestor1.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i11, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        boolean b29 = binarynode_i28.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i28.getRight();
        binarynode_i18.setRight(binarynode_i28);
        java.lang.Integer i32 = binarynode_i18.getData();
        boolean b33 = isTreeBalanced0.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor34 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals35 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST36 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array38 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = sortedArrayToBST36.transform(i_array38);
        boolean b40 = binarynode_i39.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        boolean b45 = binarynode_i44.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = binarynode_i44.getRight();
        boolean b47 = binaryTreeEquals35.areEqualsIterative(binarynode_i39, binarynode_i44);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST48 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = sortedArrayToBST48.transform(i_array50);
        boolean b52 = binarynode_i51.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST53 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array55 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = sortedArrayToBST53.transform(i_array55);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode57 = lowestCommonAncestor34.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i44, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i56);
        boolean b58 = binarynode_i51.hasRight();
        boolean b59 = isTreeBalanced0.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertNull(binaryNode24);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100 + "'", i32.equals(100));
        org.junit.Assert.assertTrue(b33 == true);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(binarynode_i39);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == false);
        org.junit.Assert.assertNull(binarynode_i46);
        org.junit.Assert.assertTrue(b47 == true);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(binarynode_i51);
        org.junit.Assert.assertTrue(b52 == false);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(binarynode_i56);
        org.junit.Assert.assertNull(binaryNode57);
        org.junit.Assert.assertTrue(b58 == false);
        org.junit.Assert.assertTrue(b59 == true);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test241");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive(270);
        try {
            int i6 = factorial0.getIterative((-82));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 0);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test242");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) (byte) 10);
        int i6 = bitsCounter0.countBitsToOneBasedOnString((int) (byte) -1);
        int i8 = bitsCounter0.countBitsToOneBasedOnString(0);
        int i10 = bitsCounter0.countBitsToOneBasedOnString(6);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(4);
        int i14 = bitsCounter0.countBitsToOneBasedOnString(720);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 2);
        org.junit.Assert.assertTrue(i6 == 32);
        org.junit.Assert.assertTrue(i8 == 0);
        org.junit.Assert.assertTrue(i10 == 2);
        org.junit.Assert.assertTrue(i12 == 1);
        org.junit.Assert.assertTrue(i14 == 4);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test243");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder1 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode6 = binaryTreePreOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i4);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i7 = binaryTreeInOrder0.getIterative(binarynode_i4);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder8 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel9 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel10 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode17 = binaryTreeByLevel10.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode18 = binaryTreeByLevel9.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i19 = binaryTreeInOrder8.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i22 = new java.util.Stack<java.lang.Integer>();
        boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i22, i_array21);
        boolean b24 = stack_i22.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i26 = stack_i22.search((java.lang.Object) sortedArrayToBST25);
        java.lang.Integer[] i_array30 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = sortedArrayToBST25.transform(i_array30);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i32 = binaryTreeInOrder8.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i31);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i33 = binaryTreeInOrder0.getIterative(binarynode_i31);
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode6);
        org.junit.Assert.assertNotNull(list_binarynode_i7);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(list_binaryNode17);
        org.junit.Assert.assertNotNull(list_binaryNode18);
        org.junit.Assert.assertNotNull(list_binarynode_i19);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertTrue(i26 == (-1));
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(binarynode_i31);
        org.junit.Assert.assertNotNull(list_binarynode_i32);
        org.junit.Assert.assertNotNull(list_binarynode_i33);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test244");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel1 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel2 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = isBST3.checkRecursive(binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreeByLevel2.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode10 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i11 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        com.github.pedrovgs.problem18.IsBST isBST12 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = isBST12.checkRecursive(binarynode_i16);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals18 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        boolean b23 = binarynode_i22.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST24 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST24.transform(i_array26);
        boolean b28 = binarynode_i27.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = binarynode_i27.getRight();
        boolean b30 = binaryTreeEquals18.areEqualsIterative(binarynode_i22, binarynode_i27);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i22.getLeft();
        boolean b32 = isBST12.checkIterative(binarynode_i22);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals33 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST34 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = sortedArrayToBST34.transform(i_array36);
        boolean b38 = binarynode_i37.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST39 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array41 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = sortedArrayToBST39.transform(i_array41);
        boolean b43 = binarynode_i42.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = binarynode_i42.getRight();
        boolean b45 = binaryTreeEquals33.areEqualsIterative(binarynode_i37, binarynode_i42);
        boolean b46 = isBST12.checkIterative(binarynode_i42);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = null;
        binarynode_i42.setLeft(binarynode_i47);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i49 = binaryTreeInOrder0.getIterative(binarynode_i42);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(list_binaryNode10);
        org.junit.Assert.assertNotNull(list_binarynode_i11);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertTrue(b28 == false);
        org.junit.Assert.assertNull(binarynode_i29);
        org.junit.Assert.assertTrue(b30 == true);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(b32 == true);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == false);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(binarynode_i42);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == true);
        org.junit.Assert.assertTrue(b46 == true);
        org.junit.Assert.assertNotNull(list_binarynode_i49);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test245");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode5 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem62.PalindromeList palindromeList6 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList7 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        java.lang.String str10 = listnode_mergeSortedArrays9.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i11 = reverseLinkedList7.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays9);
        boolean b12 = palindromeList6.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays9);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays19 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays17.setData(mergeSortedArrays19);
        listnode_mergeSortedArrays14.setNext(listnode_mergeSortedArrays17);
        boolean b22 = palindromeList6.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode23 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        deleteListNode23.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        boolean b28 = palindromeList6.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i29 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays30);
        java.lang.String str32 = listnode_mergeSortedArrays31.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays34.setData(mergeSortedArrays36);
        listnode_mergeSortedArrays31.setNext(listnode_mergeSortedArrays34);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = listnode_mergeSortedArrays31.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays40);
        com.github.pedrovgs.problem8.SplitArray splitArray42 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array45 = new int[] { (byte) 1, (byte) 10 };
        splitArray42.splitSwappingPartition(i_array45);
        int[] i_array53 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray42.splitSwappingRecursive(i_array53);
        com.github.pedrovgs.problem8.SplitArray splitArray55 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array58 = new int[] { (byte) 1, (byte) 10 };
        splitArray55.splitSwappingPartition(i_array58);
        int[] i_array66 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray55.splitSwappingRecursive(i_array66);
        int[] i_array68 = mergeSortedArrays40.merge(i_array53, i_array66);
        listnode_mergeSortedArrays31.setData(mergeSortedArrays40);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays70 = listnode_mergeSortedArrays31.getNext();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i71 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays70);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i73 = partitionList0.split(listnode_i71, 245366856);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode5);
        org.junit.Assert.assertNotNull(listnode_i11);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertTrue(b28 == true);
        org.junit.Assert.assertNotNull(listnode_i29);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays39);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays70);
        org.junit.Assert.assertNotNull(listnode_i71);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test246");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth1 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i4 = new java.util.Stack<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i4, i_array3);
        boolean b6 = stack_i4.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i8 = stack_i4.search((java.lang.Object) sortedArrayToBST7);
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST7.transform(i_array12);
        int i14 = binaryTreeDepth1.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth15 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i18 = new java.util.Stack<java.lang.Integer>();
        boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i18, i_array17);
        boolean b20 = stack_i18.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i22 = stack_i18.search((java.lang.Object) sortedArrayToBST21);
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST21.transform(i_array26);
        int i28 = binaryTreeDepth15.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        int i29 = binaryTreeDepth1.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization30 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = binaryTreeSerialization30.deserialize("/32/-52/7/");
        int i33 = binaryTreeDepth1.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i32);
        try {
            java.lang.Integer i35 = findMinNumberAtPosition0.find(binarynode_i32, (-1241513984));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(i8 == (-1));
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(i14 == 2);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertTrue(i22 == (-1));
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertTrue(i28 == 2);
        org.junit.Assert.assertTrue(i29 == 2);
        org.junit.Assert.assertNotNull(binarynode_i32);
        org.junit.Assert.assertTrue(i33 == 10);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test247");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization1 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        java.lang.Integer i7 = binarynode_i5.getData();
        java.lang.String str8 = binaryTreeSerialization1.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        boolean b9 = isBST0.checkIterative(binarynode_i5);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel10 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode17 = binaryTreeByLevel10.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        com.github.pedrovgs.problem18.IsBST isBST18 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization19 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        java.lang.Integer i25 = binarynode_i23.getData();
        java.lang.String str26 = binaryTreeSerialization19.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23);
        boolean b27 = isBST18.checkIterative(binarynode_i23);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode28 = binaryTreeByLevel10.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23);
        boolean b29 = isBST0.checkRecursive(binarynode_i23);
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf30 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf31 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf30);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        java.lang.String str36 = binarynode_i35.toString();
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode37 = pathToEveryLeaf30.calculate(binarynode_i35);
        boolean b38 = isBST0.checkRecursive(binarynode_i35);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "100##" + "'", str8.equals("100##"));
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(list_binaryNode17);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertTrue("'" + i25 + "' != '" + 100 + "'", i25.equals(100));
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "100##" + "'", str26.equals("100##"));
        org.junit.Assert.assertTrue(b27 == true);
        org.junit.Assert.assertNotNull(list_binaryNode28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "BinaryNode{data=100}" + "'", str36.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_list_binaryNode37);
        org.junit.Assert.assertTrue(b38 == true);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test248");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array2 = new char[] {};
        replaceSpaces1.replace2(char_array2);
        replaceSpaces0.replace(char_array2);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces5 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces6 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces7 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array8 = new char[] {};
        replaceSpaces7.replace2(char_array8);
        replaceSpaces6.replace(char_array8);
        replaceSpaces5.replace(char_array8);
        replaceSpaces0.replace(char_array8);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces13 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces14 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array15 = new char[] {};
        replaceSpaces14.replace2(char_array15);
        replaceSpaces13.replace(char_array15);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces18 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces19 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces20 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array21 = new char[] {};
        replaceSpaces20.replace2(char_array21);
        replaceSpaces19.replace(char_array21);
        replaceSpaces18.replace(char_array21);
        replaceSpaces13.replace(char_array21);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces26 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces27 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array33 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces27.replace(char_array33);
        replaceSpaces26.replace(char_array33);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces36 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array37 = new char[] {};
        replaceSpaces36.replace2(char_array37);
        replaceSpaces26.replace(char_array37);
        replaceSpaces13.replace(char_array37);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces41 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces42 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array48 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces42.replace(char_array48);
        replaceSpaces41.replace(char_array48);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces51 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array52 = new char[] {};
        replaceSpaces51.replace2(char_array52);
        replaceSpaces41.replace(char_array52);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces55 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces56 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array62 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces56.replace(char_array62);
        replaceSpaces55.replace(char_array62);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces65 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces66 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces67 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array68 = new char[] {};
        replaceSpaces67.replace2(char_array68);
        replaceSpaces66.replace(char_array68);
        replaceSpaces65.replace(char_array68);
        replaceSpaces55.replace(char_array68);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces73 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array79 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces73.replace(char_array79);
        replaceSpaces55.replace2(char_array79);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces82 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces83 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces84 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array85 = new char[] {};
        replaceSpaces84.replace2(char_array85);
        replaceSpaces83.replace(char_array85);
        replaceSpaces82.replace(char_array85);
        replaceSpaces55.replace2(char_array85);
        replaceSpaces41.replace(char_array85);
        replaceSpaces13.replace(char_array85);
        replaceSpaces0.replace2(char_array85);
        org.junit.Assert.assertNotNull(char_array2);
        org.junit.Assert.assertNotNull(char_array8);
        org.junit.Assert.assertNotNull(char_array15);
        org.junit.Assert.assertNotNull(char_array21);
        org.junit.Assert.assertNotNull(char_array33);
        org.junit.Assert.assertNotNull(char_array37);
        org.junit.Assert.assertNotNull(char_array48);
        org.junit.Assert.assertNotNull(char_array52);
        org.junit.Assert.assertNotNull(char_array62);
        org.junit.Assert.assertNotNull(char_array68);
        org.junit.Assert.assertNotNull(char_array79);
        org.junit.Assert.assertNotNull(char_array85);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test249");
        com.github.pedrovgs.problem30.ScientificNotation scientificNotation0 = new com.github.pedrovgs.problem30.ScientificNotation();
        try {
            long long2 = scientificNotation0.calculate("10010###");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test250");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        com.github.pedrovgs.problem18.IsBST isBST7 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = isBST7.checkRecursive(binarynode_i11);
        boolean b13 = listNode6.equals((java.lang.Object) binarynode_i11);
        com.github.pedrovgs.linkedlist.ListNode listNode14 = reverseLinkedList1.reverseIterative(listNode6);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        java.lang.String str20 = listnode_mergeSortedArrays19.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays19.setData(mergeSortedArrays21);
        listnode_mergeSortedArrays16.setNext(listnode_mergeSortedArrays19);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList28 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays29 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays29);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = listnode_mergeSortedArrays30.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = listnode_mergeSortedArrays30.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = null;
        binarynode_i34.setRight(binarynode_i35);
        boolean b37 = listnode_mergeSortedArrays30.equals((java.lang.Object) binarynode_i35);
        com.github.pedrovgs.linkedlist.ListNode listNode38 = reverseLinkedList28.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays30);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode39 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays40);
        java.lang.String str42 = listnode_mergeSortedArrays41.toString();
        deleteListNode39.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays44 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays44);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers46 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b47 = listnode_mergeSortedArrays45.equals((java.lang.Object) mergeBinaryNumbers46);
        deleteListNode39.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays45);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i49 = reverseLinkedList28.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays45);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays50 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays50);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers52 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b53 = listnode_mergeSortedArrays51.equals((java.lang.Object) mergeBinaryNumbers52);
        com.github.pedrovgs.linkedlist.ListNode listNode54 = reverseLinkedList28.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays51);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel55 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel56 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST57 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST58 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = sortedArrayToBST58.transform(i_array60);
        boolean b62 = isBST57.checkRecursive(binarynode_i61);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode63 = binaryTreeByLevel56.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i61);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode64 = binaryTreeByLevel55.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i61);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth65 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i68 = new java.util.Stack<java.lang.Integer>();
        boolean b69 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i68, i_array67);
        boolean b70 = stack_i68.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST71 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i72 = stack_i68.search((java.lang.Object) sortedArrayToBST71);
        java.lang.Integer[] i_array76 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = sortedArrayToBST71.transform(i_array76);
        int i78 = binaryTreeDepth65.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i77);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth79 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array81 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i82 = new java.util.Stack<java.lang.Integer>();
        boolean b83 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i82, i_array81);
        boolean b84 = stack_i82.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST85 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i86 = stack_i82.search((java.lang.Object) sortedArrayToBST85);
        java.lang.Integer[] i_array90 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i91 = sortedArrayToBST85.transform(i_array90);
        int i92 = binaryTreeDepth79.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i91);
        int i93 = binaryTreeDepth65.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i91);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode94 = binaryTreeByLevel55.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i91);
        boolean b95 = listNode54.equals((java.lang.Object) binaryTreeByLevel55);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode54);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays97 = listNode54.getNext();
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(listNode14);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays31);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays32);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNotNull(listNode38);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNotNull(listnode_i49);
        org.junit.Assert.assertTrue(b53 == false);
        org.junit.Assert.assertNotNull(listNode54);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(binarynode_i61);
        org.junit.Assert.assertTrue(b62 == true);
        org.junit.Assert.assertNotNull(list_binaryNode63);
        org.junit.Assert.assertNotNull(list_binaryNode64);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertTrue(b69 == true);
        org.junit.Assert.assertTrue(b70 == false);
        org.junit.Assert.assertTrue(i72 == (-1));
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(binarynode_i77);
        org.junit.Assert.assertTrue(i78 == 2);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertTrue(b83 == true);
        org.junit.Assert.assertTrue(b84 == false);
        org.junit.Assert.assertTrue(i86 == (-1));
        org.junit.Assert.assertNotNull(i_array90);
        org.junit.Assert.assertNotNull(binarynode_i91);
        org.junit.Assert.assertTrue(i92 == 2);
        org.junit.Assert.assertTrue(i93 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode94);
        org.junit.Assert.assertTrue(b95 == false);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays97);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test251");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers> listnode_sumBinaryNumbers4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers>(sumBinaryNumbers0);
        try {
            java.lang.String str7 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("[1, -1, 100, 0]", "]201[");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test252");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("10", "32");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test253");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseIterative("1");
        java.lang.String str8 = reverseString0.reverseRecursive("1");
        java.lang.String str10 = reverseString0.reverseIterative("001");
        java.lang.String str12 = reverseString0.reverseIterative("[1, -1, 100, 0]");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1" + "'", str6.equals("1"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "1" + "'", str8.equals("1"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "100" + "'", str10.equals("100"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]0 ,001 ,1- ,1[" + "'", str12.equals("]0 ,001 ,1- ,1["));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test254");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compress("/!ih/");
        java.lang.String str14 = compressString0.compressAlternativeApproach("[null]");
        java.lang.String str16 = compressString0.compressRecursive("/23/[/##001/");
        java.lang.String str18 = compressString0.compressRecursive("!ih");
        java.lang.String str20 = compressString0.compressRecursive("[1, -1, 102, 0]");
        java.lang.String str22 = compressString0.compressRecursive("hi!");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[nul2]" + "'", str14.equals("[nul2]"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "/23/[/#2021/" + "'", str16.equals("/23/[/#2021/"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "!ih" + "'", str18.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[1, -1, 102, 0]" + "'", str20.equals("[1, -1, 102, 0]"));
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "hi!" + "'", str22.equals("hi!"));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test255");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        boolean b23 = palindromeList1.checkReversing(listNode20);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i28 = reverseLinkedList24.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.problem62.PalindromeList palindromeList29 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i34 = reverseLinkedList30.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        boolean b35 = palindromeList29.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = listnode_mergeSortedArrays32.getNext();
        listnode_mergeSortedArrays26.setNext(listnode_mergeSortedArrays32);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = listnode_mergeSortedArrays26.getData();
        boolean b39 = palindromeList1.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = listnode_mergeSortedArrays26.getData();
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode42 = findKthElement0.find3((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertNotNull(listnode_i28);
        org.junit.Assert.assertNotNull(listnode_i34);
        org.junit.Assert.assertTrue(b35 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays36);
        org.junit.Assert.assertNotNull(mergeSortedArrays38);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays40);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test256");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("/");
        java.lang.String str6 = reverseString0.reverseRecursive("[0, 1, 1, -1]");
        java.lang.String str8 = reverseString0.reverseRecursive("/hi!/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/" + "'", str4.equals("/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]1- ,1 ,1 ,0[" + "'", str6.equals("]1- ,1 ,1 ,0["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/!ih/" + "'", str8.equals("/!ih/"));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test257");
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral0 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array1 = new int[][] {};
        int[] i_array2 = goThroughMatrixInSpiral0.go(i_array_array1);
        int[] i_array5 = new int[] { 107, 3628800 };
        int[][] i_array_array6 = new int[][] { i_array5 };
        int[] i_array7 = goThroughMatrixInSpiral0.go(i_array_array6);
        com.github.pedrovgs.problem42.FloodFill floodFill8 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral9 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array10 = new int[][] {};
        int[] i_array11 = goThroughMatrixInSpiral9.go(i_array_array10);
        floodFill8.apply(i_array_array10, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral17 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array18 = new int[][] {};
        int[] i_array19 = goThroughMatrixInSpiral17.go(i_array_array18);
        int[] i_array26 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array33 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array34 = new int[][] { i_array26, i_array33 };
        int[] i_array35 = goThroughMatrixInSpiral17.go(i_array_array34);
        floodFill8.apply(i_array_array34, (-8), (-14040), 2147483647, (-8));
        int[] i_array41 = goThroughMatrixInSpiral0.go(i_array_array34);
        com.github.pedrovgs.problem2.Vector vector42 = new com.github.pedrovgs.problem2.Vector(i_array41);
        org.junit.Assert.assertNotNull(i_array_array1);
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array6);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array_array10);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(i_array_array18);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(i_array_array34);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(i_array41);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test258");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) (byte) 1);
        int i8 = bitsCounter0.countBitsToOneBasedOnString(101);
        int i10 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(32);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(6);
        int i14 = bitsCounter0.countBitsToOneBasedOnString(1484783616);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 4);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == 2);
        org.junit.Assert.assertTrue(i14 == 4);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test259");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers> listnode_sumBinaryNumbers4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers>(sumBinaryNumbers0);
        try {
            java.lang.String str7 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("3", "79");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test260");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros4 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral5 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array6 = new int[][] {};
        int[] i_array7 = goThroughMatrixInSpiral5.go(i_array_array6);
        int[] i_array10 = new int[] { 107, 3628800 };
        int[][] i_array_array11 = new int[][] { i_array10 };
        int[] i_array12 = goThroughMatrixInSpiral5.go(i_array_array11);
        rewriteRowAndColumnsWithZeros4.rewrite(i_array_array11);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral14 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array15 = new int[][] {};
        int[] i_array16 = goThroughMatrixInSpiral14.go(i_array_array15);
        int[] i_array19 = new int[] { 107, 3628800 };
        int[][] i_array_array20 = new int[][] { i_array19 };
        int[] i_array21 = goThroughMatrixInSpiral14.go(i_array_array20);
        rewriteRowAndColumnsWithZeros4.rewrite(i_array_array20);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros> listnode_rewriteRowAndColumnsWithZeros23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros>(rewriteRowAndColumnsWithZeros4);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros24 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral25 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array26 = new int[][] {};
        int[] i_array27 = goThroughMatrixInSpiral25.go(i_array_array26);
        int[] i_array30 = new int[] { 107, 3628800 };
        int[][] i_array_array31 = new int[][] { i_array30 };
        int[] i_array32 = goThroughMatrixInSpiral25.go(i_array_array31);
        rewriteRowAndColumnsWithZeros24.rewrite(i_array_array31);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral34 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array35 = new int[][] {};
        int[] i_array36 = goThroughMatrixInSpiral34.go(i_array_array35);
        rewriteRowAndColumnsWithZeros24.rewrite(i_array_array35);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral38 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array39 = new int[][] {};
        int[] i_array40 = goThroughMatrixInSpiral38.go(i_array_array39);
        int[] i_array47 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array54 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array55 = new int[][] { i_array47, i_array54 };
        int[] i_array56 = goThroughMatrixInSpiral38.go(i_array_array55);
        rewriteRowAndColumnsWithZeros24.rewrite(i_array_array55);
        rewriteRowAndColumnsWithZeros4.rewrite(i_array_array55);
        int[] i_array59 = goThroughMatrixInSpiral1.go(i_array_array55);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral60 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array61 = new int[][] {};
        int[] i_array62 = goThroughMatrixInSpiral60.go(i_array_array61);
        int[] i_array63 = goThroughMatrixInSpiral1.go(i_array_array61);
        floodFill0.apply(i_array_array61, (-107), (-1890), (-78), 1991901183);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array_array6);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array_array15);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array_array20);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array_array26);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array_array31);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array_array35);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array_array39);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(i_array_array55);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array_array61);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array63);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test261");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        boolean b5 = binarynode_i4.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = sortedArrayToBST6.transform(i_array8);
        boolean b10 = binarynode_i9.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = binarynode_i9.getRight();
        boolean b12 = binaryTreeEquals0.areEqualsIterative(binarynode_i4, binarynode_i9);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder13 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        java.lang.String str18 = binarynode_i17.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_19 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_19.push((int) (byte) 10);
        int i22 = stack1_19.getMin();
        boolean b23 = binarynode_i17.equals((java.lang.Object) stack1_19);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode24 = binaryTreePostOrder13.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        boolean b29 = binarynode_i28.hasRight();
        java.lang.Integer i30 = binarynode_i28.getData();
        boolean b31 = binarynode_i28.hasRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode32 = binaryTreePostOrder13.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals33 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST34 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = sortedArrayToBST34.transform(i_array36);
        boolean b38 = binarynode_i37.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST39 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array41 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = sortedArrayToBST39.transform(i_array41);
        boolean b43 = binarynode_i42.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = binarynode_i42.getRight();
        boolean b45 = binaryTreeEquals33.areEqualsIterative(binarynode_i37, binarynode_i42);
        java.lang.String str46 = binarynode_i42.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode47 = binaryTreePostOrder13.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i42);
        boolean b48 = binarynode_i42.hasRight();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel49 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST50 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        boolean b55 = isBST50.checkRecursive(binarynode_i54);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode56 = binaryTreeByLevel49.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54);
        com.github.pedrovgs.problem18.IsBST isBST57 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization58 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST59 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array61 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i62 = sortedArrayToBST59.transform(i_array61);
        boolean b63 = binarynode_i62.hasRight();
        java.lang.Integer i64 = binarynode_i62.getData();
        java.lang.String str65 = binaryTreeSerialization58.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i62);
        boolean b66 = isBST57.checkIterative(binarynode_i62);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode67 = binaryTreeByLevel49.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i62);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        java.lang.String str70 = binarynode_i69.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode71 = binaryTreeByLevel49.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i69);
        boolean b72 = binaryTreeEquals0.areEqualsIterative(binarynode_i42, binarynode_i69);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue(b5 == false);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(binarynode_i9);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "BinaryNode{data=100}" + "'", str18.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i22 == 10);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(list_binaryNode24);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertTrue("'" + i30 + "' != '" + 100 + "'", i30.equals(100));
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(list_binaryNode32);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == false);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(binarynode_i42);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == true);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "BinaryNode{data=100}" + "'", str46.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_binaryNode47);
        org.junit.Assert.assertTrue(b48 == false);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertNotNull(list_binaryNode56);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(binarynode_i62);
        org.junit.Assert.assertTrue(b63 == false);
        org.junit.Assert.assertTrue("'" + i64 + "' != '" + 100 + "'", i64.equals(100));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "100##" + "'", str65.equals("100##"));
        org.junit.Assert.assertTrue(b66 == true);
        org.junit.Assert.assertNotNull(list_binaryNode67);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "BinaryNode{data=10}" + "'", str70.equals("BinaryNode{data=10}"));
        org.junit.Assert.assertNotNull(list_binaryNode71);
        org.junit.Assert.assertTrue(b72 == false);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test262");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem42.FloodFill floodFill1 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        floodFill1.apply(i_array_array3, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral10 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array11 = new int[][] {};
        int[] i_array12 = goThroughMatrixInSpiral10.go(i_array_array11);
        int[] i_array19 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array26 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array27 = new int[][] { i_array19, i_array26 };
        int[] i_array28 = goThroughMatrixInSpiral10.go(i_array_array27);
        floodFill1.apply(i_array_array27, (-8), (-14040), 2147483647, (-8));
        floodFill0.apply(i_array_array27, 27, 0, 0, (int) ' ');
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros39 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral40 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array41 = new int[][] {};
        int[] i_array42 = goThroughMatrixInSpiral40.go(i_array_array41);
        int[] i_array45 = new int[] { 107, 3628800 };
        int[][] i_array_array46 = new int[][] { i_array45 };
        int[] i_array47 = goThroughMatrixInSpiral40.go(i_array_array46);
        rewriteRowAndColumnsWithZeros39.rewrite(i_array_array46);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral49 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array50 = new int[][] {};
        int[] i_array51 = goThroughMatrixInSpiral49.go(i_array_array50);
        rewriteRowAndColumnsWithZeros39.rewrite(i_array_array50);
        floodFill0.apply(i_array_array50, (-97), 30, 30, (int) (short) 100);
        com.github.pedrovgs.problem42.FloodFill floodFill58 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral59 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array60 = new int[][] {};
        int[] i_array61 = goThroughMatrixInSpiral59.go(i_array_array60);
        floodFill58.apply(i_array_array60, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral67 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array68 = new int[][] {};
        int[] i_array69 = goThroughMatrixInSpiral67.go(i_array_array68);
        int[] i_array76 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array83 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array84 = new int[][] { i_array76, i_array83 };
        int[] i_array85 = goThroughMatrixInSpiral67.go(i_array_array84);
        floodFill58.apply(i_array_array84, (-8), (-14040), 2147483647, (-8));
        floodFill0.apply(i_array_array84, (-24), 24, (-1096810424), 51);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array_array27);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(i_array_array41);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array_array46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array_array50);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array_array60);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(i_array_array68);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(i_array_array84);
        org.junit.Assert.assertNotNull(i_array85);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test263");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i5 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList6 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays8 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays7);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays8.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = null;
        binarynode_i12.setRight(binarynode_i13);
        boolean b15 = listnode_mergeSortedArrays8.equals((java.lang.Object) binarynode_i13);
        com.github.pedrovgs.linkedlist.ListNode listNode16 = reverseLinkedList6.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays8);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode17 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        java.lang.String str20 = listnode_mergeSortedArrays19.toString();
        deleteListNode17.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays22);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers24 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b25 = listnode_mergeSortedArrays23.equals((java.lang.Object) mergeBinaryNumbers24);
        deleteListNode17.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = reverseLinkedList6.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList29 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays30);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = listnode_mergeSortedArrays31.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = listnode_mergeSortedArrays31.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = null;
        binarynode_i35.setRight(binarynode_i36);
        boolean b38 = listnode_mergeSortedArrays31.equals((java.lang.Object) binarynode_i36);
        com.github.pedrovgs.linkedlist.ListNode listNode39 = reverseLinkedList29.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode40 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        java.lang.String str43 = listnode_mergeSortedArrays42.toString();
        deleteListNode40.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays45 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays46 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays45);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers47 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b48 = listnode_mergeSortedArrays46.equals((java.lang.Object) mergeBinaryNumbers47);
        deleteListNode40.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays46);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i50 = reverseLinkedList29.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays46);
        com.github.pedrovgs.linkedlist.ListNode listNode51 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i50);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode53 = findKthElement0.find3(listNode51, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(listnode_i5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays9);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNotNull(listNode16);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays32);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays33);
        org.junit.Assert.assertTrue(b38 == false);
        org.junit.Assert.assertNotNull(listNode39);
        org.junit.Assert.assertTrue(b48 == false);
        org.junit.Assert.assertNotNull(listnode_i50);
        org.junit.Assert.assertNotNull(listNode51);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test264");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = null;
        binarynode_i6.setRight(binarynode_i7);
        boolean b9 = listnode_mergeSortedArrays2.equals((java.lang.Object) binarynode_i7);
        com.github.pedrovgs.linkedlist.ListNode listNode10 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem62.PalindromeList palindromeList11 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList12 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i16 = reverseLinkedList12.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        boolean b17 = palindromeList11.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays20 = listnode_mergeSortedArrays19.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays21 = listnode_mergeSortedArrays19.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = null;
        binarynode_i23.setRight(binarynode_i24);
        boolean b26 = listnode_mergeSortedArrays19.equals((java.lang.Object) binarynode_i24);
        listnode_mergeSortedArrays14.setNext(listnode_mergeSortedArrays19);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays28 = listnode_mergeSortedArrays19.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements29 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = listnode_mergeSortedArrays32.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = listnode_mergeSortedArrays32.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = null;
        binarynode_i36.setRight(binarynode_i37);
        boolean b39 = listnode_mergeSortedArrays32.equals((java.lang.Object) binarynode_i37);
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        removeListDuplicatedElements29.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements29);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList43 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements44 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList45 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays46);
        java.lang.String str48 = listnode_mergeSortedArrays47.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList45.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        removeListDuplicatedElements44.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i51 = getTheElementInTheMiddleOfTheList43.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        removeListDuplicatedElements29.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        listnode_mergeSortedArrays19.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode49);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i54 = reverseLinkedList0.reverseRecursive(listNode49);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = listNode49.getNext();
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNotNull(listNode10);
        org.junit.Assert.assertNotNull(listnode_i16);
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays20);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays21);
        org.junit.Assert.assertTrue(b26 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays28);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays33);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays34);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(listnode_i51);
        org.junit.Assert.assertNotNull(listnode_i54);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays55);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test265");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.ensureCapacity((int) (short) 100);
        int i3 = stack2_0.getMin();
        java.util.ListIterator<java.lang.Integer> listiterator_i4 = stack2_0.listIterator();
        com.github.pedrovgs.problem25.Anagrams anagrams5 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str7 = anagrams5.get("hi!");
        java.util.List<java.lang.String> list_str9 = anagrams5.get("/");
        com.github.pedrovgs.problem25.Anagrams anagrams10 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str12 = anagrams10.get("0");
        java.util.List<java.lang.String> list_str14 = anagrams10.get("0");
        java.util.List<java.lang.String> list_str16 = anagrams10.get("[null]");
        com.github.pedrovgs.problem25.Anagrams anagrams17 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str19 = anagrams17.get("0");
        java.util.List<java.lang.String> list_str21 = anagrams17.get("0");
        com.github.pedrovgs.problem25.Anagrams anagrams22 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str24 = anagrams22.get("0");
        java.util.List<java.lang.String> list_str26 = anagrams22.get("/hi!/");
        java.util.List<java.lang.String> list_str28 = anagrams22.get("35");
        com.github.pedrovgs.problem25.Anagrams anagrams29 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str31 = anagrams29.get("0");
        java.util.List<java.lang.String> list_str33 = anagrams29.get("/hi!/");
        java.util.List<java.lang.String> list_str35 = anagrams29.get("35");
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array36 = new com.github.pedrovgs.problem25.Anagrams[] { anagrams5, anagrams10, anagrams17, anagrams22, anagrams29 };
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array37 = stack2_0.toArray(anagrams_array36);
        int i38 = stack2_0.getMin();
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding39 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i42 = subtractAdding39.subtract((int) '4', (int) (short) 1);
        int i45 = subtractAdding39.subtract(72, (-6));
        boolean b46 = stack2_0.contains((java.lang.Object) 72);
        org.junit.Assert.assertTrue(i3 == 2147483647);
        org.junit.Assert.assertNotNull(listiterator_i4);
        org.junit.Assert.assertNotNull(list_str7);
        org.junit.Assert.assertNotNull(list_str9);
        org.junit.Assert.assertNotNull(list_str12);
        org.junit.Assert.assertNotNull(list_str14);
        org.junit.Assert.assertNotNull(list_str16);
        org.junit.Assert.assertNotNull(list_str19);
        org.junit.Assert.assertNotNull(list_str21);
        org.junit.Assert.assertNotNull(list_str24);
        org.junit.Assert.assertNotNull(list_str26);
        org.junit.Assert.assertNotNull(list_str28);
        org.junit.Assert.assertNotNull(list_str31);
        org.junit.Assert.assertNotNull(list_str33);
        org.junit.Assert.assertNotNull(list_str35);
        org.junit.Assert.assertNotNull(anagrams_array36);
        org.junit.Assert.assertNotNull(anagrams_array37);
        org.junit.Assert.assertTrue(i38 == 2147483647);
        org.junit.Assert.assertTrue(i42 == 51);
        org.junit.Assert.assertTrue(i45 == 78);
        org.junit.Assert.assertTrue(b46 == false);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test266");
        com.github.pedrovgs.problem69.BitsToTransform bitsToTransform0 = new com.github.pedrovgs.problem69.BitsToTransform();
        int i3 = bitsToTransform0.calculate((int) '#', (int) (short) 0);
        int i6 = bitsToTransform0.calculate(51, (int) 'a');
        int i9 = bitsToTransform0.calculate(10, (-1241513984));
        int i12 = bitsToTransform0.calculate((int) (short) 1, 23);
        int i15 = bitsToTransform0.calculate((-125528000), (int) (short) -1);
        org.junit.Assert.assertTrue(i3 == 3);
        org.junit.Assert.assertTrue(i6 == 3);
        org.junit.Assert.assertTrue(i9 == 7);
        org.junit.Assert.assertTrue(i12 == 3);
        org.junit.Assert.assertTrue(i15 == 21);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test267");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        stack2_0.removeAllElements();
        java.lang.Object obj4 = stack2_0.clone();
        boolean b6 = stack2_0.add((java.lang.Integer) (-52));
        try {
            stack2_0.setElementAt((java.lang.Integer) (-2), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertTrue(b6 == true);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test268");
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder0 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian1 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d4 = avlTreeMedian1.find(binarynode_i3);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode5 = binaryTreePreOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i3);
        com.github.pedrovgs.problem18.IsBST isBST6 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = isBST6.checkRecursive(binarynode_i10);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode12 = binaryTreePreOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = binarynode_i10.getLeft();
        java.lang.Integer i14 = binarynode_i10.getData();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = binarynode_i10.getLeft();
        org.junit.Assert.assertTrue(d4 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode5);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == true);
        org.junit.Assert.assertNotNull(list_binaryNode12);
        org.junit.Assert.assertNull(binarynode_i13);
        org.junit.Assert.assertTrue("'" + i14 + "' != '" + 100 + "'", i14.equals(100));
        org.junit.Assert.assertNull(binarynode_i15);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test269");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        java.lang.Integer i2 = stack2_0.push((java.lang.Integer) 5);
        com.github.pedrovgs.problem68.IsEven isEven3 = new com.github.pedrovgs.problem68.IsEven();
        boolean b5 = isEven3.check((int) (byte) 1);
        boolean b7 = isEven3.check(0);
        boolean b9 = isEven3.check(4);
        boolean b11 = isEven3.check((int) (short) 10);
        int i12 = stack2_0.indexOf((java.lang.Object) b11);
        int i13 = stack2_0.capacity();
        boolean b14 = stack2_0.isEmpty();
        org.junit.Assert.assertTrue("'" + i2 + "' != '" + 5 + "'", i2.equals(5));
        org.junit.Assert.assertTrue(b5 == false);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b11 == true);
        org.junit.Assert.assertTrue(i12 == (-1));
        org.junit.Assert.assertTrue(i13 == 10);
        org.junit.Assert.assertTrue(b14 == false);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test270");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate("25-");
        org.junit.Assert.assertTrue(b2 == true);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test271");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        boolean b13 = vector_i4.contains((java.lang.Object) (byte) 100);
        java.util.Enumeration<java.lang.Integer> enumeration_i14 = vector_i4.elements();
        java.lang.Integer i15 = vector_i4.firstElement();
        java.lang.Object obj16 = vector_i4.clone();
        try {
            java.lang.Integer i18 = vector_i4.elementAt((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(enumeration_i14);
        org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0 + "'", i15.equals(0));
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test272");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_8 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_8.push((int) (byte) 10);
        int i11 = stack1_8.getMin();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList12 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements13 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = null;
        binarynode_i20.setRight(binarynode_i21);
        boolean b23 = listnode_mergeSortedArrays16.equals((java.lang.Object) binarynode_i21);
        com.github.pedrovgs.linkedlist.ListNode listNode24 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        removeListDuplicatedElements13.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode24);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements26 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList27 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays28 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays28);
        java.lang.String str30 = listnode_mergeSortedArrays29.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode31 = reverseLinkedList27.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays29);
        removeListDuplicatedElements26.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode31);
        removeListDuplicatedElements13.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode31);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i34 = getTheElementInTheMiddleOfTheList12.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode31);
        boolean b35 = stack1_8.remove((java.lang.Object) listnode_i34);
        removeListDuplicatedElements1.remove2(listnode_i34);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i38 = partitionList0.split(listnode_i34, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertTrue(i11 == 10);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(listNode24);
        org.junit.Assert.assertNotNull(listNode31);
        org.junit.Assert.assertNotNull(listnode_i34);
        org.junit.Assert.assertTrue(b35 == false);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test273");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode11);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements13 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode18 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        removeListDuplicatedElements13.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList21 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = listnode_mergeSortedArrays25.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = listnode_mergeSortedArrays25.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = null;
        binarynode_i29.setRight(binarynode_i30);
        boolean b32 = listnode_mergeSortedArrays25.equals((java.lang.Object) binarynode_i30);
        com.github.pedrovgs.linkedlist.ListNode listNode33 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode33);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements35 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList36 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        java.lang.String str39 = listnode_mergeSortedArrays38.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList36.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays38);
        removeListDuplicatedElements35.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i43 = getTheElementInTheMiddleOfTheList21.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements44 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList45 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays46);
        java.lang.String str48 = listnode_mergeSortedArrays47.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList45.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        removeListDuplicatedElements44.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i51 = getTheElementInTheMiddleOfTheList21.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements52 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList53 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays54 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = listnode_mergeSortedArrays55.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = listnode_mergeSortedArrays55.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = null;
        binarynode_i59.setRight(binarynode_i60);
        boolean b62 = listnode_mergeSortedArrays55.equals((java.lang.Object) binarynode_i60);
        com.github.pedrovgs.linkedlist.ListNode listNode63 = reverseLinkedList53.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays55);
        removeListDuplicatedElements52.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode63);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements65 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList66 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays67 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays68 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays67);
        java.lang.String str69 = listnode_mergeSortedArrays68.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode70 = reverseLinkedList66.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays68);
        removeListDuplicatedElements65.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode70);
        removeListDuplicatedElements52.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode70);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i73 = getTheElementInTheMiddleOfTheList21.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode70);
        removeListDuplicatedElements0.remove(listnode_i73);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements75 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList76 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays77 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays78 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays77);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays79 = listnode_mergeSortedArrays78.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays80 = listnode_mergeSortedArrays78.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i82 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i83 = null;
        binarynode_i82.setRight(binarynode_i83);
        boolean b85 = listnode_mergeSortedArrays78.equals((java.lang.Object) binarynode_i83);
        com.github.pedrovgs.linkedlist.ListNode listNode86 = reverseLinkedList76.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays78);
        removeListDuplicatedElements75.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode86);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements88 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList89 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays90 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays91 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays90);
        java.lang.String str92 = listnode_mergeSortedArrays91.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode93 = reverseLinkedList89.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays91);
        removeListDuplicatedElements88.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode93);
        removeListDuplicatedElements75.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode93);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode93);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i97 = null;
        try {
            removeListDuplicatedElements0.remove(listnode_i97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertNotNull(listNode18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays26);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays27);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertNotNull(listNode33);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertNotNull(listnode_i43);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(listnode_i51);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays56);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays57);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNotNull(listNode63);
        org.junit.Assert.assertNotNull(listNode70);
        org.junit.Assert.assertNotNull(listnode_i73);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays79);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays80);
        org.junit.Assert.assertTrue(b85 == false);
        org.junit.Assert.assertNotNull(listNode86);
        org.junit.Assert.assertNotNull(listNode93);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test274");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements1 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array5 = multiplyArrayElements1.multiply(i_array4);
        splitArray0.splitSwappingPartition(i_array4);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral7 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array8 = new int[][] {};
        int[] i_array9 = goThroughMatrixInSpiral7.go(i_array_array8);
        splitArray0.splitSwappingPartition(i_array9);
        com.github.pedrovgs.problem31.FindLongestConsecutiveSequence findLongestConsecutiveSequence11 = new com.github.pedrovgs.problem31.FindLongestConsecutiveSequence();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        com.github.pedrovgs.problem8.SplitArray splitArray14 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array17 = new int[] { (byte) 1, (byte) 10 };
        splitArray14.splitSwappingPartition(i_array17);
        int[] i_array25 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray14.splitSwappingRecursive(i_array25);
        com.github.pedrovgs.problem8.SplitArray splitArray27 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array30 = new int[] { (byte) 1, (byte) 10 };
        splitArray27.splitSwappingPartition(i_array30);
        int[] i_array38 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray27.splitSwappingRecursive(i_array38);
        int[] i_array40 = mergeSortedArrays12.merge(i_array25, i_array38);
        int i41 = findLongestConsecutiveSequence11.findIterative(i_array40);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays42 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays42);
        com.github.pedrovgs.problem8.SplitArray splitArray44 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array47 = new int[] { (byte) 1, (byte) 10 };
        splitArray44.splitSwappingPartition(i_array47);
        int[] i_array55 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray44.splitSwappingRecursive(i_array55);
        com.github.pedrovgs.problem8.SplitArray splitArray57 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array60 = new int[] { (byte) 1, (byte) 10 };
        splitArray57.splitSwappingPartition(i_array60);
        int[] i_array68 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray57.splitSwappingRecursive(i_array68);
        int[] i_array70 = mergeSortedArrays42.merge(i_array55, i_array68);
        int i71 = findLongestConsecutiveSequence11.findRecursive(i_array55);
        splitArray0.splitSwappingRecursive(i_array55);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertTrue(i41 == 2);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertTrue(i71 == 2);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test275");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.util.Iterator<java.lang.Integer> iterator_i12 = vector_i4.iterator();
        java.lang.Object[] obj_array13 = vector_i4.toArray();
        java.util.ListIterator<java.lang.Integer> listiterator_i15 = vector_i4.listIterator((int) (short) 1);
        java.util.Enumeration<java.lang.Integer> enumeration_i16 = vector_i4.elements();
        try {
            java.lang.Integer i19 = vector_i4.set(104, (java.lang.Integer) (-10296));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertNotNull(iterator_i12);
        org.junit.Assert.assertNotNull(obj_array13);
        org.junit.Assert.assertNotNull(listiterator_i15);
        org.junit.Assert.assertNotNull(enumeration_i16);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test276");
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays0 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays0);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = listnode_mergeSortedArrays1.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays1.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = null;
        binarynode_i5.setRight(binarynode_i6);
        boolean b8 = listnode_mergeSortedArrays1.equals((java.lang.Object) binarynode_i6);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = listnode_mergeSortedArrays10.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = listnode_mergeSortedArrays10.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort14 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray15 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array18 = new int[] { (byte) 1, (byte) 10 };
        splitArray15.splitSwappingPartition(i_array18);
        selectionSort14.sort(i_array18);
        com.github.pedrovgs.problem8.SplitArray splitArray21 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array24 = new int[] { (byte) 1, (byte) 10 };
        splitArray21.splitSwappingPartition(i_array24);
        int[] i_array32 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray21.splitSwappingRecursive(i_array32);
        int[] i_array34 = mergeSortedArrays13.merge(i_array18, i_array32);
        listnode_mergeSortedArrays10.setData(mergeSortedArrays13);
        listnode_mergeSortedArrays1.setData(mergeSortedArrays13);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort38 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray39 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array42 = new int[] { (byte) 1, (byte) 10 };
        splitArray39.splitSwappingPartition(i_array42);
        selectionSort38.sort(i_array42);
        com.github.pedrovgs.problem8.SplitArray splitArray45 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array48 = new int[] { (byte) 1, (byte) 10 };
        splitArray45.splitSwappingPartition(i_array48);
        int[] i_array56 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray45.splitSwappingRecursive(i_array56);
        int[] i_array58 = mergeSortedArrays37.merge(i_array42, i_array56);
        int[] i_array59 = null;
        try {
            int[] i_array60 = mergeSortedArrays13.merge(i_array42, i_array59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays2);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays11);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays12);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array58);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test277");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("1", "97");
        boolean b6 = simpleRegularExpression0.evaluate("[", "[]");
        boolean b9 = simpleRegularExpression0.evaluate("/32/-52/7/", "[3]");
        boolean b12 = simpleRegularExpression0.evaluate("/[-1]/]1-[/]1- ,1 ,1 ,0[/01/", "");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test278");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        boolean b5 = isBST0.checkRecursive(binarynode_i4);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals6 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = binarynode_i15.getRight();
        boolean b18 = binaryTreeEquals6.areEqualsIterative(binarynode_i10, binarynode_i15);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i10.getLeft();
        boolean b20 = isBST0.checkIterative(binarynode_i10);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals21 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST22 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array24 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = sortedArrayToBST22.transform(i_array24);
        boolean b26 = binarynode_i25.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        boolean b31 = binarynode_i30.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = binarynode_i30.getRight();
        boolean b33 = binaryTreeEquals21.areEqualsIterative(binarynode_i25, binarynode_i30);
        boolean b34 = isBST0.checkIterative(binarynode_i30);
        java.lang.String str35 = binarynode_i30.toString();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == true);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(binarynode_i25);
        org.junit.Assert.assertTrue(b26 == false);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNull(binarynode_i32);
        org.junit.Assert.assertTrue(b33 == true);
        org.junit.Assert.assertTrue(b34 == true);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "BinaryNode{data=100}" + "'", str35.equals("BinaryNode{data=100}"));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test279");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers> listnode_sumBinaryNumbers4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers>(sumBinaryNumbers0);
        try {
            java.lang.String str7 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("10210#3", "/100##/[/32/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test280");
        com.github.pedrovgs.problem74.BubbleSort bubbleSort0 = new com.github.pedrovgs.problem74.BubbleSort();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        com.github.pedrovgs.problem42.FloodFill floodFill4 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral5 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array6 = new int[][] {};
        int[] i_array7 = goThroughMatrixInSpiral5.go(i_array_array6);
        floodFill4.apply(i_array_array6, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros13 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral14 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array15 = new int[][] {};
        int[] i_array16 = goThroughMatrixInSpiral14.go(i_array_array15);
        int[] i_array19 = new int[] { 107, 3628800 };
        int[][] i_array_array20 = new int[][] { i_array19 };
        int[] i_array21 = goThroughMatrixInSpiral14.go(i_array_array20);
        rewriteRowAndColumnsWithZeros13.rewrite(i_array_array20);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral23 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array24 = new int[][] {};
        int[] i_array25 = goThroughMatrixInSpiral23.go(i_array_array24);
        rewriteRowAndColumnsWithZeros13.rewrite(i_array_array24);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral27 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array28 = new int[][] {};
        int[] i_array29 = goThroughMatrixInSpiral27.go(i_array_array28);
        int[] i_array36 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array43 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array44 = new int[][] { i_array36, i_array43 };
        int[] i_array45 = goThroughMatrixInSpiral27.go(i_array_array44);
        rewriteRowAndColumnsWithZeros13.rewrite(i_array_array44);
        floodFill4.apply(i_array_array44, 52, 6, (int) (short) 0, 13631492);
        int[] i_array52 = goThroughMatrixInSpiral1.go(i_array_array44);
        bubbleSort0.sort(i_array52);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array_array6);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array_array15);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array_array20);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array_array24);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array_array28);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array_array44);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array52);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test281");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian1 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d4 = avlTreeMedian1.find(binarynode_i3);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor5 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals6 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = binarynode_i15.getRight();
        boolean b18 = binaryTreeEquals6.areEqualsIterative(binarynode_i10, binarynode_i15);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        boolean b23 = binarynode_i22.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST24 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST24.transform(i_array26);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode28 = lowestCommonAncestor5.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = binarynode_i15.getLeft();
        double d30 = avlTreeMedian1.find(binarynode_i15);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = binarynode_i34.getRight();
        java.lang.Integer i37 = binarynode_i34.getData();
        binarynode_i15.setLeft(binarynode_i34);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i39 = binaryTreeInOrder0.getIterative(binarynode_i34);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals40 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        boolean b45 = binarynode_i44.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST46 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST46.transform(i_array48);
        boolean b50 = binarynode_i49.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = binarynode_i49.getRight();
        boolean b52 = binaryTreeEquals40.areEqualsIterative(binarynode_i44, binarynode_i49);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = binarynode_i44.getLeft();
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i54 = binaryTreeInOrder0.getIterative(binarynode_i53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d4 == 10.0d);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == true);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertNull(binaryNode28);
        org.junit.Assert.assertNull(binarynode_i29);
        org.junit.Assert.assertTrue(d30 == 100.0d);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNull(binarynode_i36);
        org.junit.Assert.assertTrue("'" + i37 + "' != '" + 100 + "'", i37.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i39);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == false);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertTrue(b50 == false);
        org.junit.Assert.assertNull(binarynode_i51);
        org.junit.Assert.assertTrue(b52 == true);
        org.junit.Assert.assertNull(binarynode_i53);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test282");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i5.trimToSize();
        boolean b11 = vector_i5.isEmpty();
        try {
            java.lang.Integer i13 = vector_i5.remove((-14040));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertTrue(b11 == false);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test283");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_0.push((int) (byte) 10);
        int i3 = stack1_0.getMin();
        int i4 = stack1_0.getMin();
        com.github.pedrovgs.problem75.SelectionSort selectionSort5 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray6 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array9 = new int[] { (byte) 1, (byte) 10 };
        splitArray6.splitSwappingPartition(i_array9);
        selectionSort5.sort(i_array9);
        int i12 = stack1_0.search((java.lang.Object) i_array9);
        stack1_0.push(720);
        stack1_0.clear();
        int i16 = stack1_0.getMin();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i21 = new java.util.Vector<java.lang.Integer>();
        boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i21, i_array20);
        boolean b24 = vector_i21.remove((java.lang.Object) (short) -1);
        int i26 = vector_i21.indexOf((java.lang.Object) 1);
        int i28 = vector_i21.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj29 = vector_i21.clone();
        java.lang.Object obj30 = null;
        int i31 = vector_i21.lastIndexOf(obj30);
        java.lang.Object[] obj_array32 = vector_i21.toArray();
        try {
            int i34 = stack1_0.indexOf((java.lang.Object) obj_array32, (-97));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(i3 == 10);
        org.junit.Assert.assertTrue(i4 == 10);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertTrue(i12 == (-1));
        org.junit.Assert.assertTrue(i16 == 2147483647);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertTrue(b22 == true);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertTrue(i26 == 1);
        org.junit.Assert.assertTrue(i28 == (-1));
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue(i31 == (-1));
        org.junit.Assert.assertNotNull(obj_array32);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test284");
        com.github.pedrovgs.problem11.IntToString intToString0 = new com.github.pedrovgs.problem11.IntToString();
        java.lang.String str2 = intToString0.transform(18);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "18" + "'", str2.equals("18"));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test285");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideIterative(1, (int) (short) 100);
        float f9 = divideUsingSubtraction0.divideIterative((int) (short) 1, 52);
        float f12 = divideUsingSubtraction0.divideRecursive(30, 21);
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.01f);
        org.junit.Assert.assertTrue(f9 == 0.01923077f);
        org.junit.Assert.assertTrue(f12 == 1.4285715f);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test286");
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers0 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        int i5 = mergeBinaryNumbers0.merge((int) (byte) 10, (-52000), 2147483647, (-52));
        int i10 = mergeBinaryNumbers0.merge(29, 107, 52, (int) (short) 1);
        int i15 = mergeBinaryNumbers0.merge(3, (-52), 18, 3628800);
        com.github.pedrovgs.problem25.Anagrams anagrams16 = new com.github.pedrovgs.problem25.Anagrams();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem67.MergeBinaryNumbers, com.github.pedrovgs.problem25.Anagrams> pair_mergeBinaryNumbers_anagrams17 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem67.MergeBinaryNumbers, com.github.pedrovgs.problem25.Anagrams>(mergeBinaryNumbers0, anagrams16);
        int i22 = mergeBinaryNumbers0.merge((-2147483648), (-2147483648), 4, 78);
        int i27 = mergeBinaryNumbers0.merge(52002, (-52000), (-52), 24);
        org.junit.Assert.assertTrue(i5 == 10);
        org.junit.Assert.assertTrue(i10 == 112197661);
        org.junit.Assert.assertTrue(i15 == (-13631485));
        org.junit.Assert.assertTrue(i22 == (-2147483648));
        org.junit.Assert.assertTrue(i27 == (-212989150));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test287");
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers0 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        int i5 = mergeBinaryNumbers0.merge((int) (short) 10, 6, (int) (byte) 10, (int) (byte) 0);
        int i10 = mergeBinaryNumbers0.merge((-13631485), 78, (-52000), (-2));
        org.junit.Assert.assertTrue(i5 == 6154);
        org.junit.Assert.assertTrue(i10 == (-2147483570));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test288");
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST0 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = sortedArrayToBST0.transform(i_array2);
        java.lang.String str4 = binarynode_i3.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_5 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_5.push((int) (byte) 10);
        int i8 = stack1_5.getMin();
        boolean b9 = binarynode_i3.equals((java.lang.Object) stack1_5);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel10 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode17 = binaryTreeByLevel10.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        binarynode_i3.setRight(binarynode_i15);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder19 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder20 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian21 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d24 = avlTreeMedian21.find(binarynode_i23);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor25 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals26 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        boolean b31 = binarynode_i30.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        boolean b38 = binaryTreeEquals26.areEqualsIterative(binarynode_i30, binarynode_i35);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST39 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array41 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = sortedArrayToBST39.transform(i_array41);
        boolean b43 = binarynode_i42.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST44 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array46 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = sortedArrayToBST44.transform(i_array46);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode48 = lowestCommonAncestor25.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i42, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i47);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = binarynode_i35.getLeft();
        double d50 = avlTreeMedian21.find(binarynode_i35);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        boolean b55 = binarynode_i54.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = binarynode_i54.getRight();
        java.lang.Integer i57 = binarynode_i54.getData();
        binarynode_i35.setLeft(binarynode_i54);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i59 = binaryTreeInOrder20.getIterative(binarynode_i54);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode60 = binaryTreePostOrder19.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i54);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor61 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals62 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST63 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = sortedArrayToBST63.transform(i_array65);
        boolean b67 = binarynode_i66.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST68 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array70 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i71 = sortedArrayToBST68.transform(i_array70);
        boolean b72 = binarynode_i71.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = binarynode_i71.getRight();
        boolean b74 = binaryTreeEquals62.areEqualsIterative(binarynode_i66, binarynode_i71);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST75 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array77 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = sortedArrayToBST75.transform(i_array77);
        boolean b79 = binarynode_i78.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST80 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array82 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i83 = sortedArrayToBST80.transform(i_array82);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode84 = lowestCommonAncestor61.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i71, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i78, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i83);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST85 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array87 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i88 = sortedArrayToBST85.transform(i_array87);
        boolean b89 = binarynode_i88.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i90 = binarynode_i88.getRight();
        binarynode_i78.setRight(binarynode_i88);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode92 = binaryTreePostOrder19.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i88);
        boolean b93 = binarynode_i88.hasLeft();
        binarynode_i3.setRight(binarynode_i88);
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertNotNull(binarynode_i3);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "BinaryNode{data=100}" + "'", str4.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i8 == 10);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(list_binaryNode17);
        org.junit.Assert.assertTrue(d24 == 10.0d);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == true);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(binarynode_i42);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(binarynode_i47);
        org.junit.Assert.assertNull(binaryNode48);
        org.junit.Assert.assertNull(binarynode_i49);
        org.junit.Assert.assertTrue(d50 == 100.0d);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == false);
        org.junit.Assert.assertNull(binarynode_i56);
        org.junit.Assert.assertTrue("'" + i57 + "' != '" + 100 + "'", i57.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i59);
        org.junit.Assert.assertNotNull(list_binaryNode60);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(binarynode_i66);
        org.junit.Assert.assertTrue(b67 == false);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(binarynode_i71);
        org.junit.Assert.assertTrue(b72 == false);
        org.junit.Assert.assertNull(binarynode_i73);
        org.junit.Assert.assertTrue(b74 == true);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertNotNull(binarynode_i78);
        org.junit.Assert.assertTrue(b79 == false);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(binarynode_i83);
        org.junit.Assert.assertNull(binaryNode84);
        org.junit.Assert.assertNotNull(i_array87);
        org.junit.Assert.assertNotNull(binarynode_i88);
        org.junit.Assert.assertTrue(b89 == false);
        org.junit.Assert.assertNull(binarynode_i90);
        org.junit.Assert.assertNotNull(list_binaryNode92);
        org.junit.Assert.assertTrue(b93 == false);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test289");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem42.FloodFill floodFill1 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        floodFill1.apply(i_array_array3, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral10 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array11 = new int[][] {};
        int[] i_array12 = goThroughMatrixInSpiral10.go(i_array_array11);
        int[] i_array19 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array26 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array27 = new int[][] { i_array19, i_array26 };
        int[] i_array28 = goThroughMatrixInSpiral10.go(i_array_array27);
        floodFill1.apply(i_array_array27, (-8), (-14040), 2147483647, (-8));
        floodFill0.apply(i_array_array27, 27, 0, 0, (int) ' ');
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral39 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array40 = new int[][] {};
        int[] i_array41 = goThroughMatrixInSpiral39.go(i_array_array40);
        com.github.pedrovgs.problem42.FloodFill floodFill42 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral43 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array44 = new int[][] {};
        int[] i_array45 = goThroughMatrixInSpiral43.go(i_array_array44);
        floodFill42.apply(i_array_array44, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros51 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral52 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array53 = new int[][] {};
        int[] i_array54 = goThroughMatrixInSpiral52.go(i_array_array53);
        int[] i_array57 = new int[] { 107, 3628800 };
        int[][] i_array_array58 = new int[][] { i_array57 };
        int[] i_array59 = goThroughMatrixInSpiral52.go(i_array_array58);
        rewriteRowAndColumnsWithZeros51.rewrite(i_array_array58);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral61 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array62 = new int[][] {};
        int[] i_array63 = goThroughMatrixInSpiral61.go(i_array_array62);
        rewriteRowAndColumnsWithZeros51.rewrite(i_array_array62);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral65 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array66 = new int[][] {};
        int[] i_array67 = goThroughMatrixInSpiral65.go(i_array_array66);
        int[] i_array74 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array81 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array82 = new int[][] { i_array74, i_array81 };
        int[] i_array83 = goThroughMatrixInSpiral65.go(i_array_array82);
        rewriteRowAndColumnsWithZeros51.rewrite(i_array_array82);
        floodFill42.apply(i_array_array82, 52, 6, (int) (short) 0, 13631492);
        int[] i_array90 = goThroughMatrixInSpiral39.go(i_array_array82);
        floodFill0.apply(i_array_array82, 32, 11426, 13631492, 1946209058);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array_array11);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array_array27);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(i_array_array40);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array_array44);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array_array53);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array_array58);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array_array62);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(i_array_array66);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertNotNull(i_array_array82);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(i_array90);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test290");
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates0 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates1 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        java.lang.Integer[] i_array6 = removeDuplicates1.removeUsingSorting(i_array4);
        java.lang.Integer[] i_array7 = removeDuplicates0.removeUsingSorting(i_array6);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates8 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates9 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        java.lang.Integer[] i_array14 = removeDuplicates9.removeUsingSorting(i_array12);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        java.lang.Integer[] i_array19 = removeDuplicates9.removeUsingSorting(i_array17);
        java.lang.Integer[] i_array20 = removeDuplicates8.removeUsingSorting(i_array17);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates21 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates22 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        java.lang.Integer[] i_array27 = removeDuplicates22.removeUsingSorting(i_array25);
        java.lang.Integer[] i_array28 = removeDuplicates21.removeUsingSorting(i_array27);
        java.lang.Integer[] i_array29 = removeDuplicates8.removeUsingSorting(i_array28);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates30 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates31 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        java.lang.Integer[] i_array36 = removeDuplicates31.removeUsingSorting(i_array34);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST37 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array39 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = sortedArrayToBST37.transform(i_array39);
        java.lang.Integer[] i_array41 = removeDuplicates31.removeUsingSorting(i_array39);
        java.lang.Integer[] i_array42 = removeDuplicates30.removeUsingSorting(i_array39);
        java.lang.Integer[] i_array47 = new java.lang.Integer[] { 2, (-14040), (-14040), 27 };
        java.lang.Integer[] i_array48 = removeDuplicates30.removeUsingSet(i_array47);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates49 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates50 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST51 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array53 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = sortedArrayToBST51.transform(i_array53);
        java.lang.Integer[] i_array55 = removeDuplicates50.removeUsingSorting(i_array53);
        java.lang.Integer[] i_array56 = removeDuplicates49.removeUsingSorting(i_array55);
        java.lang.Integer[] i_array57 = removeDuplicates30.removeUsingSet(i_array56);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates58 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST59 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array61 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i62 = sortedArrayToBST59.transform(i_array61);
        java.lang.Integer[] i_array63 = removeDuplicates58.removeUsingSorting(i_array61);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST64 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array66 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = sortedArrayToBST64.transform(i_array66);
        java.lang.Integer[] i_array68 = removeDuplicates58.removeUsingSorting(i_array66);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates69 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates70 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST71 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array73 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i74 = sortedArrayToBST71.transform(i_array73);
        java.lang.Integer[] i_array75 = removeDuplicates70.removeUsingSorting(i_array73);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST76 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array78 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = sortedArrayToBST76.transform(i_array78);
        java.lang.Integer[] i_array80 = removeDuplicates70.removeUsingSorting(i_array78);
        java.lang.Integer[] i_array81 = removeDuplicates69.removeUsingSorting(i_array78);
        java.lang.Integer[] i_array82 = removeDuplicates58.removeUsingSet(i_array81);
        java.lang.Integer[] i_array83 = removeDuplicates30.removeUsingSet(i_array82);
        java.lang.Integer[] i_array84 = removeDuplicates8.removeUsingSorting(i_array83);
        java.lang.Integer[] i_array85 = removeDuplicates0.removeUsingSorting(i_array84);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(binarynode_i40);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(binarynode_i54);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(binarynode_i62);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(binarynode_i67);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(i_array73);
        org.junit.Assert.assertNotNull(binarynode_i74);
        org.junit.Assert.assertNotNull(i_array75);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(binarynode_i79);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(i_array85);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test291");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        java.lang.Object obj13 = null;
        int i14 = vector_i4.lastIndexOf(obj13);
        java.util.function.UnaryOperator<java.lang.Integer> unaryoperator_i15 = null;
        try {
            vector_i4.replaceAll(unaryoperator_i15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue(i14 == (-1));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test292");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array7 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces1.replace(char_array7);
        replaceSpaces0.replace(char_array7);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces10 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces11 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces12 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array13 = new char[] {};
        replaceSpaces12.replace2(char_array13);
        replaceSpaces11.replace(char_array13);
        replaceSpaces10.replace(char_array13);
        replaceSpaces0.replace(char_array13);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces18 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array24 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces18.replace(char_array24);
        replaceSpaces0.replace2(char_array24);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces27 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces28 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array34 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces28.replace(char_array34);
        replaceSpaces27.replace(char_array34);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces37 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array38 = new char[] {};
        replaceSpaces37.replace2(char_array38);
        replaceSpaces27.replace(char_array38);
        replaceSpaces0.replace2(char_array38);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces42 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces43 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces44 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array45 = new char[] {};
        replaceSpaces44.replace2(char_array45);
        replaceSpaces43.replace(char_array45);
        replaceSpaces42.replace(char_array45);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces49 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces50 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces51 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array52 = new char[] {};
        replaceSpaces51.replace2(char_array52);
        replaceSpaces50.replace(char_array52);
        replaceSpaces49.replace(char_array52);
        replaceSpaces42.replace2(char_array52);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces57 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces58 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array64 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces58.replace(char_array64);
        replaceSpaces57.replace(char_array64);
        replaceSpaces42.replace2(char_array64);
        replaceSpaces0.replace(char_array64);
        org.junit.Assert.assertNotNull(char_array7);
        org.junit.Assert.assertNotNull(char_array13);
        org.junit.Assert.assertNotNull(char_array24);
        org.junit.Assert.assertNotNull(char_array34);
        org.junit.Assert.assertNotNull(char_array38);
        org.junit.Assert.assertNotNull(char_array45);
        org.junit.Assert.assertNotNull(char_array52);
        org.junit.Assert.assertNotNull(char_array64);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test293");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("hi!");
        java.lang.String str4 = reverseSentence0.reverse("/32/-52/7/");
        java.lang.String str6 = reverseSentence0.reverse("BinaryNode{data=10}");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "hi!" + "'", str2.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/32/-52/7/" + "'", str4.equals("/32/-52/7/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "BinaryNode{data=10}" + "'", str6.equals("BinaryNode{data=10}"));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test294");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced10 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        int i11 = vector_i5.lastIndexOf((java.lang.Object) isTreeBalanced10);
        vector_i5.ensureCapacity(0);
        vector_i5.ensureCapacity((-1890));
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertTrue(i11 == (-1));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test295");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode5 = findKthElement0.find3((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test296");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersCheating("-52", "/BinaryNode{data=10}/10/]1-[/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test297");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("97");
        java.lang.String str4 = reverseSentence0.reverse("[");
        java.lang.String str6 = reverseSentence0.reverse("10010###");
        java.lang.String str8 = reverseSentence0.reverse("[-1, 10]");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "[" + "'", str4.equals("["));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "10010###" + "'", str6.equals("10010###"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "10] [-1," + "'", str8.equals("10] [-1,"));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test298");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compress("/!ih/");
        java.lang.String str14 = compressString0.compressAlternativeApproach("[null]");
        java.lang.String str16 = compressString0.compress("79");
        java.lang.String str18 = compressString0.compressAlternativeApproach("!ih");
        java.lang.String str20 = compressString0.compress("");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[nul2]" + "'", str14.equals("[nul2]"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "7" + "'", str16.equals("7"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "!ih" + "'", str18.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "" + "'", str20.equals(""));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test299");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel1 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST2 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = isBST2.checkRecursive(binarynode_i6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode8 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i6);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth10 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i13 = new java.util.Stack<java.lang.Integer>();
        boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i13, i_array12);
        boolean b15 = stack_i13.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i17 = stack_i13.search((java.lang.Object) sortedArrayToBST16);
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST16.transform(i_array21);
        int i23 = binaryTreeDepth10.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth24 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i27 = new java.util.Stack<java.lang.Integer>();
        boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i27, i_array26);
        boolean b29 = stack_i27.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i31 = stack_i27.search((java.lang.Object) sortedArrayToBST30);
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST30.transform(i_array35);
        int i37 = binaryTreeDepth24.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        int i38 = binaryTreeDepth10.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode39 = binaryTreeByLevel0.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        boolean b40 = binarynode_i36.hasRight();
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertNotNull(list_binaryNode8);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertTrue(i17 == (-1));
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertTrue(i23 == 2);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertTrue(b28 == true);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertTrue(i31 == (-1));
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(i37 == 2);
        org.junit.Assert.assertTrue(i38 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode39);
        org.junit.Assert.assertTrue(b40 == true);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test300");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor1 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals2 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = binarynode_i6.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = binarynode_i11.getRight();
        boolean b14 = binaryTreeEquals2.areEqualsIterative(binarynode_i6, binarynode_i11);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode24 = lowestCommonAncestor1.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i11, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23);
        java.lang.String str25 = binarynode_i23.toString();
        boolean b26 = isBST0.checkIterative(binarynode_i23);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        boolean b31 = binarynode_i30.hasRight();
        java.lang.Integer i32 = binarynode_i30.getData();
        boolean b33 = isBST0.checkRecursive(binarynode_i30);
        com.github.pedrovgs.problem18.IsBST isBST34 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        boolean b39 = isBST34.checkRecursive(binarynode_i38);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals40 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        boolean b45 = binarynode_i44.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST46 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST46.transform(i_array48);
        boolean b50 = binarynode_i49.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = binarynode_i49.getRight();
        boolean b52 = binaryTreeEquals40.areEqualsIterative(binarynode_i44, binarynode_i49);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = binarynode_i44.getLeft();
        boolean b54 = isBST34.checkIterative(binarynode_i44);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals55 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = binarynode_i59.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST61 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = sortedArrayToBST61.transform(i_array63);
        boolean b65 = binarynode_i64.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = binarynode_i64.getRight();
        boolean b67 = binaryTreeEquals55.areEqualsIterative(binarynode_i59, binarynode_i64);
        boolean b68 = isBST34.checkIterative(binarynode_i64);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = null;
        binarynode_i64.setLeft(binarynode_i69);
        boolean b71 = isBST0.checkRecursive(binarynode_i64);
        com.github.pedrovgs.problem18.IsBST isBST72 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST73 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array75 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i76 = sortedArrayToBST73.transform(i_array75);
        boolean b77 = isBST72.checkRecursive(binarynode_i76);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth78 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array80 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i81 = new java.util.Stack<java.lang.Integer>();
        boolean b82 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i81, i_array80);
        boolean b83 = stack_i81.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST84 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i85 = stack_i81.search((java.lang.Object) sortedArrayToBST84);
        java.lang.Integer[] i_array89 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i90 = sortedArrayToBST84.transform(i_array89);
        int i91 = binaryTreeDepth78.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i90);
        binarynode_i76.setRight(binarynode_i90);
        boolean b93 = isBST0.checkRecursive(binarynode_i90);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertNull(binaryNode24);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "BinaryNode{data=100}" + "'", str25.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(b26 == true);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertTrue("'" + i32 + "' != '" + 100 + "'", i32.equals(100));
        org.junit.Assert.assertTrue(b33 == true);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == true);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == false);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertTrue(b50 == false);
        org.junit.Assert.assertNull(binarynode_i51);
        org.junit.Assert.assertTrue(b52 == true);
        org.junit.Assert.assertNull(binarynode_i53);
        org.junit.Assert.assertTrue(b54 == true);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == false);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(binarynode_i64);
        org.junit.Assert.assertTrue(b65 == false);
        org.junit.Assert.assertNull(binarynode_i66);
        org.junit.Assert.assertTrue(b67 == true);
        org.junit.Assert.assertTrue(b68 == true);
        org.junit.Assert.assertTrue(b71 == true);
        org.junit.Assert.assertNotNull(i_array75);
        org.junit.Assert.assertNotNull(binarynode_i76);
        org.junit.Assert.assertTrue(b77 == true);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertTrue(b82 == true);
        org.junit.Assert.assertTrue(b83 == false);
        org.junit.Assert.assertTrue(i85 == (-1));
        org.junit.Assert.assertNotNull(i_array89);
        org.junit.Assert.assertNotNull(binarynode_i90);
        org.junit.Assert.assertTrue(i91 == 2);
        org.junit.Assert.assertTrue(b93 == false);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test301");
        com.github.pedrovgs.problem33.SimpleRegularExpression simpleRegularExpression0 = new com.github.pedrovgs.problem33.SimpleRegularExpression();
        boolean b3 = simpleRegularExpression0.evaluate("[0, 1, 1, -1]", "10010###");
        boolean b6 = simpleRegularExpression0.evaluate("/10/100/[/", "3");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test302");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        stack2_0.trimToSize();
        java.util.Iterator<java.lang.Integer> iterator_i4 = stack2_0.iterator();
        try {
            java.lang.Integer i6 = stack2_0.remove((-52));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(iterator_i4);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test303");
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding0 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i3 = subtractAdding0.subtract((int) (short) 0, (int) '4');
        int i6 = subtractAdding0.subtract((int) (byte) 10, (-97));
        int i9 = subtractAdding0.subtract((int) (short) 0, 2);
        int i12 = subtractAdding0.subtract(101, 29);
        int i15 = subtractAdding0.subtract(10, 2147483647);
        int i18 = subtractAdding0.subtract(11427, (int) (short) 1);
        int i21 = subtractAdding0.subtract(107, (-2147483637));
        org.junit.Assert.assertTrue(i3 == (-52));
        org.junit.Assert.assertTrue(i6 == 107);
        org.junit.Assert.assertTrue(i9 == (-2));
        org.junit.Assert.assertTrue(i12 == 72);
        org.junit.Assert.assertTrue(i15 == (-2147483637));
        org.junit.Assert.assertTrue(i18 == 11426);
        org.junit.Assert.assertTrue(i21 == (-2147483552));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test304");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i5.trimToSize();
        vector_i5.ensureCapacity(21);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test305");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i5.trimToSize();
        vector_i5.add((int) (short) 0, (java.lang.Integer) 0);
        java.util.stream.Stream<java.lang.Integer> stream_i14 = vector_i5.stream();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = vector_i5.removeElement((java.lang.Object) sortedArrayToBST15);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates20 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        java.lang.Integer[] i_array25 = removeDuplicates20.removeUsingSorting(i_array23);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates26 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        java.lang.Integer[] i_array31 = removeDuplicates26.removeUsingSorting(i_array29);
        java.lang.Integer[] i_array32 = removeDuplicates20.removeUsingSorting(i_array29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST15.transform(i_array29);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates34 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i37 = new java.util.Stack<java.lang.Integer>();
        boolean b38 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i37, i_array36);
        boolean b39 = stack_i37.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i41 = stack_i37.search((java.lang.Object) sortedArrayToBST40);
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST40.transform(i_array45);
        java.lang.Integer[] i_array47 = removeDuplicates34.removeUsingSet(i_array45);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = sortedArrayToBST15.transform(i_array47);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertNotNull(stream_i14);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertTrue(b38 == true);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertTrue(i41 == (-1));
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(binarynode_i48);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test306");
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode0 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode12 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays14);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers19 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b20 = listnode_mergeSortedArrays18.equals((java.lang.Object) mergeBinaryNumbers19);
        deleteListNode12.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i22 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements24 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList25 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays26);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = listnode_mergeSortedArrays27.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = listnode_mergeSortedArrays27.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = null;
        binarynode_i31.setRight(binarynode_i32);
        boolean b34 = listnode_mergeSortedArrays27.equals((java.lang.Object) binarynode_i32);
        com.github.pedrovgs.linkedlist.ListNode listNode35 = reverseLinkedList25.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays27);
        removeListDuplicatedElements24.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements24);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList38 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements39 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList40 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        java.lang.String str43 = listnode_mergeSortedArrays42.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode44 = reverseLinkedList40.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        removeListDuplicatedElements39.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = getTheElementInTheMiddleOfTheList38.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        removeListDuplicatedElements24.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        deleteListNode0.delete(listNode44);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList49 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays50 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays50);
        java.lang.String str52 = listnode_mergeSortedArrays51.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i53 = reverseLinkedList49.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays51);
        deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays51);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(listnode_i22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays28);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays29);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(listNode35);
        org.junit.Assert.assertNotNull(listNode44);
        org.junit.Assert.assertNotNull(listnode_i46);
        org.junit.Assert.assertNotNull(listnode_i53);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test307");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i5.trimToSize();
        vector_i5.add((int) (short) 0, (java.lang.Integer) 0);
        java.util.stream.Stream<java.lang.Integer> stream_i14 = vector_i5.stream();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = vector_i5.removeElement((java.lang.Object) sortedArrayToBST15);
        java.util.ListIterator<java.lang.Integer> listiterator_i20 = vector_i5.listIterator();
        java.util.Spliterator<java.lang.Integer> spliterator_i21 = vector_i5.spliterator();
        try {
            java.lang.Integer i24 = vector_i5.set(29, (java.lang.Integer) 14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertNotNull(stream_i14);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listiterator_i20);
        org.junit.Assert.assertNotNull(spliterator_i21);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test308");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        java.lang.Object obj5 = stack_i2.clone();
        int i6 = stack_i2.capacity();
        stack_i2.removeAllElements();
        try {
            java.lang.Integer i8 = stack_i2.lastElement();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException");
        } catch (java.util.NoSuchElementException e) {
        }
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(i6 == 10);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test309");
        com.github.pedrovgs.problem27.ReverseSentence reverseSentence0 = new com.github.pedrovgs.problem27.ReverseSentence();
        java.lang.String str2 = reverseSentence0.reverse("BinaryNode{data=18}");
        java.lang.String str4 = reverseSentence0.reverse("");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "BinaryNode{data=18}" + "'", str2.equals("BinaryNode{data=18}"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "" + "'", str4.equals(""));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test310");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        vector_i4.setSize(10);
        com.github.pedrovgs.problem32.Contains contains15 = new com.github.pedrovgs.problem32.Contains();
        boolean b18 = contains15.evaluate("", "/");
        int i19 = vector_i4.indexOf((java.lang.Object) b18);
        vector_i4.clear();
        try {
            vector_i4.add((-1507336), (java.lang.Integer) (-1507336));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertTrue(i19 == (-1));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test311");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Integer i3 = stack2_0.peek();
        java.lang.Integer i4 = stack2_0.pop();
        stack2_0.push(100);
        java.lang.Integer i7 = stack2_0.pop();
        stack2_0.push((-78));
        org.junit.Assert.assertTrue("'" + i3 + "' != '" + (-1) + "'", i3.equals((-1)));
        org.junit.Assert.assertTrue("'" + i4 + "' != '" + (-1) + "'", i4.equals((-1)));
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test312");
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers0 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        int i5 = mergeBinaryNumbers0.merge((int) (byte) 10, (-52000), 2147483647, (-52));
        int i10 = mergeBinaryNumbers0.merge(29, 107, 52, (int) (short) 1);
        int i15 = mergeBinaryNumbers0.merge(3, (-52), 18, 3628800);
        com.github.pedrovgs.problem25.Anagrams anagrams16 = new com.github.pedrovgs.problem25.Anagrams();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem67.MergeBinaryNumbers, com.github.pedrovgs.problem25.Anagrams> pair_mergeBinaryNumbers_anagrams17 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem67.MergeBinaryNumbers, com.github.pedrovgs.problem25.Anagrams>(mergeBinaryNumbers0, anagrams16);
        java.util.List<java.lang.String> list_str19 = anagrams16.get("/10/100/[/");
        org.junit.Assert.assertTrue(i5 == 10);
        org.junit.Assert.assertTrue(i10 == 112197661);
        org.junit.Assert.assertTrue(i15 == (-13631485));
        org.junit.Assert.assertNotNull(list_str19);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test313");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseIterative("[-1, 10]");
        java.lang.String str4 = reverseString0.reverseIterative("-");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]01 ,1-[" + "'", str2.equals("]01 ,1-["));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "-" + "'", str4.equals("-"));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test314");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseIterative("1");
        java.lang.String str8 = reverseString0.reverseIterative("/!ih/");
        java.lang.String str10 = reverseString0.reverseIterative("10] [-1,");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1" + "'", str6.equals("1"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!/" + "'", str8.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + ",1-[ ]01" + "'", str10.equals(",1-[ ]01"));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test315");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative(34, 22);
        org.junit.Assert.assertTrue(f3 == 1.5454545f);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test316");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        boolean b9 = vector_i4.add((java.lang.Integer) 10);
        boolean b11 = vector_i4.remove((java.lang.Object) 10L);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList12 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements13 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        java.lang.String str17 = listnode_mergeSortedArrays16.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode18 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        removeListDuplicatedElements13.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i20 = getTheElementInTheMiddleOfTheList12.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode18);
        boolean b21 = vector_i4.contains((java.lang.Object) listnode_i20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.problem62.PalindromeList palindromeList29 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i34 = reverseLinkedList30.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        boolean b35 = palindromeList29.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = listnode_mergeSortedArrays37.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = listnode_mergeSortedArrays37.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = null;
        binarynode_i41.setRight(binarynode_i42);
        boolean b44 = listnode_mergeSortedArrays37.equals((java.lang.Object) binarynode_i42);
        listnode_mergeSortedArrays32.setNext(listnode_mergeSortedArrays37);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = listnode_mergeSortedArrays37.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements47 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList48 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = listnode_mergeSortedArrays50.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays52 = listnode_mergeSortedArrays50.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = null;
        binarynode_i54.setRight(binarynode_i55);
        boolean b57 = listnode_mergeSortedArrays50.equals((java.lang.Object) binarynode_i55);
        com.github.pedrovgs.linkedlist.ListNode listNode58 = reverseLinkedList48.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        removeListDuplicatedElements47.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode58);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements60 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements47);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList61 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements62 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList63 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays64 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays64);
        java.lang.String str66 = listnode_mergeSortedArrays65.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode67 = reverseLinkedList63.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays65);
        removeListDuplicatedElements62.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i69 = getTheElementInTheMiddleOfTheList61.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        removeListDuplicatedElements47.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        listnode_mergeSortedArrays37.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode67);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        boolean b73 = vector_i4.equals((java.lang.Object) listNode67);
        boolean b75 = vector_i4.add((java.lang.Integer) 2147483647);
        com.github.pedrovgs.problem56.IsRotationUsingIsSubstring isRotationUsingIsSubstring76 = new com.github.pedrovgs.problem56.IsRotationUsingIsSubstring();
        boolean b79 = isRotationUsingIsSubstring76.check("hi!", "");
        boolean b80 = vector_i4.equals((java.lang.Object) b79);
        java.lang.Object obj81 = vector_i4.clone();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(listNode18);
        org.junit.Assert.assertNotNull(listnode_i20);
        org.junit.Assert.assertTrue(b21 == false);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNotNull(listnode_i34);
        org.junit.Assert.assertTrue(b35 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays38);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays39);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays46);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays51);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays52);
        org.junit.Assert.assertTrue(b57 == false);
        org.junit.Assert.assertNotNull(listNode58);
        org.junit.Assert.assertNotNull(listNode67);
        org.junit.Assert.assertNotNull(listnode_i69);
        org.junit.Assert.assertTrue(b73 == false);
        org.junit.Assert.assertTrue(b75 == true);
        org.junit.Assert.assertTrue(b79 == false);
        org.junit.Assert.assertTrue(b80 == false);
        org.junit.Assert.assertNotNull(obj81);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test317");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test318");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("10");
        boolean b6 = palindromes0.evaluate("/23/[/#2021/");
        boolean b8 = palindromes0.evaluate("/!ih");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test319");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i5.trimToSize();
        vector_i5.add((int) (short) 0, (java.lang.Integer) 0);
        try {
            vector_i5.setElementAt((java.lang.Integer) 13562, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test320");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = null;
        binarynode_i6.setRight(binarynode_i7);
        boolean b9 = listnode_mergeSortedArrays2.equals((java.lang.Object) binarynode_i7);
        com.github.pedrovgs.linkedlist.ListNode listNode10 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList11 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        java.lang.String str14 = listnode_mergeSortedArrays13.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i15 = reverseLinkedList11.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays13);
        com.github.pedrovgs.problem62.PalindromeList palindromeList16 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList17 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        java.lang.String str20 = listnode_mergeSortedArrays19.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i21 = reverseLinkedList17.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        boolean b22 = palindromeList16.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays19.getNext();
        listnode_mergeSortedArrays13.setNext(listnode_mergeSortedArrays19);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i25 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList26 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays27);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = listnode_mergeSortedArrays28.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = listnode_mergeSortedArrays28.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = null;
        binarynode_i32.setRight(binarynode_i33);
        boolean b35 = listnode_mergeSortedArrays28.equals((java.lang.Object) binarynode_i33);
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList26.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays28);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode37 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        java.lang.String str40 = listnode_mergeSortedArrays39.toString();
        deleteListNode37.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays39);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays42 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays42);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers44 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b45 = listnode_mergeSortedArrays43.equals((java.lang.Object) mergeBinaryNumbers44);
        deleteListNode37.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays43);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i47 = reverseLinkedList26.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays43);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers50 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b51 = listnode_mergeSortedArrays49.equals((java.lang.Object) mergeBinaryNumbers50);
        com.github.pedrovgs.linkedlist.ListNode listNode52 = reverseLinkedList26.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays49);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel53 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel54 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST55 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = isBST55.checkRecursive(binarynode_i59);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode61 = binaryTreeByLevel54.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode62 = binaryTreeByLevel53.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth63 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i66 = new java.util.Stack<java.lang.Integer>();
        boolean b67 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i66, i_array65);
        boolean b68 = stack_i66.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST69 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i70 = stack_i66.search((java.lang.Object) sortedArrayToBST69);
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST69.transform(i_array74);
        int i76 = binaryTreeDepth63.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth77 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i80 = new java.util.Stack<java.lang.Integer>();
        boolean b81 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i80, i_array79);
        boolean b82 = stack_i80.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST83 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i84 = stack_i80.search((java.lang.Object) sortedArrayToBST83);
        java.lang.Integer[] i_array88 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i89 = sortedArrayToBST83.transform(i_array88);
        int i90 = binaryTreeDepth77.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i89);
        int i91 = binaryTreeDepth63.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i89);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode92 = binaryTreeByLevel53.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i89);
        boolean b93 = listNode52.equals((java.lang.Object) binaryTreeByLevel53);
        com.github.pedrovgs.linkedlist.ListNode listNode94 = reverseLinkedList0.reverseIterative(listNode52);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNotNull(listNode10);
        org.junit.Assert.assertNotNull(listnode_i15);
        org.junit.Assert.assertNotNull(listnode_i21);
        org.junit.Assert.assertTrue(b22 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertNotNull(listnode_i25);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays29);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays30);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertTrue(b45 == false);
        org.junit.Assert.assertNotNull(listnode_i47);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(listNode52);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == true);
        org.junit.Assert.assertNotNull(list_binaryNode61);
        org.junit.Assert.assertNotNull(list_binaryNode62);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertTrue(b67 == true);
        org.junit.Assert.assertTrue(b68 == false);
        org.junit.Assert.assertTrue(i70 == (-1));
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertTrue(i76 == 2);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertTrue(b81 == true);
        org.junit.Assert.assertTrue(b82 == false);
        org.junit.Assert.assertTrue(i84 == (-1));
        org.junit.Assert.assertNotNull(i_array88);
        org.junit.Assert.assertNotNull(binarynode_i89);
        org.junit.Assert.assertTrue(i90 == 2);
        org.junit.Assert.assertTrue(i91 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode92);
        org.junit.Assert.assertTrue(b93 == false);
        org.junit.Assert.assertNotNull(listNode94);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test321");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) (byte) 1);
        int i8 = bitsCounter0.countBitsToOneBasedOnString(101);
        int i10 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(32);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((-24));
        int i14 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((-2));
        int i16 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(475165);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 4);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == 0);
        org.junit.Assert.assertTrue(i14 == 0);
        org.junit.Assert.assertTrue(i16 == 8);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test322");
        com.github.pedrovgs.problem47.ReturnChange returnChange0 = new com.github.pedrovgs.problem47.ReturnChange();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem47.ReturnChange> listnode_returnChange1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem47.ReturnChange>(returnChange0);
        com.github.pedrovgs.problem80.QuickSort quickSort2 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort4 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray5 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array8 = new int[] { (byte) 1, (byte) 10 };
        splitArray5.splitSwappingPartition(i_array8);
        selectionSort4.sort(i_array8);
        com.github.pedrovgs.problem8.SplitArray splitArray11 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array14 = new int[] { (byte) 1, (byte) 10 };
        splitArray11.splitSwappingPartition(i_array14);
        int[] i_array22 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray11.splitSwappingRecursive(i_array22);
        int[] i_array24 = mergeSortedArrays3.merge(i_array8, i_array22);
        quickSort2.sort(i_array8);
        com.github.pedrovgs.problem25.Anagrams anagrams26 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str28 = anagrams26.get("hi!");
        java.util.List<java.lang.String> list_str30 = anagrams26.get("/");
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array31 = new com.github.pedrovgs.problem25.Anagrams[] { anagrams26 };
        com.github.pedrovgs.problem28.FindSums findSums32 = new com.github.pedrovgs.problem28.FindSums();
        com.github.pedrovgs.problem8.SplitArray splitArray33 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray34 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array37 = new int[] { (byte) 1, (byte) 10 };
        splitArray34.splitSwappingPartition(i_array37);
        splitArray33.splitSwappingRecursive(i_array37);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i41 = findSums32.find(i_array37, 0);
        int[] i_array43 = new int[] { 7 };
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i45 = findSums32.findLinearComplexityOrder(i_array43, 2147483647);
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem25.Anagrams[], com.github.pedrovgs.problem28.FindSums> pair_anagrams_array_findSums46 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem25.Anagrams[], com.github.pedrovgs.problem28.FindSums>(anagrams_array31, findSums32);
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray47 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem8.SplitArray splitArray48 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray49 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array52 = new int[] { (byte) 1, (byte) 10 };
        splitArray49.splitSwappingPartition(i_array52);
        splitArray48.splitSwappingRecursive(i_array52);
        moveZerosInArray47.moveSorting(i_array52);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i57 = findSums32.findLinearComplexityOrder(i_array52, (int) '4');
        quickSort2.sort(i_array52);
        try {
            java.util.List<java.lang.Integer> list_i60 = returnChange0.calculate(i_array52, (-2147483637));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(list_str28);
        org.junit.Assert.assertNotNull(list_str30);
        org.junit.Assert.assertNotNull(anagrams_array31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(list_pair_i_i41);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(list_pair_i_i45);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(list_pair_i_i57);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test323");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate(270, (-52));
        int i6 = multiplicationWithoutMultiply0.calculate((int) (byte) 10, (-8));
        int i9 = multiplicationWithoutMultiply0.calculate(1484783616, 52);
        int i12 = multiplicationWithoutMultiply0.calculate((-5200), (int) (short) 0);
        org.junit.Assert.assertTrue(i3 == (-14040));
        org.junit.Assert.assertTrue(i6 == (-80));
        org.junit.Assert.assertTrue(i9 == (-100663296));
        org.junit.Assert.assertTrue(i12 == 0);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test324");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compress("[]");
        java.lang.String str8 = compressString0.compress("/hi!/");
        java.lang.String str10 = compressString0.compressAlternativeApproach("[]");
        java.lang.String str12 = compressString0.compress("/!ih/");
        java.lang.String str14 = compressString0.compressAlternativeApproach("[null]");
        java.lang.String str16 = compressString0.compressRecursive("/23/[/##001/");
        java.lang.String str18 = compressString0.compressRecursive(",0[/01/ ,1 ,1 /[-1]/]1-[/]1-");
        java.lang.String str20 = compressString0.compressAlternativeApproach("25-");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[" + "'", str6.equals("["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!" + "'", str8.equals("/hi!"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[]" + "'", str10.equals("[]"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "/!ih" + "'", str12.equals("/!ih"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[nul2]" + "'", str14.equals("[nul2]"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "/23/[/#2021/" + "'", str16.equals("/23/[/#2021/"));
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + ",0[/01/ ,1 ,1 /[-1]/]1-[/]1-" + "'", str18.equals(",0[/01/ ,1 ,1 /[-1]/]1-[/]1-"));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "25-" + "'", str20.equals("25-"));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test325");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        boolean b8 = vector_i5.remove((java.lang.Object) (short) -1);
        int i10 = vector_i5.indexOf((java.lang.Object) 1);
        int i12 = vector_i5.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj13 = vector_i5.clone();
        java.lang.Object obj14 = null;
        int i15 = vector_i5.lastIndexOf(obj14);
        int i17 = stack2_0.indexOf(obj14, 0);
        stack2_0.push((-5200));
        stack2_0.removeAllElements();
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == (-1));
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue(i15 == (-1));
        org.junit.Assert.assertTrue(i17 == (-1));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test326");
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays0 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays0);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers2 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b3 = listnode_mergeSortedArrays1.equals((java.lang.Object) mergeBinaryNumbers2);
        int i8 = mergeBinaryNumbers2.merge((int) (short) 10, (int) (byte) 0, 107, 107);
        int i13 = mergeBinaryNumbers2.merge(245366856, 4956, (-7), (int) (short) 100);
        int i18 = mergeBinaryNumbers2.merge((-1241513984), (-52), 78, 0);
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(i8 == 10);
        org.junit.Assert.assertTrue(i13 == (-1096810424));
        org.junit.Assert.assertTrue(i18 == (-851968));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test327");
        com.github.pedrovgs.problem7.FibonacciNumbers fibonacciNumbers0 = new com.github.pedrovgs.problem7.FibonacciNumbers();
        long long2 = fibonacciNumbers0.getIterative((long) 10);
        long long4 = fibonacciNumbers0.getRecursiveWithCaching((int) (byte) 100);
        long long6 = fibonacciNumbers0.getIterative((long) 24);
        try {
            long long8 = fibonacciNumbers0.getIterative((long) (-1507336));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(long2 == 55L);
        org.junit.Assert.assertTrue(long4 == 3736710778780434371L);
        org.junit.Assert.assertTrue(long6 == 46368L);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test328");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements1 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array5 = multiplyArrayElements1.multiply(i_array4);
        splitArray0.splitSwappingPartition(i_array4);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral7 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array8 = new int[][] {};
        int[] i_array9 = goThroughMatrixInSpiral7.go(i_array_array8);
        splitArray0.splitSwappingPartition(i_array9);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral11 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array12 = new int[][] {};
        int[] i_array13 = goThroughMatrixInSpiral11.go(i_array_array12);
        int[] i_array20 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array27 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array28 = new int[][] { i_array20, i_array27 };
        int[] i_array29 = goThroughMatrixInSpiral11.go(i_array_array28);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral30 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array31 = new int[][] {};
        int[] i_array32 = goThroughMatrixInSpiral30.go(i_array_array31);
        int[] i_array39 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array46 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array47 = new int[][] { i_array39, i_array46 };
        int[] i_array48 = goThroughMatrixInSpiral30.go(i_array_array47);
        int[] i_array49 = goThroughMatrixInSpiral11.go(i_array_array47);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros50 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral51 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array52 = new int[][] {};
        int[] i_array53 = goThroughMatrixInSpiral51.go(i_array_array52);
        int[] i_array56 = new int[] { 107, 3628800 };
        int[][] i_array_array57 = new int[][] { i_array56 };
        int[] i_array58 = goThroughMatrixInSpiral51.go(i_array_array57);
        rewriteRowAndColumnsWithZeros50.rewrite(i_array_array57);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral60 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array61 = new int[][] {};
        int[] i_array62 = goThroughMatrixInSpiral60.go(i_array_array61);
        int[] i_array65 = new int[] { 107, 3628800 };
        int[][] i_array_array66 = new int[][] { i_array65 };
        int[] i_array67 = goThroughMatrixInSpiral60.go(i_array_array66);
        rewriteRowAndColumnsWithZeros50.rewrite(i_array_array66);
        int[] i_array69 = goThroughMatrixInSpiral11.go(i_array_array66);
        splitArray0.splitSwappingIterative(i_array69);
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array_array28);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array_array31);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(i_array_array47);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(i_array_array52);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array_array57);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array_array61);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(i_array_array66);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array69);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test329");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseIterative("1");
        java.lang.String str8 = reverseString0.reverseRecursive("/");
        java.lang.String str10 = reverseString0.reverseIterative("/32/-52/7/");
        java.lang.String str12 = reverseString0.reverseIterative("BinaryNode{data=18}");
        java.lang.String str14 = reverseString0.reverseIterative("}81=atad{edoNyraniB");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1" + "'", str6.equals("1"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/" + "'", str8.equals("/"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "/7/25-/23/" + "'", str10.equals("/7/25-/23/"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "}81=atad{edoNyraniB" + "'", str12.equals("}81=atad{edoNyraniB"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "BinaryNode{data=18}" + "'", str14.equals("BinaryNode{data=18}"));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test330");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        java.lang.Integer i11 = vector_i5.get((int) (short) 1);
        java.util.Spliterator<java.lang.Integer> spliterator_i12 = vector_i5.spliterator();
        try {
            java.lang.Integer i14 = vector_i5.get(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertTrue("'" + i11 + "' != '" + (-1) + "'", i11.equals((-1)));
        org.junit.Assert.assertNotNull(spliterator_i12);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test331");
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros0 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem42.FloodFill floodFill2 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral3 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array4 = new int[][] {};
        int[] i_array5 = goThroughMatrixInSpiral3.go(i_array_array4);
        floodFill2.apply(i_array_array4, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral11 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array12 = new int[][] {};
        int[] i_array13 = goThroughMatrixInSpiral11.go(i_array_array12);
        int[] i_array20 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array27 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array28 = new int[][] { i_array20, i_array27 };
        int[] i_array29 = goThroughMatrixInSpiral11.go(i_array_array28);
        floodFill2.apply(i_array_array28, (-8), (-14040), 2147483647, (-8));
        int[] i_array35 = goThroughMatrixInSpiral1.go(i_array_array28);
        rewriteRowAndColumnsWithZeros0.rewrite(i_array_array28);
        org.junit.Assert.assertNotNull(i_array_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array_array28);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array35);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test332");
        com.github.pedrovgs.problem79.MergeSort mergeSort0 = new com.github.pedrovgs.problem79.MergeSort();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.problem8.SplitArray splitArray4 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array7 = new int[] { (byte) 1, (byte) 10 };
        splitArray4.splitSwappingPartition(i_array7);
        int[] i_array15 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray4.splitSwappingRecursive(i_array15);
        com.github.pedrovgs.problem8.SplitArray splitArray17 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array20 = new int[] { (byte) 1, (byte) 10 };
        splitArray17.splitSwappingPartition(i_array20);
        int[] i_array28 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray17.splitSwappingRecursive(i_array28);
        int[] i_array30 = mergeSortedArrays2.merge(i_array15, i_array28);
        splitArray1.splitSwappingIterative(i_array28);
        com.github.pedrovgs.problem75.SelectionSort selectionSort32 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray33 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array36 = new int[] { (byte) 1, (byte) 10 };
        splitArray33.splitSwappingPartition(i_array36);
        selectionSort32.sort(i_array36);
        com.github.pedrovgs.problem76.InsertionSort insertionSort39 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray40 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        com.github.pedrovgs.problem8.SplitArray splitArray43 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array46 = new int[] { (byte) 1, (byte) 10 };
        splitArray43.splitSwappingPartition(i_array46);
        int[] i_array54 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray43.splitSwappingRecursive(i_array54);
        com.github.pedrovgs.problem8.SplitArray splitArray56 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array59 = new int[] { (byte) 1, (byte) 10 };
        splitArray56.splitSwappingPartition(i_array59);
        int[] i_array67 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray56.splitSwappingRecursive(i_array67);
        int[] i_array69 = mergeSortedArrays41.merge(i_array54, i_array67);
        splitArray40.splitSwappingIterative(i_array67);
        insertionSort39.sort(i_array67);
        selectionSort32.sort(i_array67);
        com.github.pedrovgs.problem8.SplitArray splitArray73 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray74 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array77 = new int[] { (byte) 1, (byte) 10 };
        splitArray74.splitSwappingPartition(i_array77);
        splitArray73.splitSwappingRecursive(i_array77);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral80 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array81 = new int[][] {};
        int[] i_array82 = goThroughMatrixInSpiral80.go(i_array_array81);
        splitArray73.splitSwappingRecursive(i_array82);
        selectionSort32.sort(i_array82);
        splitArray1.splitSwappingPartition(i_array82);
        mergeSort0.sort(i_array82);
        com.github.pedrovgs.problem8.SplitArray splitArray87 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements88 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral89 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array90 = new int[][] {};
        int[] i_array91 = goThroughMatrixInSpiral89.go(i_array_array90);
        int[] i_array92 = multiplyArrayElements88.multiply(i_array91);
        splitArray87.splitSwappingPartition(i_array91);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral94 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array95 = new int[][] {};
        int[] i_array96 = goThroughMatrixInSpiral94.go(i_array_array95);
        splitArray87.splitSwappingPartition(i_array96);
        mergeSort0.sort(i_array96);
        com.github.pedrovgs.problem2.Vector vector99 = new com.github.pedrovgs.problem2.Vector(i_array96);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertNotNull(i_array_array81);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(i_array_array90);
        org.junit.Assert.assertNotNull(i_array91);
        org.junit.Assert.assertNotNull(i_array92);
        org.junit.Assert.assertNotNull(i_array_array95);
        org.junit.Assert.assertNotNull(i_array96);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test333");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.ensureCapacity((int) (short) 100);
        boolean b3 = stack2_0.empty();
        stack2_0.ensureCapacity((-14040));
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction6 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f9 = divideUsingSubtraction6.divideRecursive(29, 4);
        float f12 = divideUsingSubtraction6.divideRecursive(107, (-1241513984));
        int i13 = stack2_0.search((java.lang.Object) divideUsingSubtraction6);
        java.util.Spliterator<java.lang.Integer> spliterator_i14 = stack2_0.spliterator();
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(f9 == 7.25f);
        org.junit.Assert.assertTrue(f12 == 3.4594593f);
        org.junit.Assert.assertTrue(i13 == (-1));
        org.junit.Assert.assertNotNull(spliterator_i14);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test334");
        com.github.pedrovgs.problem18.IsBST isBST0 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        boolean b5 = isBST0.checkRecursive(binarynode_i4);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals6 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = binarynode_i15.getRight();
        boolean b18 = binaryTreeEquals6.areEqualsIterative(binarynode_i10, binarynode_i15);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i10.getLeft();
        boolean b20 = isBST0.checkIterative(binarynode_i10);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian21 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d24 = avlTreeMedian21.find(binarynode_i23);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor25 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals26 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        boolean b31 = binarynode_i30.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        boolean b38 = binaryTreeEquals26.areEqualsIterative(binarynode_i30, binarynode_i35);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST39 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array41 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i42 = sortedArrayToBST39.transform(i_array41);
        boolean b43 = binarynode_i42.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST44 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array46 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = sortedArrayToBST44.transform(i_array46);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode48 = lowestCommonAncestor25.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i42, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i47);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = binarynode_i35.getLeft();
        double d50 = avlTreeMedian21.find(binarynode_i35);
        boolean b51 = isBST0.checkRecursive(binarynode_i35);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = binarynode_i35.getLeft();
        try {
            com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = binarynode_i52.getRight();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == true);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertTrue(d24 == 10.0d);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == true);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(binarynode_i42);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(binarynode_i47);
        org.junit.Assert.assertNull(binaryNode48);
        org.junit.Assert.assertNull(binarynode_i49);
        org.junit.Assert.assertTrue(d50 == 100.0d);
        org.junit.Assert.assertTrue(b51 == true);
        org.junit.Assert.assertNull(binarynode_i52);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test335");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getRecursive(0);
        int i8 = factorial0.getIterative(3);
        try {
            int i10 = factorial0.getTailRecursive((-2147483552));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 6);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test336");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode11);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements0);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList14 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = null;
        binarynode_i20.setRight(binarynode_i21);
        boolean b23 = listnode_mergeSortedArrays16.equals((java.lang.Object) binarynode_i21);
        com.github.pedrovgs.linkedlist.ListNode listNode24 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode25 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays26);
        java.lang.String str28 = listnode_mergeSortedArrays27.toString();
        deleteListNode25.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays27);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays30);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers32 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b33 = listnode_mergeSortedArrays31.equals((java.lang.Object) mergeBinaryNumbers32);
        deleteListNode25.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i35 = reverseLinkedList14.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers38 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b39 = listnode_mergeSortedArrays37.equals((java.lang.Object) mergeBinaryNumbers38);
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList14.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList43 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays44 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays44);
        java.lang.String str46 = listnode_mergeSortedArrays45.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList43.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays45);
        com.github.pedrovgs.problem18.IsBST isBST48 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        boolean b53 = isBST48.checkRecursive(binarynode_i52);
        boolean b54 = listNode47.equals((java.lang.Object) binarynode_i52);
        com.github.pedrovgs.linkedlist.ListNode listNode55 = reverseLinkedList42.reverseIterative(listNode47);
        listNode40.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode55);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(listNode24);
        org.junit.Assert.assertTrue(b33 == false);
        org.junit.Assert.assertNotNull(listnode_i35);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue(b53 == true);
        org.junit.Assert.assertTrue(b54 == false);
        org.junit.Assert.assertNotNull(listNode55);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test337");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel8 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder9 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor10 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals11 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST17 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array19 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = sortedArrayToBST17.transform(i_array19);
        boolean b21 = binarynode_i20.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = binarynode_i20.getRight();
        boolean b23 = binaryTreeEquals11.areEqualsIterative(binarynode_i15, binarynode_i20);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST24 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST24.transform(i_array26);
        boolean b28 = binarynode_i27.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST29 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array31 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = sortedArrayToBST29.transform(i_array31);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode33 = lowestCommonAncestor10.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i20, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i32);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode34 = binaryTreePreOrder9.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder35 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian36 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d39 = avlTreeMedian36.find(binarynode_i38);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode40 = binaryTreePreOrder35.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38);
        com.github.pedrovgs.problem18.IsBST isBST41 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        boolean b46 = isBST41.checkRecursive(binarynode_i45);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode47 = binaryTreePreOrder35.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode48 = binaryTreePreOrder9.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode49 = treeToListByLevel8.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode50 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == false);
        org.junit.Assert.assertNull(binarynode_i22);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertTrue(b28 == false);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(binarynode_i32);
        org.junit.Assert.assertNull(binaryNode33);
        org.junit.Assert.assertNotNull(list_binaryNode34);
        org.junit.Assert.assertTrue(d39 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode40);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == true);
        org.junit.Assert.assertNotNull(list_binaryNode47);
        org.junit.Assert.assertNotNull(list_binaryNode48);
        org.junit.Assert.assertNotNull(list_binaryNode49);
        org.junit.Assert.assertNotNull(list_binaryNode50);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test338");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressRecursive("-1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "-1" + "'", str4.equals("-1"));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test339");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersCheating("100", "/BinaryNode{data=10}/10/]1-[/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test340");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        int i3 = stack2_0.capacity();
        java.util.Iterator<java.lang.Integer> iterator_i4 = stack2_0.iterator();
        java.lang.Object[] obj_array5 = stack2_0.toArray();
        stack2_0.trimToSize();
        boolean b7 = stack2_0.empty();
        org.junit.Assert.assertTrue(i3 == 10);
        org.junit.Assert.assertNotNull(iterator_i4);
        org.junit.Assert.assertNotNull(obj_array5);
        org.junit.Assert.assertTrue(b7 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test341");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate(270, (-52));
        int i6 = multiplicationWithoutMultiply0.calculate((int) (byte) 10, (-8));
        int i9 = multiplicationWithoutMultiply0.calculate(34, 71);
        int i12 = multiplicationWithoutMultiply0.calculate(2147483620, 14);
        org.junit.Assert.assertTrue(i3 == (-14040));
        org.junit.Assert.assertTrue(i6 == (-80));
        org.junit.Assert.assertTrue(i9 == 2414);
        org.junit.Assert.assertTrue(i12 == (-392));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test342");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Object[] obj_array3 = stack2_0.toArray();
        org.junit.Assert.assertNotNull(obj_array3);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test343");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        int i3 = stack2_0.capacity();
        java.lang.Integer i4 = stack2_0.pop();
        org.junit.Assert.assertTrue(i3 == 10);
        org.junit.Assert.assertTrue("'" + i4 + "' != '" + 100 + "'", i4.equals(100));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test344");
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 0, 0 };
        java.util.Vector<java.lang.Integer> vector_i3 = new java.util.Vector<java.lang.Integer>();
        boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i3, i_array2);
        java.lang.Object obj5 = vector_i3.clone();
        int i6 = vector_i3.size();
        java.lang.Integer i7 = vector_i3.firstElement();
        boolean b8 = vector_i3.isEmpty();
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(i6 == 2);
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 0 + "'", i7.equals(0));
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test345");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        boolean b12 = binaryTreeEquals0.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced13 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem75.SelectionSort selectionSort14 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort> pair_isTreeBalanced_selectionSort15 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort>(isTreeBalanced13, selectionSort14);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array18 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = sortedArrayToBST16.transform(i_array18);
        boolean b20 = isTreeBalanced13.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i19);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel21 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel22 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST23 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST24 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST24.transform(i_array26);
        boolean b28 = isBST23.checkRecursive(binarynode_i27);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode29 = binaryTreeByLevel22.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode30 = binaryTreeByLevel21.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i36 = new java.util.Vector<java.lang.Integer>();
        boolean b37 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i36, i_array35);
        int i40 = vector_i36.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i36.trimToSize();
        vector_i36.add((int) (short) 0, (java.lang.Integer) 0);
        java.util.stream.Stream<java.lang.Integer> stream_i45 = vector_i36.stream();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST46 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array48 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = sortedArrayToBST46.transform(i_array48);
        boolean b50 = vector_i36.removeElement((java.lang.Object) sortedArrayToBST46);
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem24.SortedArrayToBST> binarynode_sortedArrayToBST51 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem24.SortedArrayToBST>(sortedArrayToBST46);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode52 = binaryTreeByLevel21.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_sortedArrayToBST51);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor53 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals54 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST55 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array57 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = sortedArrayToBST55.transform(i_array57);
        boolean b59 = binarynode_i58.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST60 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST60.transform(i_array62);
        boolean b64 = binarynode_i63.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = binarynode_i63.getRight();
        boolean b66 = binaryTreeEquals54.areEqualsIterative(binarynode_i58, binarynode_i63);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST67.transform(i_array69);
        boolean b71 = binarynode_i70.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode76 = lowestCommonAncestor53.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i63, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i70, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        java.lang.Integer i77 = binarynode_i70.getData();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode78 = binaryTreeByLevel21.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i70);
        boolean b79 = binaryTreeEquals0.areEqualsIterative(binarynode_i19, binarynode_i70);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST80 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array82 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i83 = sortedArrayToBST80.transform(i_array82);
        boolean b84 = binarynode_i83.hasRight();
        java.lang.Integer i85 = binarynode_i83.getData();
        boolean b86 = binarynode_i83.hasRight();
        boolean b87 = binarynode_i83.hasRight();
        binarynode_i70.setRight(binarynode_i83);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertTrue(b28 == true);
        org.junit.Assert.assertNotNull(list_binaryNode29);
        org.junit.Assert.assertNotNull(list_binaryNode30);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertTrue(b37 == true);
        org.junit.Assert.assertTrue(i40 == (-1));
        org.junit.Assert.assertNotNull(stream_i45);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(binarynode_i49);
        org.junit.Assert.assertTrue(b50 == false);
        org.junit.Assert.assertNotNull(list_binaryNode52);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(binarynode_i58);
        org.junit.Assert.assertTrue(b59 == false);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue(b64 == false);
        org.junit.Assert.assertNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == true);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertNull(binaryNode76);
        org.junit.Assert.assertTrue("'" + i77 + "' != '" + 100 + "'", i77.equals(100));
        org.junit.Assert.assertNotNull(list_binaryNode78);
        org.junit.Assert.assertTrue(b79 == true);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(binarynode_i83);
        org.junit.Assert.assertTrue(b84 == false);
        org.junit.Assert.assertTrue("'" + i85 + "' != '" + 100 + "'", i85.equals(100));
        org.junit.Assert.assertTrue(b86 == false);
        org.junit.Assert.assertTrue(b87 == false);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test346");
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode0 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = null;
        binarynode_i6.setRight(binarynode_i7);
        boolean b9 = listnode_mergeSortedArrays2.equals((java.lang.Object) binarynode_i7);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = listnode_mergeSortedArrays11.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = listnode_mergeSortedArrays11.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays14 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort15 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray16 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array19 = new int[] { (byte) 1, (byte) 10 };
        splitArray16.splitSwappingPartition(i_array19);
        selectionSort15.sort(i_array19);
        com.github.pedrovgs.problem8.SplitArray splitArray22 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array25 = new int[] { (byte) 1, (byte) 10 };
        splitArray22.splitSwappingPartition(i_array25);
        int[] i_array33 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray22.splitSwappingRecursive(i_array33);
        int[] i_array35 = mergeSortedArrays14.merge(i_array19, i_array33);
        listnode_mergeSortedArrays11.setData(mergeSortedArrays14);
        listnode_mergeSortedArrays2.setData(mergeSortedArrays14);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = listnode_mergeSortedArrays2.getNext();
        deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList40 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements41 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = listnode_mergeSortedArrays44.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays46 = listnode_mergeSortedArrays44.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = null;
        binarynode_i48.setRight(binarynode_i49);
        boolean b51 = listnode_mergeSortedArrays44.equals((java.lang.Object) binarynode_i49);
        com.github.pedrovgs.linkedlist.ListNode listNode52 = reverseLinkedList42.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        removeListDuplicatedElements41.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode52);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements54 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList55 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays56 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays56);
        java.lang.String str58 = listnode_mergeSortedArrays57.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList55.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays57);
        removeListDuplicatedElements54.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode59);
        removeListDuplicatedElements41.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode59);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i62 = getTheElementInTheMiddleOfTheList40.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode59);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements63 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList64 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays65 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays65);
        java.lang.String str67 = listnode_mergeSortedArrays66.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode68 = reverseLinkedList64.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays66);
        removeListDuplicatedElements63.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = getTheElementInTheMiddleOfTheList40.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode68);
        deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_i70);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays72 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays73 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays72);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays74 = null;
        listnode_mergeSortedArrays73.setNext(listnode_mergeSortedArrays74);
        try {
            deleteListNode0.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays12);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays13);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays38);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays45);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays46);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(listNode52);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNotNull(listnode_i62);
        org.junit.Assert.assertNotNull(listNode68);
        org.junit.Assert.assertNotNull(listnode_i70);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test347");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode5 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode5);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList7 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements8 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList9 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = listnode_mergeSortedArrays11.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = listnode_mergeSortedArrays11.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = null;
        binarynode_i15.setRight(binarynode_i16);
        boolean b18 = listnode_mergeSortedArrays11.equals((java.lang.Object) binarynode_i16);
        com.github.pedrovgs.linkedlist.ListNode listNode19 = reverseLinkedList9.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays11);
        removeListDuplicatedElements8.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode19);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements21 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList22 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        java.lang.String str25 = listnode_mergeSortedArrays24.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList22.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        removeListDuplicatedElements21.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        removeListDuplicatedElements8.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i29 = getTheElementInTheMiddleOfTheList7.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements30 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList31 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays32 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays32);
        java.lang.String str34 = listnode_mergeSortedArrays33.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode35 = reverseLinkedList31.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays33);
        removeListDuplicatedElements30.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i37 = getTheElementInTheMiddleOfTheList7.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode35);
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i43 = new java.util.Vector<java.lang.Integer>();
        boolean b44 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i43, i_array42);
        boolean b46 = vector_i43.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i47 = vector_i43.elements();
        java.lang.Object[] obj_array48 = vector_i43.toArray();
        boolean b49 = listNode35.equals((java.lang.Object) vector_i43);
        java.lang.String str50 = listNode35.toString();
        org.junit.Assert.assertNotNull(listNode5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays12);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays13);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(listNode19);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i29);
        org.junit.Assert.assertNotNull(listNode35);
        org.junit.Assert.assertNotNull(listnode_i37);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertTrue(b44 == true);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(enumeration_i47);
        org.junit.Assert.assertNotNull(obj_array48);
        org.junit.Assert.assertTrue(b49 == false);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test348");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder2 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreePreOrder2.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i8 = binaryTreeInOrder1.getIterative(binarynode_i5);
        com.github.pedrovgs.problem18.IsBST isBST9 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = isBST9.checkRecursive(binarynode_i13);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals15 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array18 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = sortedArrayToBST16.transform(i_array18);
        boolean b20 = binarynode_i19.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = binarynode_i24.getRight();
        boolean b27 = binaryTreeEquals15.areEqualsIterative(binarynode_i19, binarynode_i24);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i19.getLeft();
        boolean b29 = isBST9.checkIterative(binarynode_i19);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals30 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST36 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array38 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = sortedArrayToBST36.transform(i_array38);
        boolean b40 = binarynode_i39.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = binarynode_i39.getRight();
        boolean b42 = binaryTreeEquals30.areEqualsIterative(binarynode_i34, binarynode_i39);
        boolean b43 = isBST9.checkIterative(binarynode_i39);
        boolean b44 = binaryTreeEquals0.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i39);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder45 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel46 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel47 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST48 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        boolean b53 = isBST48.checkRecursive(binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode54 = binaryTreeByLevel47.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode55 = binaryTreeByLevel46.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i56 = binaryTreeInOrder45.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = null;
        boolean b58 = binaryTreeEquals0.areEqualsIterative(binarynode_i52, binarynode_i57);
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem17.BinaryTreeEquals> binarynode_binaryTreeEquals59 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem17.BinaryTreeEquals>(binaryTreeEquals0);
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(list_binarynode_i8);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == true);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(binarynode_i39);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == true);
        org.junit.Assert.assertTrue(b43 == true);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue(b53 == true);
        org.junit.Assert.assertNotNull(list_binaryNode54);
        org.junit.Assert.assertNotNull(list_binaryNode55);
        org.junit.Assert.assertNotNull(list_binarynode_i56);
        org.junit.Assert.assertTrue(b58 == false);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test349");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        java.lang.Object[] obj_array3 = stack2_0.toArray();
        java.util.stream.Stream<java.lang.Integer> stream_i4 = stack2_0.parallelStream();
        int i5 = stack2_0.getMin();
        stack2_0.push(720);
        java.lang.Integer i8 = stack2_0.pop();
        java.lang.Integer i9 = stack2_0.pop();
        org.junit.Assert.assertNotNull(obj_array3);
        org.junit.Assert.assertNotNull(stream_i4);
        org.junit.Assert.assertTrue(i5 == 100);
        org.junit.Assert.assertTrue("'" + i8 + "' != '" + 720 + "'", i8.equals(720));
        org.junit.Assert.assertTrue("'" + i9 + "' != '" + 100 + "'", i9.equals(100));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test350");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        java.lang.Object obj13 = null;
        int i14 = vector_i4.lastIndexOf(obj13);
        java.util.stream.Stream<java.lang.Integer> stream_i15 = vector_i4.parallelStream();
        java.lang.Integer[] i_array19 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i20 = new java.util.Vector<java.lang.Integer>();
        boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i20, i_array19);
        boolean b23 = vector_i20.remove((java.lang.Object) (short) -1);
        java.lang.Object obj24 = vector_i20.clone();
        java.lang.Integer i25 = vector_i20.firstElement();
        java.util.ListIterator<java.lang.Integer> listiterator_i26 = vector_i20.listIterator();
        int i27 = vector_i20.capacity();
        vector_i20.clear();
        com.github.pedrovgs.problem50.UniqueChars uniqueChars29 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b31 = uniqueChars29.evaluate2("/hi!/");
        boolean b33 = uniqueChars29.evaluate2("BinaryNode{data=100}");
        boolean b34 = vector_i20.equals((java.lang.Object) "BinaryNode{data=100}");
        boolean b35 = vector_i4.contains((java.lang.Object) vector_i20);
        java.util.stream.Stream<java.lang.Integer> stream_i36 = vector_i20.parallelStream();
        try {
            vector_i20.removeElementAt((-2147483552));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue(i14 == (-1));
        org.junit.Assert.assertNotNull(stream_i15);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + i25 + "' != '" + 0 + "'", i25.equals(0));
        org.junit.Assert.assertNotNull(listiterator_i26);
        org.junit.Assert.assertTrue(i27 == 10);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertTrue(b33 == false);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(stream_i36);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test351");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("/");
        java.lang.String str6 = reverseString0.reverseRecursive("[0, 1, 1, -1]");
        java.lang.String str8 = reverseString0.reverseRecursive("/100##/[/32/");
        java.lang.String str10 = reverseString0.reverseRecursive("");
        java.lang.String str12 = reverseString0.reverseRecursive("##001");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/" + "'", str4.equals("/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]1- ,1 ,1 ,0[" + "'", str6.equals("]1- ,1 ,1 ,0["));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/23/[/##001/" + "'", str8.equals("/23/[/##001/"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "100##" + "'", str12.equals("100##"));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test352");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        int i1 = stack1_0.size();
        java.lang.String str2 = stack1_0.toString();
        int i3 = stack1_0.getMin();
        org.junit.Assert.assertTrue(i1 == 0);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "[]" + "'", str2.equals("[]"));
        org.junit.Assert.assertTrue(i3 == 2147483647);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test353");
        com.github.pedrovgs.problem68.IsEven isEven0 = new com.github.pedrovgs.problem68.IsEven();
        boolean b2 = isEven0.check((int) (byte) 1);
        boolean b4 = isEven0.check(0);
        boolean b6 = isEven0.check(4);
        boolean b8 = isEven0.check(1946209058);
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == true);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test354");
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced0 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.binarytree.BinaryNode binaryNode1 = null;
        boolean b2 = isTreeBalanced0.check(binaryNode1);
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = isBST3.checkRecursive(binarynode_i7);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals9 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = binarynode_i13.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = binarynode_i18.getRight();
        boolean b21 = binaryTreeEquals9.areEqualsIterative(binarynode_i13, binarynode_i18);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = binarynode_i13.getLeft();
        boolean b23 = isBST3.checkIterative(binarynode_i13);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian24 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d27 = avlTreeMedian24.find(binarynode_i26);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor28 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals29 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        boolean b39 = binarynode_i38.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = binarynode_i38.getRight();
        boolean b41 = binaryTreeEquals29.areEqualsIterative(binarynode_i33, binarynode_i38);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        boolean b46 = binarynode_i45.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode51 = lowestCommonAncestor28.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i50);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = binarynode_i38.getLeft();
        double d53 = avlTreeMedian24.find(binarynode_i38);
        boolean b54 = isBST3.checkRecursive(binarynode_i38);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor55 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals56 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        boolean b61 = binarynode_i60.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        boolean b66 = binarynode_i65.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = binarynode_i65.getRight();
        boolean b68 = binaryTreeEquals56.areEqualsIterative(binarynode_i60, binarynode_i65);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST69 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array71 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i72 = sortedArrayToBST69.transform(i_array71);
        boolean b73 = binarynode_i72.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST74 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array76 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = sortedArrayToBST74.transform(i_array76);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode78 = lowestCommonAncestor55.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i65, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i72, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i77);
        boolean b79 = isBST3.checkIterative(binarynode_i65);
        com.github.pedrovgs.problem18.IsBST isBST80 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST81 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array83 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = sortedArrayToBST81.transform(i_array83);
        boolean b85 = isBST80.checkRecursive(binarynode_i84);
        boolean b86 = binarynode_i84.hasRight();
        java.lang.Integer i87 = binarynode_i84.getData();
        boolean b88 = isBST3.checkRecursive(binarynode_i84);
        boolean b89 = isTreeBalanced0.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i90 = binarynode_i84.getRight();
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNull(binarynode_i22);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertTrue(d27 == 10.0d);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNull(binarynode_i40);
        org.junit.Assert.assertTrue(b41 == true);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertNull(binaryNode51);
        org.junit.Assert.assertNull(binarynode_i52);
        org.junit.Assert.assertTrue(d53 == 100.0d);
        org.junit.Assert.assertTrue(b54 == true);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNull(binarynode_i67);
        org.junit.Assert.assertTrue(b68 == true);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(binarynode_i72);
        org.junit.Assert.assertTrue(b73 == false);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(binarynode_i77);
        org.junit.Assert.assertNull(binaryNode78);
        org.junit.Assert.assertTrue(b79 == true);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(binarynode_i84);
        org.junit.Assert.assertTrue(b85 == true);
        org.junit.Assert.assertTrue(b86 == false);
        org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100 + "'", i87.equals(100));
        org.junit.Assert.assertTrue(b88 == true);
        org.junit.Assert.assertTrue(b89 == true);
        org.junit.Assert.assertNull(binarynode_i90);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test355");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode44 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i43);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder45 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder46 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian47 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d50 = avlTreeMedian47.find(binarynode_i49);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor51 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals52 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST53 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array55 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i56 = sortedArrayToBST53.transform(i_array55);
        boolean b57 = binarynode_i56.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST58 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = sortedArrayToBST58.transform(i_array60);
        boolean b62 = binarynode_i61.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = binarynode_i61.getRight();
        boolean b64 = binaryTreeEquals52.areEqualsIterative(binarynode_i56, binarynode_i61);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST65 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = sortedArrayToBST65.transform(i_array67);
        boolean b69 = binarynode_i68.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode74 = lowestCommonAncestor51.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i61, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i68, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = binarynode_i61.getLeft();
        double d76 = avlTreeMedian47.find(binarynode_i61);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        boolean b81 = binarynode_i80.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i82 = binarynode_i80.getRight();
        java.lang.Integer i83 = binarynode_i80.getData();
        binarynode_i61.setLeft(binarynode_i80);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i85 = binaryTreeInOrder46.getIterative(binarynode_i80);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode86 = binaryTreePostOrder45.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        java.lang.String str87 = binarynode_i80.toString();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i88 = binarynode_i80.getRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode89 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertNotNull(list_binaryNode44);
        org.junit.Assert.assertTrue(d50 == 10.0d);
        org.junit.Assert.assertNotNull(i_array55);
        org.junit.Assert.assertNotNull(binarynode_i56);
        org.junit.Assert.assertTrue(b57 == false);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(binarynode_i61);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNull(binarynode_i63);
        org.junit.Assert.assertTrue(b64 == true);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertNull(binaryNode74);
        org.junit.Assert.assertNull(binarynode_i75);
        org.junit.Assert.assertTrue(d76 == 100.0d);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertTrue(b81 == false);
        org.junit.Assert.assertNull(binarynode_i82);
        org.junit.Assert.assertTrue("'" + i83 + "' != '" + 100 + "'", i83.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i85);
        org.junit.Assert.assertNotNull(list_binaryNode86);
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "BinaryNode{data=100}" + "'", str87.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNull(binarynode_i88);
        org.junit.Assert.assertNotNull(list_binaryNode89);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test356");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(0);
        int i4 = factorial0.getRecursive(23);
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 862453760);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test357");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) (byte) 1);
        int i8 = bitsCounter0.countBitsToOneBasedOnString(101);
        int i10 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(32);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(0);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 4);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == 0);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test358");
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding0 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i3 = subtractAdding0.subtract((int) '4', (int) (short) 1);
        int i6 = subtractAdding0.subtract(72, (-6));
        int i9 = subtractAdding0.subtract(49, 4);
        int i12 = subtractAdding0.subtract((int) (byte) 100, (int) (byte) 10);
        org.junit.Assert.assertTrue(i3 == 51);
        org.junit.Assert.assertTrue(i6 == 78);
        org.junit.Assert.assertTrue(i9 == 45);
        org.junit.Assert.assertTrue(i12 == 90);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test359");
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays0 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays0);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers2 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b3 = listnode_mergeSortedArrays1.equals((java.lang.Object) mergeBinaryNumbers2);
        int i8 = mergeBinaryNumbers2.merge((int) '4', (-8), (int) (byte) -1, 27);
        int i13 = mergeBinaryNumbers2.merge(3628800, (int) (byte) 0, (int) (byte) -1, 0);
        int i18 = mergeBinaryNumbers2.merge(0, 100, 27, 11);
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(i8 == 52);
        org.junit.Assert.assertTrue(i13 == 3628800);
        org.junit.Assert.assertTrue(i18 == 536870912);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test360");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList8 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements9 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = listnode_mergeSortedArrays12.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = listnode_mergeSortedArrays12.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = null;
        binarynode_i16.setRight(binarynode_i17);
        boolean b19 = listnode_mergeSortedArrays12.equals((java.lang.Object) binarynode_i17);
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        removeListDuplicatedElements9.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        java.lang.String str26 = listnode_mergeSortedArrays25.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        removeListDuplicatedElements9.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i30 = getTheElementInTheMiddleOfTheList8.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode27);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements31 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        removeListDuplicatedElements31.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i38 = getTheElementInTheMiddleOfTheList8.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList40 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements41 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = listnode_mergeSortedArrays44.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays46 = listnode_mergeSortedArrays44.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i49 = null;
        binarynode_i48.setRight(binarynode_i49);
        boolean b51 = listnode_mergeSortedArrays44.equals((java.lang.Object) binarynode_i49);
        com.github.pedrovgs.linkedlist.ListNode listNode52 = reverseLinkedList42.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        removeListDuplicatedElements41.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode52);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements54 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList55 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays56 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays56);
        java.lang.String str58 = listnode_mergeSortedArrays57.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList55.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays57);
        removeListDuplicatedElements54.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode59);
        removeListDuplicatedElements41.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode59);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements62 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList63 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays64 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays64);
        java.lang.String str66 = listnode_mergeSortedArrays65.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode67 = reverseLinkedList63.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays65);
        removeListDuplicatedElements62.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        removeListDuplicatedElements41.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = getTheElementInTheMiddleOfTheList40.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode67);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements71 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList72 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays73 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays74 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays73);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays75 = listnode_mergeSortedArrays74.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays76 = listnode_mergeSortedArrays74.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = null;
        binarynode_i78.setRight(binarynode_i79);
        boolean b81 = listnode_mergeSortedArrays74.equals((java.lang.Object) binarynode_i79);
        com.github.pedrovgs.linkedlist.ListNode listNode82 = reverseLinkedList72.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays74);
        removeListDuplicatedElements71.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode82);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements84 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements71);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList85 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements86 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList87 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays88 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays89 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays88);
        java.lang.String str90 = listnode_mergeSortedArrays89.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode91 = reverseLinkedList87.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays89);
        removeListDuplicatedElements86.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode91);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i93 = getTheElementInTheMiddleOfTheList85.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode91);
        removeListDuplicatedElements71.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode91);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i95 = getTheElementInTheMiddleOfTheList40.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode91);
        removeListDuplicatedElements1.remove2(listnode_i95);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode98 = findKthElement0.find2((com.github.pedrovgs.linkedlist.ListNode) listnode_i95, (-2147483637));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays13);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays14);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNotNull(listnode_i30);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertNotNull(listnode_i38);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays45);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays46);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(listNode52);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNotNull(listNode67);
        org.junit.Assert.assertNotNull(listnode_i70);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays75);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays76);
        org.junit.Assert.assertTrue(b81 == false);
        org.junit.Assert.assertNotNull(listNode82);
        org.junit.Assert.assertNotNull(listNode91);
        org.junit.Assert.assertNotNull(listnode_i93);
        org.junit.Assert.assertNotNull(listnode_i95);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test361");
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange1 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange2 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "", combinationsOfChange1);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        boolean b8 = pair_comparable_str_combinationsOfChange2.equals((java.lang.Object) listNode7);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian9 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d12 = avlTreeMedian9.find(binarynode_i11);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor13 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals14 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i25 = binarynode_i23.getRight();
        boolean b26 = binaryTreeEquals14.areEqualsIterative(binarynode_i18, binarynode_i23);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST27 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array29 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = sortedArrayToBST27.transform(i_array29);
        boolean b31 = binarynode_i30.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode36 = lowestCommonAncestor13.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i30, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i23.getLeft();
        double d38 = avlTreeMedian9.find(binarynode_i23);
        boolean b39 = pair_comparable_str_combinationsOfChange2.equals((java.lang.Object) d38);
        com.github.pedrovgs.problem62.PalindromeList palindromeList40 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList41 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList42 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays43 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays43);
        java.lang.String str45 = listnode_mergeSortedArrays44.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = reverseLinkedList42.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        boolean b47 = palindromeList41.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        boolean b48 = palindromeList40.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays44);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays52 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays53 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays52);
        java.lang.String str54 = listnode_mergeSortedArrays53.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays53.setData(mergeSortedArrays55);
        listnode_mergeSortedArrays50.setNext(listnode_mergeSortedArrays53);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays58 = listnode_mergeSortedArrays50.getNext();
        boolean b59 = palindromeList40.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays58);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays60 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays61 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays60);
        java.lang.String str62 = listnode_mergeSortedArrays61.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        java.lang.String str65 = listnode_mergeSortedArrays64.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays66 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays64.setData(mergeSortedArrays66);
        listnode_mergeSortedArrays61.setNext(listnode_mergeSortedArrays64);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays69 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays70 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays69);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays71 = listnode_mergeSortedArrays70.getNext();
        listnode_mergeSortedArrays61.setNext(listnode_mergeSortedArrays70);
        java.lang.String str73 = listnode_mergeSortedArrays61.toString();
        boolean b74 = palindromeList40.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays61);
        boolean b75 = pair_comparable_str_combinationsOfChange2.equals((java.lang.Object) palindromeList40);
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(d12 == 10.0d);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNull(binarynode_i25);
        org.junit.Assert.assertTrue(b26 == true);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertNull(binaryNode36);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue(d38 == 100.0d);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(listnode_i46);
        org.junit.Assert.assertTrue(b47 == true);
        org.junit.Assert.assertTrue(b48 == true);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays58);
        org.junit.Assert.assertTrue(b59 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays71);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertTrue(b75 == false);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test362");
        com.github.pedrovgs.problem11.IntToString intToString0 = new com.github.pedrovgs.problem11.IntToString();
        java.lang.String str2 = intToString0.transform((-52));
        java.lang.String str4 = intToString0.transform((int) (byte) 100);
        java.lang.String str6 = intToString0.transform(270);
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "-52" + "'", str2.equals("-52"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "100" + "'", str4.equals("100"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "270" + "'", str6.equals("270"));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test363");
        com.github.pedrovgs.problem62.PalindromeList palindromeList0 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i6 = reverseLinkedList2.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        boolean b7 = palindromeList1.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        boolean b8 = palindromeList0.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        java.lang.String str14 = listnode_mergeSortedArrays13.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays13.setData(mergeSortedArrays15);
        listnode_mergeSortedArrays10.setNext(listnode_mergeSortedArrays13);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays10.getNext();
        boolean b19 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList20 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements21 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList22 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays24.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = listnode_mergeSortedArrays24.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = null;
        binarynode_i28.setRight(binarynode_i29);
        boolean b31 = listnode_mergeSortedArrays24.equals((java.lang.Object) binarynode_i29);
        com.github.pedrovgs.linkedlist.ListNode listNode32 = reverseLinkedList22.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        removeListDuplicatedElements21.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode32);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements34 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList35 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        java.lang.String str38 = listnode_mergeSortedArrays37.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode39 = reverseLinkedList35.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        removeListDuplicatedElements34.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        removeListDuplicatedElements21.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i42 = getTheElementInTheMiddleOfTheList20.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements43 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList44 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays45 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays46 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays45);
        java.lang.String str47 = listnode_mergeSortedArrays46.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode48 = reverseLinkedList44.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays46);
        removeListDuplicatedElements43.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode48);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i50 = getTheElementInTheMiddleOfTheList20.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode48);
        boolean b51 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i50);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList52 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = listnode_mergeSortedArrays54.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = listnode_mergeSortedArrays54.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = null;
        binarynode_i58.setRight(binarynode_i59);
        boolean b61 = listnode_mergeSortedArrays54.equals((java.lang.Object) binarynode_i59);
        com.github.pedrovgs.linkedlist.ListNode listNode62 = reverseLinkedList52.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList63 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays64 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays64);
        java.lang.String str66 = listnode_mergeSortedArrays65.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i67 = reverseLinkedList63.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays65);
        com.github.pedrovgs.problem62.PalindromeList palindromeList68 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList69 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays70 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays71 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays70);
        java.lang.String str72 = listnode_mergeSortedArrays71.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i73 = reverseLinkedList69.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays71);
        boolean b74 = palindromeList68.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays71);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays75 = listnode_mergeSortedArrays71.getNext();
        listnode_mergeSortedArrays65.setNext(listnode_mergeSortedArrays71);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i77 = reverseLinkedList52.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays71);
        boolean b78 = palindromeList0.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_i77);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays79 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays80 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays79);
        java.lang.String str81 = listnode_mergeSortedArrays80.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays82 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays83 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays82);
        java.lang.String str84 = listnode_mergeSortedArrays83.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays85 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays83.setData(mergeSortedArrays85);
        listnode_mergeSortedArrays80.setNext(listnode_mergeSortedArrays83);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays88 = listnode_mergeSortedArrays80.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays89 = listnode_mergeSortedArrays80.getNext();
        boolean b90 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays89);
        org.junit.Assert.assertNotNull(listnode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays26);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(listNode32);
        org.junit.Assert.assertNotNull(listNode39);
        org.junit.Assert.assertNotNull(listnode_i42);
        org.junit.Assert.assertNotNull(listNode48);
        org.junit.Assert.assertNotNull(listnode_i50);
        org.junit.Assert.assertTrue(b51 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays55);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays56);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNotNull(listNode62);
        org.junit.Assert.assertNotNull(listnode_i67);
        org.junit.Assert.assertNotNull(listnode_i73);
        org.junit.Assert.assertTrue(b74 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays75);
        org.junit.Assert.assertNotNull(listnode_i77);
        org.junit.Assert.assertTrue(b78 == true);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays88);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays89);
        org.junit.Assert.assertTrue(b90 == true);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test364");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel4 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder5 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian6 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d9 = avlTreeMedian6.find(binarynode_i8);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode10 = binaryTreePreOrder5.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i8);
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode17 = binaryTreePreOrder5.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals18 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST19 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = isBST19.checkRecursive(binarynode_i23);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        boolean b29 = binarynode_i28.hasRight();
        boolean b30 = binaryTreeEquals18.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.problem18.IsBST isBST31 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = isBST31.checkRecursive(binarynode_i35);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals37 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        boolean b47 = binarynode_i46.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = binarynode_i46.getRight();
        boolean b49 = binaryTreeEquals37.areEqualsIterative(binarynode_i41, binarynode_i46);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = binarynode_i41.getLeft();
        boolean b51 = isBST31.checkIterative(binarynode_i41);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian52 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d55 = avlTreeMedian52.find(binarynode_i54);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor56 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals57 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST58 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = sortedArrayToBST58.transform(i_array60);
        boolean b62 = binarynode_i61.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST63 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = sortedArrayToBST63.transform(i_array65);
        boolean b67 = binarynode_i66.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = binarynode_i66.getRight();
        boolean b69 = binaryTreeEquals57.areEqualsIterative(binarynode_i61, binarynode_i66);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        boolean b74 = binarynode_i73.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST75 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array77 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = sortedArrayToBST75.transform(i_array77);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode79 = lowestCommonAncestor56.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i78);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = binarynode_i66.getLeft();
        double d81 = avlTreeMedian52.find(binarynode_i66);
        boolean b82 = isBST31.checkRecursive(binarynode_i66);
        binarynode_i23.setRight(binarynode_i66);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode84 = binaryTreePreOrder5.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode85 = treeToListByLevel4.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem3.SumBinaryNumbers, com.github.pedrovgs.problem66.TreeToListByLevel> pair_sumBinaryNumbers_treeToListByLevel86 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem3.SumBinaryNumbers, com.github.pedrovgs.problem66.TreeToListByLevel>(sumBinaryNumbers0, treeToListByLevel4);
        try {
            java.lang.String str89 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("/#301021/79/", "-");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue(d9 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode10);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(list_binaryNode17);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == true);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertTrue(b30 == true);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == true);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNull(binarynode_i48);
        org.junit.Assert.assertTrue(b49 == true);
        org.junit.Assert.assertNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == true);
        org.junit.Assert.assertTrue(d55 == 10.0d);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(binarynode_i61);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(binarynode_i66);
        org.junit.Assert.assertTrue(b67 == false);
        org.junit.Assert.assertNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == true);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertNotNull(binarynode_i78);
        org.junit.Assert.assertNull(binaryNode79);
        org.junit.Assert.assertNull(binarynode_i80);
        org.junit.Assert.assertTrue(d81 == 100.0d);
        org.junit.Assert.assertTrue(b82 == true);
        org.junit.Assert.assertNotNull(list_binaryNode84);
        org.junit.Assert.assertNotNull(list_binaryNode85);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test365");
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray0 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem28.FindSums findSums1 = new com.github.pedrovgs.problem28.FindSums();
        com.github.pedrovgs.problem8.SplitArray splitArray2 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray3 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array6 = new int[] { (byte) 1, (byte) 10 };
        splitArray3.splitSwappingPartition(i_array6);
        splitArray2.splitSwappingRecursive(i_array6);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i10 = findSums1.find(i_array6, 0);
        int[] i_array12 = new int[] { 7 };
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i14 = findSums1.findLinearComplexityOrder(i_array12, 2147483647);
        com.github.pedrovgs.problem8.SplitArray splitArray15 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.problem8.SplitArray splitArray18 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array21 = new int[] { (byte) 1, (byte) 10 };
        splitArray18.splitSwappingPartition(i_array21);
        int[] i_array29 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray18.splitSwappingRecursive(i_array29);
        com.github.pedrovgs.problem8.SplitArray splitArray31 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array34 = new int[] { (byte) 1, (byte) 10 };
        splitArray31.splitSwappingPartition(i_array34);
        int[] i_array42 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray31.splitSwappingRecursive(i_array42);
        int[] i_array44 = mergeSortedArrays16.merge(i_array29, i_array42);
        splitArray15.splitSwappingIterative(i_array42);
        com.github.pedrovgs.problem76.InsertionSort insertionSort46 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray47 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        com.github.pedrovgs.problem8.SplitArray splitArray50 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array53 = new int[] { (byte) 1, (byte) 10 };
        splitArray50.splitSwappingPartition(i_array53);
        int[] i_array61 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray50.splitSwappingRecursive(i_array61);
        com.github.pedrovgs.problem8.SplitArray splitArray63 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array66 = new int[] { (byte) 1, (byte) 10 };
        splitArray63.splitSwappingPartition(i_array66);
        int[] i_array74 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray63.splitSwappingRecursive(i_array74);
        int[] i_array76 = mergeSortedArrays48.merge(i_array61, i_array74);
        splitArray47.splitSwappingIterative(i_array74);
        insertionSort46.sort(i_array74);
        splitArray15.splitSwappingRecursive(i_array74);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i81 = findSums1.find(i_array74, (int) (short) 0);
        moveZerosInArray0.moveUsingTwoPointers(i_array74);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(list_pair_i_i10);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(list_pair_i_i14);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(list_pair_i_i81);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test366");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        java.lang.String str8 = listNode6.toString();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList9 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements10 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList11 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = listnode_mergeSortedArrays13.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays15 = listnode_mergeSortedArrays13.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = null;
        binarynode_i17.setRight(binarynode_i18);
        boolean b20 = listnode_mergeSortedArrays13.equals((java.lang.Object) binarynode_i18);
        com.github.pedrovgs.linkedlist.ListNode listNode21 = reverseLinkedList11.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays13);
        removeListDuplicatedElements10.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode21);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        removeListDuplicatedElements10.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList9.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements32 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList33 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        java.lang.String str36 = listnode_mergeSortedArrays35.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode37 = reverseLinkedList33.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        removeListDuplicatedElements32.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode37);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i39 = getTheElementInTheMiddleOfTheList9.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode37);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements40 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList41 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays42 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays42);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays44 = listnode_mergeSortedArrays43.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays45 = listnode_mergeSortedArrays43.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = null;
        binarynode_i47.setRight(binarynode_i48);
        boolean b50 = listnode_mergeSortedArrays43.equals((java.lang.Object) binarynode_i48);
        com.github.pedrovgs.linkedlist.ListNode listNode51 = reverseLinkedList41.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays43);
        removeListDuplicatedElements40.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode51);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList53 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays54 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays54);
        java.lang.String str56 = listnode_mergeSortedArrays55.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i57 = reverseLinkedList53.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays55);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode58 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays59 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays60 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays59);
        java.lang.String str61 = listnode_mergeSortedArrays60.toString();
        deleteListNode58.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays60);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers65 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b66 = listnode_mergeSortedArrays64.equals((java.lang.Object) mergeBinaryNumbers65);
        deleteListNode58.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i68 = reverseLinkedList53.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList69 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays70 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays71 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays70);
        java.lang.String str72 = listnode_mergeSortedArrays71.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i73 = reverseLinkedList69.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays71);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode74 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays75 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays76 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays75);
        java.lang.String str77 = listnode_mergeSortedArrays76.toString();
        deleteListNode74.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays76);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays79 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays80 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays79);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers81 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b82 = listnode_mergeSortedArrays80.equals((java.lang.Object) mergeBinaryNumbers81);
        deleteListNode74.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays80);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i84 = reverseLinkedList69.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays80);
        com.github.pedrovgs.linkedlist.ListNode listNode85 = reverseLinkedList53.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i84);
        removeListDuplicatedElements40.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode85);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i87 = getTheElementInTheMiddleOfTheList9.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode85);
        try {
            int i88 = sumLists0.sum((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6, listnode_i87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays15);
        org.junit.Assert.assertTrue(b20 == false);
        org.junit.Assert.assertNotNull(listNode21);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNotNull(listNode37);
        org.junit.Assert.assertNotNull(listnode_i39);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays44);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays45);
        org.junit.Assert.assertTrue(b50 == false);
        org.junit.Assert.assertNotNull(listNode51);
        org.junit.Assert.assertNotNull(listnode_i57);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNotNull(listnode_i68);
        org.junit.Assert.assertNotNull(listnode_i73);
        org.junit.Assert.assertTrue(b82 == false);
        org.junit.Assert.assertNotNull(listnode_i84);
        org.junit.Assert.assertNotNull(listNode85);
        org.junit.Assert.assertNotNull(listnode_i87);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test367");
        com.github.pedrovgs.problem42.FloodFill floodFill0 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array2 = new int[][] {};
        int[] i_array3 = goThroughMatrixInSpiral1.go(i_array_array2);
        int[] i_array10 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array17 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array18 = new int[][] { i_array10, i_array17 };
        int[] i_array19 = goThroughMatrixInSpiral1.go(i_array_array18);
        floodFill0.apply(i_array_array18, (int) (byte) 1, (int) (byte) 0, (int) ' ', (-5200));
        com.github.pedrovgs.problem42.FloodFill floodFill25 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem42.FloodFill floodFill26 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral27 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array28 = new int[][] {};
        int[] i_array29 = goThroughMatrixInSpiral27.go(i_array_array28);
        floodFill26.apply(i_array_array28, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral35 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array36 = new int[][] {};
        int[] i_array37 = goThroughMatrixInSpiral35.go(i_array_array36);
        int[] i_array44 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array51 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array52 = new int[][] { i_array44, i_array51 };
        int[] i_array53 = goThroughMatrixInSpiral35.go(i_array_array52);
        floodFill26.apply(i_array_array52, (-8), (-14040), 2147483647, (-8));
        floodFill25.apply(i_array_array52, 27, 0, 0, (int) ' ');
        floodFill0.apply(i_array_array52, 0, (int) (byte) 1, (int) (short) 100, 22);
        org.junit.Assert.assertNotNull(i_array_array2);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array_array18);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array_array28);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array_array36);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array_array52);
        org.junit.Assert.assertNotNull(i_array53);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test368");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate2("35");
        boolean b6 = uniqueChars0.evaluate("7");
        boolean b8 = uniqueChars0.evaluate("100");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test369");
        com.github.pedrovgs.problem62.PalindromeList palindromeList0 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i6 = reverseLinkedList2.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        boolean b7 = palindromeList1.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        boolean b8 = palindromeList0.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        java.lang.String str14 = listnode_mergeSortedArrays13.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays13.setData(mergeSortedArrays15);
        listnode_mergeSortedArrays10.setNext(listnode_mergeSortedArrays13);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays10.getNext();
        boolean b19 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements20 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList21 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = null;
        binarynode_i27.setRight(binarynode_i28);
        boolean b30 = listnode_mergeSortedArrays23.equals((java.lang.Object) binarynode_i28);
        com.github.pedrovgs.linkedlist.ListNode listNode31 = reverseLinkedList21.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        removeListDuplicatedElements20.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode31);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList33 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = null;
        binarynode_i39.setRight(binarynode_i40);
        boolean b42 = listnode_mergeSortedArrays35.equals((java.lang.Object) binarynode_i40);
        com.github.pedrovgs.linkedlist.ListNode listNode43 = reverseLinkedList33.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode44 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays45 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays46 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays45);
        java.lang.String str47 = listnode_mergeSortedArrays46.toString();
        deleteListNode44.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays46);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers51 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b52 = listnode_mergeSortedArrays50.equals((java.lang.Object) mergeBinaryNumbers51);
        deleteListNode44.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i54 = reverseLinkedList33.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays55);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = listnode_mergeSortedArrays56.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays58 = listnode_mergeSortedArrays56.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays59 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort60 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray61 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array64 = new int[] { (byte) 1, (byte) 10 };
        splitArray61.splitSwappingPartition(i_array64);
        selectionSort60.sort(i_array64);
        com.github.pedrovgs.problem8.SplitArray splitArray67 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array70 = new int[] { (byte) 1, (byte) 10 };
        splitArray67.splitSwappingPartition(i_array70);
        int[] i_array78 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray67.splitSwappingRecursive(i_array78);
        int[] i_array80 = mergeSortedArrays59.merge(i_array64, i_array78);
        listnode_mergeSortedArrays56.setData(mergeSortedArrays59);
        java.lang.String str82 = listnode_mergeSortedArrays56.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i83 = reverseLinkedList33.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays56);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays84 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays85 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays84);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays86 = listnode_mergeSortedArrays85.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays87 = listnode_mergeSortedArrays85.getNext();
        com.github.pedrovgs.linkedlist.ListNode listNode88 = reverseLinkedList33.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays85);
        removeListDuplicatedElements20.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode88);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays90 = listNode88.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays91 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays92 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays91);
        java.lang.String str93 = listnode_mergeSortedArrays92.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays94 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays92.setData(mergeSortedArrays94);
        listNode88.setData(mergeSortedArrays94);
        boolean b97 = palindromeList0.checkIterative(listNode88);
        org.junit.Assert.assertNotNull(listnode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertTrue(b30 == false);
        org.junit.Assert.assertNotNull(listNode31);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(listNode43);
        org.junit.Assert.assertTrue(b52 == false);
        org.junit.Assert.assertNotNull(listnode_i54);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays57);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays58);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertNotNull(listnode_i83);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays86);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays87);
        org.junit.Assert.assertNotNull(listNode88);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays90);
        org.junit.Assert.assertTrue(b97 == true);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test370");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        boolean b13 = vector_i4.contains((java.lang.Object) (byte) 100);
        java.util.Enumeration<java.lang.Integer> enumeration_i14 = vector_i4.elements();
        java.util.Enumeration<java.lang.Integer> enumeration_i15 = vector_i4.elements();
        com.github.pedrovgs.problem69.BitsToTransform bitsToTransform16 = new com.github.pedrovgs.problem69.BitsToTransform();
        int i19 = bitsToTransform16.calculate((int) '#', (int) (short) 0);
        int i22 = bitsToTransform16.calculate(1484783616, (-52000));
        int i25 = bitsToTransform16.calculate(107, 51);
        int i28 = bitsToTransform16.calculate((-6), (-97));
        com.github.pedrovgs.problem69.BitsToTransform[] bitsToTransform_array29 = new com.github.pedrovgs.problem69.BitsToTransform[] { bitsToTransform16 };
        try {
            com.github.pedrovgs.problem69.BitsToTransform[] bitsToTransform_array30 = vector_i4.toArray(bitsToTransform_array29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException");
        } catch (java.lang.ArrayStoreException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(enumeration_i14);
        org.junit.Assert.assertNotNull(enumeration_i15);
        org.junit.Assert.assertTrue(i19 == 3);
        org.junit.Assert.assertTrue(i22 == 18);
        org.junit.Assert.assertTrue(i25 == 3);
        org.junit.Assert.assertTrue(i28 == 4);
        org.junit.Assert.assertNotNull(bitsToTransform_array29);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test371");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.removeAllElements();
        int i11 = vector_i4.size();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue(i11 == 0);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test372");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.ensureCapacity((int) (short) 100);
        int i3 = stack2_0.getMin();
        java.util.ListIterator<java.lang.Integer> listiterator_i4 = stack2_0.listIterator();
        com.github.pedrovgs.problem25.Anagrams anagrams5 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str7 = anagrams5.get("hi!");
        java.util.List<java.lang.String> list_str9 = anagrams5.get("/");
        com.github.pedrovgs.problem25.Anagrams anagrams10 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str12 = anagrams10.get("0");
        java.util.List<java.lang.String> list_str14 = anagrams10.get("0");
        java.util.List<java.lang.String> list_str16 = anagrams10.get("[null]");
        com.github.pedrovgs.problem25.Anagrams anagrams17 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str19 = anagrams17.get("0");
        java.util.List<java.lang.String> list_str21 = anagrams17.get("0");
        com.github.pedrovgs.problem25.Anagrams anagrams22 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str24 = anagrams22.get("0");
        java.util.List<java.lang.String> list_str26 = anagrams22.get("/hi!/");
        java.util.List<java.lang.String> list_str28 = anagrams22.get("35");
        com.github.pedrovgs.problem25.Anagrams anagrams29 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str31 = anagrams29.get("0");
        java.util.List<java.lang.String> list_str33 = anagrams29.get("/hi!/");
        java.util.List<java.lang.String> list_str35 = anagrams29.get("35");
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array36 = new com.github.pedrovgs.problem25.Anagrams[] { anagrams5, anagrams10, anagrams17, anagrams22, anagrams29 };
        com.github.pedrovgs.problem25.Anagrams[] anagrams_array37 = stack2_0.toArray(anagrams_array36);
        int i38 = stack2_0.getMin();
        try {
            java.util.ListIterator<java.lang.Integer> listiterator_i40 = stack2_0.listIterator((-2147483552));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(i3 == 2147483647);
        org.junit.Assert.assertNotNull(listiterator_i4);
        org.junit.Assert.assertNotNull(list_str7);
        org.junit.Assert.assertNotNull(list_str9);
        org.junit.Assert.assertNotNull(list_str12);
        org.junit.Assert.assertNotNull(list_str14);
        org.junit.Assert.assertNotNull(list_str16);
        org.junit.Assert.assertNotNull(list_str19);
        org.junit.Assert.assertNotNull(list_str21);
        org.junit.Assert.assertNotNull(list_str24);
        org.junit.Assert.assertNotNull(list_str26);
        org.junit.Assert.assertNotNull(list_str28);
        org.junit.Assert.assertNotNull(list_str31);
        org.junit.Assert.assertNotNull(list_str33);
        org.junit.Assert.assertNotNull(list_str35);
        org.junit.Assert.assertNotNull(anagrams_array36);
        org.junit.Assert.assertNotNull(anagrams_array37);
        org.junit.Assert.assertTrue(i38 == 2147483647);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test373");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((-52), (int) (byte) 100);
        int i6 = multiplicationWithoutMultiply0.calculate((-5200), 10);
        int i9 = multiplicationWithoutMultiply0.calculate(28, 2);
        int i12 = multiplicationWithoutMultiply0.calculate((-97), 11426);
        org.junit.Assert.assertTrue(i3 == (-5200));
        org.junit.Assert.assertTrue(i6 == (-52000));
        org.junit.Assert.assertTrue(i9 == 56);
        org.junit.Assert.assertTrue(i12 == (-1108322));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test374");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate2("BinaryNode{data=100}");
        boolean b6 = uniqueChars0.evaluate2("[");
        boolean b8 = uniqueChars0.evaluate("");
        boolean b10 = uniqueChars0.evaluate2("[nul2]");
        boolean b12 = uniqueChars0.evaluate2("/97/10010###/");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test375");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        java.lang.Integer i13 = vector_i4.lastElement();
        vector_i4.removeAllElements();
        com.github.pedrovgs.problem71.ReverseBinaryNumber reverseBinaryNumber15 = new com.github.pedrovgs.problem71.ReverseBinaryNumber();
        int i16 = vector_i4.lastIndexOf((java.lang.Object) reverseBinaryNumber15);
        int i18 = reverseBinaryNumber15.reverse(107);
        int i20 = reverseBinaryNumber15.reverse(270);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue("'" + i13 + "' != '" + (-1) + "'", i13.equals((-1)));
        org.junit.Assert.assertTrue(i16 == (-1));
        org.junit.Assert.assertTrue(i18 == 20);
        org.junit.Assert.assertTrue(i20 == 241);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test376");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("/");
        java.lang.String str6 = reverseString0.reverseIterative("97");
        java.lang.String str8 = reverseString0.reverseIterative("/!ih");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/" + "'", str4.equals("/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "79" + "'", str6.equals("79"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!/" + "'", str8.equals("hi!/"));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test377");
        com.github.pedrovgs.problem62.PalindromeList palindromeList0 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i5 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        boolean b6 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays8 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays7);
        java.lang.String str9 = listnode_mergeSortedArrays8.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        java.lang.String str12 = listnode_mergeSortedArrays11.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays11.setData(mergeSortedArrays13);
        listnode_mergeSortedArrays8.setNext(listnode_mergeSortedArrays11);
        boolean b16 = palindromeList0.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays8);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList17 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays18 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays18);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays20 = listnode_mergeSortedArrays19.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays21 = listnode_mergeSortedArrays19.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = null;
        binarynode_i23.setRight(binarynode_i24);
        boolean b26 = listnode_mergeSortedArrays19.equals((java.lang.Object) binarynode_i24);
        com.github.pedrovgs.linkedlist.ListNode listNode27 = reverseLinkedList17.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.problem62.PalindromeList palindromeList28 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList29 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays30 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays31 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays30);
        java.lang.String str32 = listnode_mergeSortedArrays31.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i33 = reverseLinkedList29.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        boolean b34 = palindromeList28.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays31);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays35 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays35);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = listnode_mergeSortedArrays36.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = null;
        binarynode_i40.setRight(binarynode_i41);
        boolean b43 = listnode_mergeSortedArrays36.equals((java.lang.Object) binarynode_i41);
        listnode_mergeSortedArrays31.setNext(listnode_mergeSortedArrays36);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays45 = listnode_mergeSortedArrays36.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements46 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList47 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays48 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays49 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays48);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = listnode_mergeSortedArrays49.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = null;
        binarynode_i53.setRight(binarynode_i54);
        boolean b56 = listnode_mergeSortedArrays49.equals((java.lang.Object) binarynode_i54);
        com.github.pedrovgs.linkedlist.ListNode listNode57 = reverseLinkedList47.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays49);
        removeListDuplicatedElements46.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode57);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements59 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements46);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList60 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements61 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList62 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        java.lang.String str65 = listnode_mergeSortedArrays64.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode66 = reverseLinkedList62.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        removeListDuplicatedElements61.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i68 = getTheElementInTheMiddleOfTheList60.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
        removeListDuplicatedElements46.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode66);
        listnode_mergeSortedArrays36.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode66);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i71 = reverseLinkedList17.reverseRecursive(listNode66);
        boolean b72 = palindromeList0.checkReversing(listNode66);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList73 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays74 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays75 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays74);
        java.lang.String str76 = listnode_mergeSortedArrays75.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i77 = reverseLinkedList73.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays75);
        com.github.pedrovgs.problem62.PalindromeList palindromeList78 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList79 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays80 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays81 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays80);
        java.lang.String str82 = listnode_mergeSortedArrays81.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i83 = reverseLinkedList79.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays81);
        boolean b84 = palindromeList78.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays81);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays85 = listnode_mergeSortedArrays81.getNext();
        listnode_mergeSortedArrays75.setNext(listnode_mergeSortedArrays81);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays87 = listnode_mergeSortedArrays75.getData();
        boolean b88 = palindromeList0.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays75);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays89 = listnode_mergeSortedArrays75.getData();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays90 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays89);
        org.junit.Assert.assertNotNull(listnode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays20);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays21);
        org.junit.Assert.assertTrue(b26 == false);
        org.junit.Assert.assertNotNull(listNode27);
        org.junit.Assert.assertNotNull(listnode_i33);
        org.junit.Assert.assertTrue(b34 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays38);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays45);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays50);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays51);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listNode57);
        org.junit.Assert.assertNotNull(listNode66);
        org.junit.Assert.assertNotNull(listnode_i68);
        org.junit.Assert.assertNotNull(listnode_i71);
        org.junit.Assert.assertTrue(b72 == true);
        org.junit.Assert.assertNotNull(listnode_i77);
        org.junit.Assert.assertNotNull(listnode_i83);
        org.junit.Assert.assertTrue(b84 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays85);
        org.junit.Assert.assertNotNull(mergeSortedArrays87);
        org.junit.Assert.assertTrue(b88 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays89);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test378");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian1 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d4 = avlTreeMedian1.find(binarynode_i3);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor5 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals6 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = binarynode_i15.getRight();
        boolean b18 = binaryTreeEquals6.areEqualsIterative(binarynode_i10, binarynode_i15);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        boolean b23 = binarynode_i22.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST24 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST24.transform(i_array26);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode28 = lowestCommonAncestor5.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i27);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = binarynode_i15.getLeft();
        double d30 = avlTreeMedian1.find(binarynode_i15);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = binarynode_i34.getRight();
        java.lang.Integer i37 = binarynode_i34.getData();
        binarynode_i15.setLeft(binarynode_i34);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = binarynode_i34.getRight();
        try {
            java.lang.Integer i41 = findMinNumberAtPosition0.find(binarynode_i34, 245366856);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d4 == 10.0d);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == true);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertNull(binaryNode28);
        org.junit.Assert.assertNull(binarynode_i29);
        org.junit.Assert.assertTrue(d30 == 100.0d);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNull(binarynode_i36);
        org.junit.Assert.assertTrue("'" + i37 + "' != '" + 100 + "'", i37.equals(100));
        org.junit.Assert.assertNull(binarynode_i39);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test379");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate(270, (-52));
        int i6 = multiplicationWithoutMultiply0.calculate((int) (byte) 10, (-8));
        int i9 = multiplicationWithoutMultiply0.calculate(23, 475165);
        org.junit.Assert.assertTrue(i3 == (-14040));
        org.junit.Assert.assertTrue(i6 == (-80));
        org.junit.Assert.assertTrue(i9 == 10928795);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test380");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("", "");
        try {
            java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("1", "/[-1]/]1-[/]1- ,1 ,1 ,0[/01/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test381");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersCheating("[102", "[100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test382");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = null;
        binarynode_i6.setRight(binarynode_i7);
        boolean b9 = listnode_mergeSortedArrays2.equals((java.lang.Object) binarynode_i7);
        com.github.pedrovgs.linkedlist.ListNode listNode10 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode11 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        java.lang.String str14 = listnode_mergeSortedArrays13.toString();
        deleteListNode11.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays13);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers18 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b19 = listnode_mergeSortedArrays17.equals((java.lang.Object) mergeBinaryNumbers18);
        deleteListNode11.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i21 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort27 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray28 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array31 = new int[] { (byte) 1, (byte) 10 };
        splitArray28.splitSwappingPartition(i_array31);
        selectionSort27.sort(i_array31);
        com.github.pedrovgs.problem8.SplitArray splitArray34 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array37 = new int[] { (byte) 1, (byte) 10 };
        splitArray34.splitSwappingPartition(i_array37);
        int[] i_array45 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray34.splitSwappingRecursive(i_array45);
        int[] i_array47 = mergeSortedArrays26.merge(i_array31, i_array45);
        listnode_mergeSortedArrays23.setData(mergeSortedArrays26);
        java.lang.String str49 = listnode_mergeSortedArrays23.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i50 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.linkedlist.ListNode listNode51 = null;
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i52 = reverseLinkedList0.reverseRecursive(listNode51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNotNull(listNode10);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listnode_i21);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(listnode_i50);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test383");
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList0 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements1 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList2 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays3 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays3);
        java.lang.String str5 = listnode_mergeSortedArrays4.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode6 = reverseLinkedList2.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays4);
        removeListDuplicatedElements1.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i8 = getTheElementInTheMiddleOfTheList0.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode6);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList9 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        java.lang.String str12 = listnode_mergeSortedArrays11.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i13 = reverseLinkedList9.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays11);
        com.github.pedrovgs.problem62.PalindromeList palindromeList14 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i19 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        boolean b20 = palindromeList14.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays21 = listnode_mergeSortedArrays17.getNext();
        listnode_mergeSortedArrays11.setNext(listnode_mergeSortedArrays17);
        listNode6.setNext(listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList25 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays26);
        java.lang.String str28 = listnode_mergeSortedArrays27.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode29 = reverseLinkedList25.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays27);
        com.github.pedrovgs.problem18.IsBST isBST30 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = isBST30.checkRecursive(binarynode_i34);
        boolean b36 = listNode29.equals((java.lang.Object) binarynode_i34);
        com.github.pedrovgs.linkedlist.ListNode listNode37 = reverseLinkedList24.reverseIterative(listNode29);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        java.lang.String str40 = listnode_mergeSortedArrays39.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        java.lang.String str43 = listnode_mergeSortedArrays42.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays44 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays42.setData(mergeSortedArrays44);
        listnode_mergeSortedArrays39.setNext(listnode_mergeSortedArrays42);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays48 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays48);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList50 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays51 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays52 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays51);
        java.lang.String str53 = listnode_mergeSortedArrays52.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i54 = reverseLinkedList50.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays52);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays55);
        java.lang.String str57 = listnode_mergeSortedArrays56.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays58 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays59 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays58);
        java.lang.String str60 = listnode_mergeSortedArrays59.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays61 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays59.setData(mergeSortedArrays61);
        listnode_mergeSortedArrays56.setNext(listnode_mergeSortedArrays59);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = listnode_mergeSortedArrays56.getNext();
        com.github.pedrovgs.problem62.PalindromeList palindromeList65 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList66 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays67 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays68 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays67);
        java.lang.String str69 = listnode_mergeSortedArrays68.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = reverseLinkedList66.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays68);
        boolean b71 = palindromeList65.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays68);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays72 = listnode_mergeSortedArrays68.getNext();
        listnode_mergeSortedArrays64.setNext(listnode_mergeSortedArrays68);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i74 = reverseLinkedList50.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode75 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements76 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList77 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays78 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays79 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays78);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays80 = listnode_mergeSortedArrays79.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays81 = listnode_mergeSortedArrays79.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i83 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = null;
        binarynode_i83.setRight(binarynode_i84);
        boolean b86 = listnode_mergeSortedArrays79.equals((java.lang.Object) binarynode_i84);
        com.github.pedrovgs.linkedlist.ListNode listNode87 = reverseLinkedList77.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays79);
        removeListDuplicatedElements76.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode87);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements89 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements76);
        deleteListNode75.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_removeListDuplicatedElements89);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i91 = reverseLinkedList50.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_removeListDuplicatedElements89);
        com.github.pedrovgs.linkedlist.ListNode listNode92 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_removeListDuplicatedElements89);
        listnode_mergeSortedArrays17.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode92);
        org.junit.Assert.assertNotNull(listNode6);
        org.junit.Assert.assertNotNull(listnode_i8);
        org.junit.Assert.assertNotNull(listnode_i13);
        org.junit.Assert.assertNotNull(listnode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays21);
        org.junit.Assert.assertNotNull(listNode29);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == true);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNotNull(listNode37);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays47);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays48);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(listnode_i54);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays64);
        org.junit.Assert.assertNotNull(listnode_i70);
        org.junit.Assert.assertTrue(b71 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays72);
        org.junit.Assert.assertNotNull(listnode_i74);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays80);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays81);
        org.junit.Assert.assertTrue(b86 == false);
        org.junit.Assert.assertNotNull(listNode87);
        org.junit.Assert.assertNotNull(listnode_i91);
        org.junit.Assert.assertNotNull(listNode92);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test384");
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 0, 0 };
        java.util.Vector<java.lang.Integer> vector_i3 = new java.util.Vector<java.lang.Integer>();
        boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i3, i_array2);
        java.lang.Object obj5 = vector_i3.clone();
        int i6 = vector_i3.size();
        java.lang.Integer i7 = vector_i3.firstElement();
        vector_i3.setSize(0);
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(i6 == 2);
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 0 + "'", i7.equals(0));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test385");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getRecursive(0);
        int i8 = factorial0.getTailRecursive((int) (byte) 1);
        int i10 = factorial0.getTailRecursive(71);
        int i12 = factorial0.getIterative(24);
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 1);
        org.junit.Assert.assertTrue(i10 == 0);
        org.junit.Assert.assertTrue(i12 == (-775946240));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test386");
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays0 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays1 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays0);
        java.lang.String str2 = listnode_mergeSortedArrays1.toString();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays1.getNext();
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test387");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        boolean b3 = stack2_0.empty();
        stack2_0.trimToSize();
        java.util.function.UnaryOperator<java.lang.Integer> unaryoperator_i5 = null;
        try {
            stack2_0.replaceAll(unaryoperator_i5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue(b3 == false);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test388");
        com.github.pedrovgs.problem78.AutoBoxingTrick autoBoxingTrick0 = new com.github.pedrovgs.problem78.AutoBoxingTrick();
        boolean b3 = autoBoxingTrick0.compare((java.lang.Integer) 0, (java.lang.Integer) 2147483647);
        boolean b6 = autoBoxingTrick0.compare((java.lang.Integer) 27, (java.lang.Integer) 0);
        boolean b9 = autoBoxingTrick0.compare((java.lang.Integer) (-24), (java.lang.Integer) (-14040));
        boolean b12 = autoBoxingTrick0.compare((java.lang.Integer) 2147483647, (java.lang.Integer) 2);
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test389");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array7 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces1.replace(char_array7);
        replaceSpaces0.replace(char_array7);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces10 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces11 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces12 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array13 = new char[] {};
        replaceSpaces12.replace2(char_array13);
        replaceSpaces11.replace(char_array13);
        replaceSpaces10.replace(char_array13);
        replaceSpaces0.replace(char_array13);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces18 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces19 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array25 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces19.replace(char_array25);
        replaceSpaces18.replace(char_array25);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces28 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces29 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces30 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array31 = new char[] {};
        replaceSpaces30.replace2(char_array31);
        replaceSpaces29.replace(char_array31);
        replaceSpaces28.replace(char_array31);
        replaceSpaces18.replace(char_array31);
        replaceSpaces0.replace2(char_array31);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces37 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces38 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array44 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces38.replace(char_array44);
        replaceSpaces37.replace(char_array44);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces47 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces48 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces49 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array50 = new char[] {};
        replaceSpaces49.replace2(char_array50);
        replaceSpaces48.replace(char_array50);
        replaceSpaces47.replace(char_array50);
        replaceSpaces37.replace(char_array50);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces55 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array61 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces55.replace(char_array61);
        replaceSpaces37.replace2(char_array61);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces64 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces65 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces66 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array67 = new char[] {};
        replaceSpaces66.replace2(char_array67);
        replaceSpaces65.replace(char_array67);
        replaceSpaces64.replace(char_array67);
        replaceSpaces37.replace2(char_array67);
        replaceSpaces0.replace2(char_array67);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces73 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces74 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces75 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array76 = new char[] {};
        replaceSpaces75.replace2(char_array76);
        replaceSpaces74.replace(char_array76);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces79 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces80 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces81 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array82 = new char[] {};
        replaceSpaces81.replace2(char_array82);
        replaceSpaces80.replace(char_array82);
        replaceSpaces79.replace(char_array82);
        replaceSpaces74.replace(char_array82);
        replaceSpaces73.replace2(char_array82);
        replaceSpaces0.replace(char_array82);
        org.junit.Assert.assertNotNull(char_array7);
        org.junit.Assert.assertNotNull(char_array13);
        org.junit.Assert.assertNotNull(char_array25);
        org.junit.Assert.assertNotNull(char_array31);
        org.junit.Assert.assertNotNull(char_array44);
        org.junit.Assert.assertNotNull(char_array50);
        org.junit.Assert.assertNotNull(char_array61);
        org.junit.Assert.assertNotNull(char_array67);
        org.junit.Assert.assertNotNull(char_array76);
        org.junit.Assert.assertNotNull(char_array82);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test390");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements23 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode28 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        removeListDuplicatedElements23.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode28);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList32 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays33 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays33);
        java.lang.String str35 = listnode_mergeSortedArrays34.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = reverseLinkedList32.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays34);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList37 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays38 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays39 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays38);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays40 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = listnode_mergeSortedArrays39.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = null;
        binarynode_i43.setRight(binarynode_i44);
        boolean b46 = listnode_mergeSortedArrays39.equals((java.lang.Object) binarynode_i44);
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList37.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays39);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode48 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays53 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays53);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers55 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b56 = listnode_mergeSortedArrays54.equals((java.lang.Object) mergeBinaryNumbers55);
        deleteListNode48.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i58 = reverseLinkedList37.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode listNode59 = reverseLinkedList32.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays54);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList60 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements61 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList62 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays63 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays64 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays63);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = listnode_mergeSortedArrays64.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = null;
        binarynode_i68.setRight(binarynode_i69);
        boolean b71 = listnode_mergeSortedArrays64.equals((java.lang.Object) binarynode_i69);
        com.github.pedrovgs.linkedlist.ListNode listNode72 = reverseLinkedList62.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays64);
        removeListDuplicatedElements61.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode72);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements74 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList75 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays76 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays77 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays76);
        java.lang.String str78 = listnode_mergeSortedArrays77.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode79 = reverseLinkedList75.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays77);
        removeListDuplicatedElements74.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        removeListDuplicatedElements61.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i82 = getTheElementInTheMiddleOfTheList60.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode83 = reverseLinkedList32.reverseIterative(listNode79);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i84 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode79);
        com.github.pedrovgs.linkedlist.ListNode listNode86 = findKthElement0.find(listNode79, 0);
        com.github.pedrovgs.linkedlist.ListNode listNode87 = null;
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode89 = findKthElement0.find3(listNode87, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listNode28);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays40);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays41);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(listnode_i58);
        org.junit.Assert.assertNotNull(listNode59);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays65);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays66);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(listNode72);
        org.junit.Assert.assertNotNull(listNode79);
        org.junit.Assert.assertNotNull(listnode_i82);
        org.junit.Assert.assertNotNull(listNode83);
        org.junit.Assert.assertNotNull(listnode_i84);
        org.junit.Assert.assertNotNull(listNode86);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test391");
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced0 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.binarytree.BinaryNode binaryNode1 = null;
        boolean b2 = isTreeBalanced0.check(binaryNode1);
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = isBST3.checkRecursive(binarynode_i7);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals9 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = binarynode_i13.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = binarynode_i18.getRight();
        boolean b21 = binaryTreeEquals9.areEqualsIterative(binarynode_i13, binarynode_i18);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = binarynode_i13.getLeft();
        boolean b23 = isBST3.checkIterative(binarynode_i13);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian24 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d27 = avlTreeMedian24.find(binarynode_i26);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor28 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals29 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        boolean b39 = binarynode_i38.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = binarynode_i38.getRight();
        boolean b41 = binaryTreeEquals29.areEqualsIterative(binarynode_i33, binarynode_i38);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        boolean b46 = binarynode_i45.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode51 = lowestCommonAncestor28.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i45, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i50);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = binarynode_i38.getLeft();
        double d53 = avlTreeMedian24.find(binarynode_i38);
        boolean b54 = isBST3.checkRecursive(binarynode_i38);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor55 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals56 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        boolean b61 = binarynode_i60.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        boolean b66 = binarynode_i65.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = binarynode_i65.getRight();
        boolean b68 = binaryTreeEquals56.areEqualsIterative(binarynode_i60, binarynode_i65);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST69 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array71 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i72 = sortedArrayToBST69.transform(i_array71);
        boolean b73 = binarynode_i72.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST74 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array76 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = sortedArrayToBST74.transform(i_array76);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode78 = lowestCommonAncestor55.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i65, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i72, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i77);
        boolean b79 = isBST3.checkIterative(binarynode_i65);
        com.github.pedrovgs.problem18.IsBST isBST80 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST81 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array83 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = sortedArrayToBST81.transform(i_array83);
        boolean b85 = isBST80.checkRecursive(binarynode_i84);
        boolean b86 = binarynode_i84.hasRight();
        java.lang.Integer i87 = binarynode_i84.getData();
        boolean b88 = isBST3.checkRecursive(binarynode_i84);
        boolean b89 = isTreeBalanced0.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i90 = binarynode_i84.getLeft();
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == false);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNull(binarynode_i20);
        org.junit.Assert.assertTrue(b21 == true);
        org.junit.Assert.assertNull(binarynode_i22);
        org.junit.Assert.assertTrue(b23 == true);
        org.junit.Assert.assertTrue(d27 == 10.0d);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNull(binarynode_i40);
        org.junit.Assert.assertTrue(b41 == true);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertNull(binaryNode51);
        org.junit.Assert.assertNull(binarynode_i52);
        org.junit.Assert.assertTrue(d53 == 100.0d);
        org.junit.Assert.assertTrue(b54 == true);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertNull(binarynode_i67);
        org.junit.Assert.assertTrue(b68 == true);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(binarynode_i72);
        org.junit.Assert.assertTrue(b73 == false);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(binarynode_i77);
        org.junit.Assert.assertNull(binaryNode78);
        org.junit.Assert.assertTrue(b79 == true);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(binarynode_i84);
        org.junit.Assert.assertTrue(b85 == true);
        org.junit.Assert.assertTrue(b86 == false);
        org.junit.Assert.assertTrue("'" + i87 + "' != '" + 100 + "'", i87.equals(100));
        org.junit.Assert.assertTrue(b88 == true);
        org.junit.Assert.assertTrue(b89 == true);
        org.junit.Assert.assertNull(binarynode_i90);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test392");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList1 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList2 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i7 = reverseLinkedList3.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        boolean b8 = palindromeList2.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        boolean b9 = palindromeList1.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        java.lang.String str12 = listnode_mergeSortedArrays11.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays13 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays14 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays13);
        java.lang.String str15 = listnode_mergeSortedArrays14.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays14.setData(mergeSortedArrays16);
        listnode_mergeSortedArrays11.setNext(listnode_mergeSortedArrays14);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays11.getNext();
        boolean b20 = palindromeList1.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays19);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList21 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements22 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList23 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays24);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = listnode_mergeSortedArrays25.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = listnode_mergeSortedArrays25.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = null;
        binarynode_i29.setRight(binarynode_i30);
        boolean b32 = listnode_mergeSortedArrays25.equals((java.lang.Object) binarynode_i30);
        com.github.pedrovgs.linkedlist.ListNode listNode33 = reverseLinkedList23.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays25);
        removeListDuplicatedElements22.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode33);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements35 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList36 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        java.lang.String str39 = listnode_mergeSortedArrays38.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode40 = reverseLinkedList36.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays38);
        removeListDuplicatedElements35.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        removeListDuplicatedElements22.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i43 = getTheElementInTheMiddleOfTheList21.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode40);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements44 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList45 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays46);
        java.lang.String str48 = listnode_mergeSortedArrays47.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode49 = reverseLinkedList45.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        removeListDuplicatedElements44.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i51 = getTheElementInTheMiddleOfTheList21.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode49);
        boolean b52 = palindromeList1.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i51);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList53 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays54 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays54);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = listnode_mergeSortedArrays55.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = listnode_mergeSortedArrays55.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = null;
        binarynode_i59.setRight(binarynode_i60);
        boolean b62 = listnode_mergeSortedArrays55.equals((java.lang.Object) binarynode_i60);
        com.github.pedrovgs.linkedlist.ListNode listNode63 = reverseLinkedList53.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays55);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList64 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays65 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays66 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays65);
        java.lang.String str67 = listnode_mergeSortedArrays66.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i68 = reverseLinkedList64.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays66);
        com.github.pedrovgs.problem62.PalindromeList palindromeList69 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList70 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays71 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays72 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays71);
        java.lang.String str73 = listnode_mergeSortedArrays72.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i74 = reverseLinkedList70.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays72);
        boolean b75 = palindromeList69.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays72);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays76 = listnode_mergeSortedArrays72.getNext();
        listnode_mergeSortedArrays66.setNext(listnode_mergeSortedArrays72);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i78 = reverseLinkedList53.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays72);
        boolean b79 = palindromeList1.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_i78);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements80 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList81 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays82 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays83 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays82);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays84 = listnode_mergeSortedArrays83.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays85 = listnode_mergeSortedArrays83.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i87 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i88 = null;
        binarynode_i87.setRight(binarynode_i88);
        boolean b90 = listnode_mergeSortedArrays83.equals((java.lang.Object) binarynode_i88);
        com.github.pedrovgs.linkedlist.ListNode listNode91 = reverseLinkedList81.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays83);
        removeListDuplicatedElements80.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode91);
        boolean b93 = palindromeList1.checkReversing(listNode91);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i95 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode91, 3628800);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listnode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays26);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays27);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertNotNull(listNode33);
        org.junit.Assert.assertNotNull(listNode40);
        org.junit.Assert.assertNotNull(listnode_i43);
        org.junit.Assert.assertNotNull(listNode49);
        org.junit.Assert.assertNotNull(listnode_i51);
        org.junit.Assert.assertTrue(b52 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays56);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays57);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNotNull(listNode63);
        org.junit.Assert.assertNotNull(listnode_i68);
        org.junit.Assert.assertNotNull(listnode_i74);
        org.junit.Assert.assertTrue(b75 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays76);
        org.junit.Assert.assertNotNull(listnode_i78);
        org.junit.Assert.assertTrue(b79 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays84);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays85);
        org.junit.Assert.assertTrue(b90 == false);
        org.junit.Assert.assertNotNull(listNode91);
        org.junit.Assert.assertTrue(b93 == true);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test393");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        java.lang.Integer i8 = stack_i2.push((java.lang.Integer) 10);
        java.lang.Object[] obj_array9 = stack_i2.toArray();
        java.util.stream.Stream<java.lang.Integer> stream_i10 = stack_i2.parallelStream();
        stack_i2.removeAllElements();
        try {
            java.lang.Integer i12 = stack_i2.peek();
            org.junit.Assert.fail("Expected exception of type java.util.EmptyStackException");
        } catch (java.util.EmptyStackException e) {
        }
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertTrue("'" + i8 + "' != '" + 10 + "'", i8.equals(10));
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertNotNull(stream_i10);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test394");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        boolean b5 = binarynode_i4.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = sortedArrayToBST6.transform(i_array8);
        boolean b10 = binarynode_i9.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = binarynode_i9.getRight();
        boolean b12 = binaryTreeEquals0.areEqualsIterative(binarynode_i4, binarynode_i9);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = binarynode_i4.getLeft();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = null;
        binarynode_i4.setLeft(binarynode_i14);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue(b5 == false);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(binarynode_i9);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertNull(binarynode_i13);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test395");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate("35");
        boolean b6 = uniqueChars0.evaluate2("[-1]");
        boolean b8 = uniqueChars0.evaluate("[0, 1, 1, -1]");
        boolean b10 = uniqueChars0.evaluate2("/]1-[/]1- ,1 ,1 ,0[/01/");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(b10 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test396");
        com.github.pedrovgs.problem76.InsertionSort insertionSort0 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.problem8.SplitArray splitArray4 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array7 = new int[] { (byte) 1, (byte) 10 };
        splitArray4.splitSwappingPartition(i_array7);
        int[] i_array15 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray4.splitSwappingRecursive(i_array15);
        com.github.pedrovgs.problem8.SplitArray splitArray17 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array20 = new int[] { (byte) 1, (byte) 10 };
        splitArray17.splitSwappingPartition(i_array20);
        int[] i_array28 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray17.splitSwappingRecursive(i_array28);
        int[] i_array30 = mergeSortedArrays2.merge(i_array15, i_array28);
        splitArray1.splitSwappingIterative(i_array28);
        insertionSort0.sort(i_array28);
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber33 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem72.FindTheMissingNumber> listnode_findTheMissingNumber34 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem72.FindTheMissingNumber>(findTheMissingNumber33);
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray35 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem75.SelectionSort selectionSort36 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray37 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array40 = new int[] { (byte) 1, (byte) 10 };
        splitArray37.splitSwappingPartition(i_array40);
        selectionSort36.sort(i_array40);
        moveZerosInArray35.moveUsingTwoPointers(i_array40);
        int i44 = findTheMissingNumber33.find(i_array40);
        insertionSort0.sort(i_array40);
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements46 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral47 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array48 = new int[][] {};
        int[] i_array49 = goThroughMatrixInSpiral47.go(i_array_array48);
        int[] i_array50 = multiplyArrayElements46.multiply(i_array49);
        insertionSort0.sort(i_array49);
        com.github.pedrovgs.problem80.QuickSort quickSort52 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem8.SplitArray splitArray53 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array56 = new int[] { (byte) 1, (byte) 10 };
        splitArray53.splitSwappingPartition(i_array56);
        com.github.pedrovgs.problem2.Vector vector58 = new com.github.pedrovgs.problem2.Vector(i_array56);
        quickSort52.sort(i_array56);
        insertionSort0.sort(i_array56);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertTrue(i44 == (-8));
        org.junit.Assert.assertNotNull(i_array_array48);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array56);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test397");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode44 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i43);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST45 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array47 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = sortedArrayToBST45.transform(i_array47);
        java.lang.String str49 = binarynode_i48.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_50 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_50.push((int) (byte) 10);
        int i53 = stack1_50.getMin();
        boolean b54 = binarynode_i48.equals((java.lang.Object) stack1_50);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel55 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST56 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        boolean b61 = isBST56.checkRecursive(binarynode_i60);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode62 = binaryTreeByLevel55.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i60);
        binarynode_i48.setRight(binarynode_i60);
        boolean b64 = binarynode_i48.hasLeft();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode65 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i48);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST66 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array68 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = sortedArrayToBST66.transform(i_array68);
        java.lang.String str70 = binarynode_i69.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_71 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_71.push((int) (byte) 10);
        int i74 = stack1_71.getMin();
        boolean b75 = binarynode_i69.equals((java.lang.Object) stack1_71);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel76 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST77 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST78 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array80 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i81 = sortedArrayToBST78.transform(i_array80);
        boolean b82 = isBST77.checkRecursive(binarynode_i81);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode83 = binaryTreeByLevel76.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i81);
        binarynode_i69.setRight(binarynode_i81);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode85 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i81);
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertNotNull(list_binaryNode44);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(binarynode_i48);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "BinaryNode{data=100}" + "'", str49.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i53 == 10);
        org.junit.Assert.assertTrue(b54 == false);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue(b61 == true);
        org.junit.Assert.assertNotNull(list_binaryNode62);
        org.junit.Assert.assertTrue(b64 == false);
        org.junit.Assert.assertNotNull(list_binaryNode65);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(binarynode_i69);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "BinaryNode{data=100}" + "'", str70.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i74 == 10);
        org.junit.Assert.assertTrue(b75 == false);
        org.junit.Assert.assertNotNull(i_array80);
        org.junit.Assert.assertNotNull(binarynode_i81);
        org.junit.Assert.assertTrue(b82 == true);
        org.junit.Assert.assertNotNull(list_binaryNode83);
        org.junit.Assert.assertNotNull(list_binaryNode85);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test398");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        boolean b8 = vector_i5.remove((java.lang.Object) (short) -1);
        int i10 = vector_i5.indexOf((java.lang.Object) 1);
        int i12 = vector_i5.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj13 = vector_i5.clone();
        java.lang.Object obj14 = null;
        int i15 = vector_i5.lastIndexOf(obj14);
        int i17 = stack2_0.indexOf(obj14, 0);
        try {
            stack2_0.setElementAt((java.lang.Integer) 27, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == (-1));
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue(i15 == (-1));
        org.junit.Assert.assertTrue(i17 == (-1));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test399");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel1 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel2 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = isBST3.checkRecursive(binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreeByLevel2.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode10 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i16 = new java.util.Vector<java.lang.Integer>();
        boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i16, i_array15);
        int i20 = vector_i16.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        vector_i16.trimToSize();
        vector_i16.add((int) (short) 0, (java.lang.Integer) 0);
        java.util.stream.Stream<java.lang.Integer> stream_i25 = vector_i16.stream();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        boolean b30 = vector_i16.removeElement((java.lang.Object) sortedArrayToBST26);
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem24.SortedArrayToBST> binarynode_sortedArrayToBST31 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem24.SortedArrayToBST>(sortedArrayToBST26);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode32 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_sortedArrayToBST31);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor33 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals34 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        boolean b39 = binarynode_i38.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = sortedArrayToBST40.transform(i_array42);
        boolean b44 = binarynode_i43.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = binarynode_i43.getRight();
        boolean b46 = binaryTreeEquals34.areEqualsIterative(binarynode_i38, binarynode_i43);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        boolean b51 = binarynode_i50.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode56 = lowestCommonAncestor33.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i43, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i50, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55);
        java.lang.Integer i57 = binarynode_i50.getData();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode58 = binaryTreeByLevel1.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i50);
        try {
            java.lang.Integer i60 = findMinNumberAtPosition0.find(binarynode_i50, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(list_binaryNode10);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertTrue(i20 == (-1));
        org.junit.Assert.assertNotNull(stream_i25);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertTrue(b30 == false);
        org.junit.Assert.assertNotNull(list_binaryNode32);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == true);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertNull(binaryNode56);
        org.junit.Assert.assertTrue("'" + i57 + "' != '" + 100 + "'", i57.equals(100));
        org.junit.Assert.assertNotNull(list_binaryNode58);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test400");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array3 = new int[] { (byte) 1, (byte) 10 };
        splitArray0.splitSwappingPartition(i_array3);
        int[] i_array11 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray0.splitSwappingRecursive(i_array11);
        com.github.pedrovgs.problem8.SplitArray splitArray13 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array16 = new int[] { (byte) 1, (byte) 10 };
        splitArray13.splitSwappingPartition(i_array16);
        int[] i_array24 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray13.splitSwappingRecursive(i_array24);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort27 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray28 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array31 = new int[] { (byte) 1, (byte) 10 };
        splitArray28.splitSwappingPartition(i_array31);
        selectionSort27.sort(i_array31);
        com.github.pedrovgs.problem8.SplitArray splitArray34 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array37 = new int[] { (byte) 1, (byte) 10 };
        splitArray34.splitSwappingPartition(i_array37);
        int[] i_array45 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray34.splitSwappingRecursive(i_array45);
        int[] i_array47 = mergeSortedArrays26.merge(i_array31, i_array45);
        splitArray13.splitSwappingIterative(i_array31);
        splitArray0.splitSorting(i_array31);
        com.github.pedrovgs.problem12.MoveZerosInArray moveZerosInArray50 = new com.github.pedrovgs.problem12.MoveZerosInArray();
        com.github.pedrovgs.problem75.SelectionSort selectionSort51 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray52 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array55 = new int[] { (byte) 1, (byte) 10 };
        splitArray52.splitSwappingPartition(i_array55);
        selectionSort51.sort(i_array55);
        moveZerosInArray50.moveUsingTwoPointers(i_array55);
        splitArray0.splitSwappingRecursive(i_array55);
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array55);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test401");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = listnode_mergeSortedArrays3.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = null;
        binarynode_i7.setRight(binarynode_i8);
        boolean b10 = listnode_mergeSortedArrays3.equals((java.lang.Object) binarynode_i8);
        com.github.pedrovgs.linkedlist.ListNode listNode11 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode11);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements0);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList14 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i22 = getTheElementInTheMiddleOfTheList14.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList24 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = listnode_mergeSortedArrays26.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = listnode_mergeSortedArrays26.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = null;
        binarynode_i30.setRight(binarynode_i31);
        boolean b33 = listnode_mergeSortedArrays26.equals((java.lang.Object) binarynode_i31);
        com.github.pedrovgs.linkedlist.ListNode listNode34 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode35 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        java.lang.String str38 = listnode_mergeSortedArrays37.toString();
        deleteListNode35.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays41 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays40);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers42 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b43 = listnode_mergeSortedArrays41.equals((java.lang.Object) mergeBinaryNumbers42);
        deleteListNode35.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i45 = reverseLinkedList24.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays41);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays46);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers48 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b49 = listnode_mergeSortedArrays47.equals((java.lang.Object) mergeBinaryNumbers48);
        com.github.pedrovgs.linkedlist.ListNode listNode50 = reverseLinkedList24.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel51 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel52 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST53 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST54 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array56 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = sortedArrayToBST54.transform(i_array56);
        boolean b58 = isBST53.checkRecursive(binarynode_i57);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode59 = binaryTreeByLevel52.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i57);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode60 = binaryTreeByLevel51.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i57);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth61 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i64 = new java.util.Stack<java.lang.Integer>();
        boolean b65 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i64, i_array63);
        boolean b66 = stack_i64.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i68 = stack_i64.search((java.lang.Object) sortedArrayToBST67);
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST67.transform(i_array72);
        int i74 = binaryTreeDepth61.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth75 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array77 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i78 = new java.util.Stack<java.lang.Integer>();
        boolean b79 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i78, i_array77);
        boolean b80 = stack_i78.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST81 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i82 = stack_i78.search((java.lang.Object) sortedArrayToBST81);
        java.lang.Integer[] i_array86 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i87 = sortedArrayToBST81.transform(i_array86);
        int i88 = binaryTreeDepth75.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i87);
        int i89 = binaryTreeDepth61.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i87);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode90 = binaryTreeByLevel51.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i87);
        boolean b91 = listNode50.equals((java.lang.Object) binaryTreeByLevel51);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays5);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(listNode11);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listnode_i22);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays27);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays28);
        org.junit.Assert.assertTrue(b33 == false);
        org.junit.Assert.assertNotNull(listNode34);
        org.junit.Assert.assertTrue(b43 == false);
        org.junit.Assert.assertNotNull(listnode_i45);
        org.junit.Assert.assertTrue(b49 == false);
        org.junit.Assert.assertNotNull(listNode50);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(binarynode_i57);
        org.junit.Assert.assertTrue(b58 == true);
        org.junit.Assert.assertNotNull(list_binaryNode59);
        org.junit.Assert.assertNotNull(list_binaryNode60);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertTrue(b65 == true);
        org.junit.Assert.assertTrue(b66 == false);
        org.junit.Assert.assertTrue(i68 == (-1));
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertTrue(i74 == 2);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertTrue(b79 == true);
        org.junit.Assert.assertTrue(b80 == false);
        org.junit.Assert.assertTrue(i82 == (-1));
        org.junit.Assert.assertNotNull(i_array86);
        org.junit.Assert.assertNotNull(binarynode_i87);
        org.junit.Assert.assertTrue(i88 == 2);
        org.junit.Assert.assertTrue(i89 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode90);
        org.junit.Assert.assertTrue(b91 == false);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test402");
        com.github.pedrovgs.problem75.SelectionSort selectionSort0 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array4 = new int[] { (byte) 1, (byte) 10 };
        splitArray1.splitSwappingPartition(i_array4);
        selectionSort0.sort(i_array4);
        int[] i_array7 = null;
        try {
            selectionSort0.sort(i_array7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test403");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel1 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel2 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST4 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array6 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = sortedArrayToBST4.transform(i_array6);
        boolean b8 = isBST3.checkRecursive(binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreeByLevel2.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode10 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i11 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian12 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d15 = avlTreeMedian12.find(binarynode_i14);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor16 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals17 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        boolean b27 = binarynode_i26.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i26.getRight();
        boolean b29 = binaryTreeEquals17.areEqualsIterative(binarynode_i21, binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode39 = lowestCommonAncestor16.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = binarynode_i26.getLeft();
        double d41 = avlTreeMedian12.find(binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        boolean b46 = binarynode_i45.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = binarynode_i45.getRight();
        java.lang.Integer i48 = binarynode_i45.getData();
        binarynode_i26.setLeft(binarynode_i45);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i50 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder51 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        java.lang.String str56 = binarynode_i55.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_57 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_57.push((int) (byte) 10);
        int i60 = stack1_57.getMin();
        boolean b61 = binarynode_i55.equals((java.lang.Object) stack1_57);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode62 = binaryTreePostOrder51.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST63 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = sortedArrayToBST63.transform(i_array65);
        boolean b67 = binarynode_i66.hasRight();
        java.lang.Integer i68 = binarynode_i66.getData();
        boolean b69 = binarynode_i66.hasRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode70 = binaryTreePostOrder51.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i71 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(binarynode_i7);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(list_binaryNode10);
        org.junit.Assert.assertNotNull(list_binarynode_i11);
        org.junit.Assert.assertTrue(d15 == 10.0d);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertNull(binaryNode39);
        org.junit.Assert.assertNull(binarynode_i40);
        org.junit.Assert.assertTrue(d41 == 100.0d);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertNull(binarynode_i47);
        org.junit.Assert.assertTrue("'" + i48 + "' != '" + 100 + "'", i48.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i50);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "BinaryNode{data=100}" + "'", str56.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i60 == 10);
        org.junit.Assert.assertTrue(b61 == false);
        org.junit.Assert.assertNotNull(list_binaryNode62);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(binarynode_i66);
        org.junit.Assert.assertTrue(b67 == false);
        org.junit.Assert.assertTrue("'" + i68 + "' != '" + 100 + "'", i68.equals(100));
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNotNull(list_binaryNode70);
        org.junit.Assert.assertNotNull(list_binarynode_i71);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test404");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate2("BinaryNode{data=100}");
        boolean b6 = uniqueChars0.evaluate2("[");
        boolean b8 = uniqueChars0.evaluate("");
        boolean b10 = uniqueChars0.evaluate2("[nul2]");
        boolean b12 = uniqueChars0.evaluate("35");
        boolean b14 = uniqueChars0.evaluate2("35");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertTrue(b14 == true);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test405");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.lang.Object obj8 = vector_i4.clone();
        boolean b10 = vector_i4.add((java.lang.Integer) 1);
        boolean b12 = vector_i4.add((java.lang.Integer) (-2147471027));
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == true);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test406");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        boolean b9 = vector_i4.add((java.lang.Integer) 10);
        java.util.stream.Stream<java.lang.Integer> stream_i10 = vector_i4.parallelStream();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertNotNull(stream_i10);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test407");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.problem8.SplitArray splitArray3 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array6 = new int[] { (byte) 1, (byte) 10 };
        splitArray3.splitSwappingPartition(i_array6);
        int[] i_array14 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray3.splitSwappingRecursive(i_array14);
        com.github.pedrovgs.problem8.SplitArray splitArray16 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array19 = new int[] { (byte) 1, (byte) 10 };
        splitArray16.splitSwappingPartition(i_array19);
        int[] i_array27 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray16.splitSwappingRecursive(i_array27);
        int[] i_array29 = mergeSortedArrays1.merge(i_array14, i_array27);
        splitArray0.splitSwappingIterative(i_array27);
        com.github.pedrovgs.problem8.SplitArray splitArray31 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray32 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array35 = new int[] { (byte) 1, (byte) 10 };
        splitArray32.splitSwappingPartition(i_array35);
        splitArray31.splitSwappingRecursive(i_array35);
        splitArray0.splitSwappingPartition(i_array35);
        int[] i_array39 = null;
        try {
            splitArray0.splitSwappingRecursive(i_array39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array6);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(i_array29);
        org.junit.Assert.assertNotNull(i_array35);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test408");
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel0 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel1 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST2 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = isBST2.checkRecursive(binarynode_i6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode8 = binaryTreeByLevel1.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreeByLevel0.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i6);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth10 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i13 = new java.util.Stack<java.lang.Integer>();
        boolean b14 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i13, i_array12);
        boolean b15 = stack_i13.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST16 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i17 = stack_i13.search((java.lang.Object) sortedArrayToBST16);
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST16.transform(i_array21);
        int i23 = binaryTreeDepth10.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22);
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth24 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i27 = new java.util.Stack<java.lang.Integer>();
        boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i27, i_array26);
        boolean b29 = stack_i27.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i31 = stack_i27.search((java.lang.Object) sortedArrayToBST30);
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST30.transform(i_array35);
        int i37 = binaryTreeDepth24.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        int i38 = binaryTreeDepth10.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode39 = binaryTreeByLevel0.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates41 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates42 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        java.lang.Integer[] i_array47 = removeDuplicates42.removeUsingSorting(i_array45);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST48 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = sortedArrayToBST48.transform(i_array50);
        java.lang.Integer[] i_array52 = removeDuplicates42.removeUsingSorting(i_array50);
        java.lang.Integer[] i_array53 = removeDuplicates41.removeUsingSorting(i_array50);
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 2, (-14040), (-14040), 27 };
        java.lang.Integer[] i_array59 = removeDuplicates41.removeUsingSet(i_array58);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates60 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates61 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST62 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array64 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = sortedArrayToBST62.transform(i_array64);
        java.lang.Integer[] i_array66 = removeDuplicates61.removeUsingSorting(i_array64);
        java.lang.Integer[] i_array67 = removeDuplicates60.removeUsingSorting(i_array66);
        java.lang.Integer[] i_array68 = removeDuplicates41.removeUsingSet(i_array67);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates69 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        java.lang.Integer[] i_array74 = removeDuplicates69.removeUsingSorting(i_array72);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST75 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array77 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = sortedArrayToBST75.transform(i_array77);
        java.lang.Integer[] i_array79 = removeDuplicates69.removeUsingSorting(i_array77);
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates80 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem10.RemoveDuplicates removeDuplicates81 = new com.github.pedrovgs.problem10.RemoveDuplicates();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST82 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array84 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = sortedArrayToBST82.transform(i_array84);
        java.lang.Integer[] i_array86 = removeDuplicates81.removeUsingSorting(i_array84);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST87 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array89 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i90 = sortedArrayToBST87.transform(i_array89);
        java.lang.Integer[] i_array91 = removeDuplicates81.removeUsingSorting(i_array89);
        java.lang.Integer[] i_array92 = removeDuplicates80.removeUsingSorting(i_array89);
        java.lang.Integer[] i_array93 = removeDuplicates69.removeUsingSet(i_array92);
        java.lang.Integer[] i_array94 = removeDuplicates41.removeUsingSet(i_array93);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i95 = sortedArrayToBST40.transform(i_array93);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode96 = binaryTreeByLevel0.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i95);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertNotNull(list_binaryNode8);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertTrue(i17 == (-1));
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertTrue(i23 == 2);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertTrue(b28 == true);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertTrue(i31 == (-1));
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(i37 == 2);
        org.junit.Assert.assertTrue(i38 == 2);
        org.junit.Assert.assertNotNull(list_binaryNode39);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(binarynode_i51);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(binarynode_i65);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertNotNull(binarynode_i78);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(binarynode_i85);
        org.junit.Assert.assertNotNull(i_array86);
        org.junit.Assert.assertNotNull(i_array89);
        org.junit.Assert.assertNotNull(binarynode_i90);
        org.junit.Assert.assertNotNull(i_array91);
        org.junit.Assert.assertNotNull(i_array92);
        org.junit.Assert.assertNotNull(i_array93);
        org.junit.Assert.assertNotNull(i_array94);
        org.junit.Assert.assertNotNull(binarynode_i95);
        org.junit.Assert.assertNotNull(list_binaryNode96);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test409");
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian0 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i2 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d3 = avlTreeMedian0.find(binarynode_i2);
        java.lang.Integer[] i_array7 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i8 = new java.util.Vector<java.lang.Integer>();
        boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i8, i_array7);
        boolean b11 = vector_i8.remove((java.lang.Object) (short) -1);
        int i13 = vector_i8.indexOf((java.lang.Object) 1);
        int i15 = vector_i8.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj16 = vector_i8.clone();
        java.lang.Object obj17 = null;
        int i18 = vector_i8.lastIndexOf(obj17);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        int i21 = vector_i8.lastIndexOf((java.lang.Object) binarynode_i20);
        double d22 = avlTreeMedian0.find(binarynode_i20);
        com.github.pedrovgs.problem18.IsBST isBST23 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor24 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals25 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        boolean b30 = binarynode_i29.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = binarynode_i34.getRight();
        boolean b37 = binaryTreeEquals25.areEqualsIterative(binarynode_i29, binarynode_i34);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode47 = lowestCommonAncestor24.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i34, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i41, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i46);
        java.lang.String str48 = binarynode_i46.toString();
        boolean b49 = isBST23.checkIterative(binarynode_i46);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST50 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array52 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = sortedArrayToBST50.transform(i_array52);
        boolean b54 = binarynode_i53.hasRight();
        java.lang.Integer i55 = binarynode_i53.getData();
        boolean b56 = isBST23.checkRecursive(binarynode_i53);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder57 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor58 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals59 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST60 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array62 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = sortedArrayToBST60.transform(i_array62);
        boolean b64 = binarynode_i63.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST65 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array67 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = sortedArrayToBST65.transform(i_array67);
        boolean b69 = binarynode_i68.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = binarynode_i68.getRight();
        boolean b71 = binaryTreeEquals59.areEqualsIterative(binarynode_i63, binarynode_i68);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        boolean b76 = binarynode_i75.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode81 = lowestCommonAncestor58.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i68, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode82 = binaryTreePreOrder57.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        boolean b83 = isBST23.checkIterative(binarynode_i75);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = binarynode_i75.getRight();
        try {
            double d85 = avlTreeMedian0.find(binarynode_i84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d3 == 10.0d);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertTrue(i13 == 1);
        org.junit.Assert.assertTrue(i15 == (-1));
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue(i18 == (-1));
        org.junit.Assert.assertTrue(i21 == (-1));
        org.junit.Assert.assertTrue(d22 == 27.0d);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertTrue(b30 == false);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == true);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertNull(binaryNode47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "BinaryNode{data=100}" + "'", str48.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(b49 == true);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(binarynode_i53);
        org.junit.Assert.assertTrue(b54 == false);
        org.junit.Assert.assertTrue("'" + i55 + "' != '" + 100 + "'", i55.equals(100));
        org.junit.Assert.assertTrue(b56 == true);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(binarynode_i63);
        org.junit.Assert.assertTrue(b64 == false);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == false);
        org.junit.Assert.assertNull(binarynode_i70);
        org.junit.Assert.assertTrue(b71 == true);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == false);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertNull(binaryNode81);
        org.junit.Assert.assertNotNull(list_binaryNode82);
        org.junit.Assert.assertTrue(b83 == true);
        org.junit.Assert.assertNull(binarynode_i84);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test410");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_0.push((int) (byte) 10);
        try {
            stack1_0.removeElementAt(2147483620);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test411");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(0);
        int i4 = factorial0.getIterative((int) '#');
        int i6 = factorial0.getIterative(3628800);
        try {
            int i8 = factorial0.getIterative((-24));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 0);
        org.junit.Assert.assertTrue(i6 == 0);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test412");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("10");
        boolean b6 = palindromes0.evaluate("/23/[/#2021/");
        boolean b8 = palindromes0.evaluate("");
        boolean b10 = palindromes0.evaluate("-");
        boolean b12 = palindromes0.evaluate("-");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == true);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == true);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test413");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder1 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder2 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor7 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i17.getRight();
        boolean b20 = binaryTreeEquals8.areEqualsIterative(binarynode_i12, binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode30 = lowestCommonAncestor7.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i17.getLeft();
        double d32 = avlTreeMedian3.find(binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        java.lang.Integer i39 = binarynode_i36.getData();
        binarynode_i17.setLeft(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i41 = binaryTreeInOrder2.getIterative(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode42 = binaryTreePostOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        boolean b47 = binarynode_i46.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = binarynode_i46.getRight();
        java.lang.Integer i49 = binarynode_i46.getData();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode50 = binaryTreePostOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i46);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced51 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem75.SelectionSort selectionSort52 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort> pair_isTreeBalanced_selectionSort53 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort>(isTreeBalanced51, selectionSort52);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST54 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array56 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = sortedArrayToBST54.transform(i_array56);
        boolean b58 = isTreeBalanced51.check((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i57);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode59 = binaryTreePostOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i57);
        try {
            java.lang.Integer i61 = findMinNumberAtPosition0.find(binarynode_i57, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertNull(binaryNode30);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(d32 == 100.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i41);
        org.junit.Assert.assertNotNull(list_binaryNode42);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNull(binarynode_i48);
        org.junit.Assert.assertTrue("'" + i49 + "' != '" + 100 + "'", i49.equals(100));
        org.junit.Assert.assertNotNull(list_binaryNode50);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(binarynode_i57);
        org.junit.Assert.assertTrue(b58 == true);
        org.junit.Assert.assertNotNull(list_binaryNode59);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test414");
        com.github.pedrovgs.problem29.AreAnagrams areAnagrams0 = new com.github.pedrovgs.problem29.AreAnagrams();
        boolean b3 = areAnagrams0.check("/166791211/23/[/##001/}01=atad{edoNyraniB/", "]01 ,1-[");
        org.junit.Assert.assertTrue(b3 == false);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test415");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideIterative(1, (int) (short) 100);
        float f9 = divideUsingSubtraction0.divideIterative((-2147483648), 12621);
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.01f);
        org.junit.Assert.assertTrue(f9 == (-170151.62f));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test416");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (short) -1, (int) 'a');
        float f9 = divideUsingSubtraction0.divideIterative((int) 'a', 27);
        float f12 = divideUsingSubtraction0.divideRecursive((int) (short) -1, 18);
        float f15 = divideUsingSubtraction0.divideIterative(100, (-13631485));
        float f18 = divideUsingSubtraction0.divideIterative((-13631485), 1484783616);
        float f21 = divideUsingSubtraction0.divideIterative(0, (-13631485));
        float f24 = divideUsingSubtraction0.divideRecursive(11427, 3);
        float f27 = divideUsingSubtraction0.divideIterative(49, 29);
        float f30 = divideUsingSubtraction0.divideIterative(14, 18);
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == (-0.010309278f));
        org.junit.Assert.assertTrue(f9 == 3.5925927f);
        org.junit.Assert.assertTrue(f12 == (-0.055555556f));
        org.junit.Assert.assertTrue(f15 == 315.07697f);
        org.junit.Assert.assertTrue(f18 == (-0.009180789f));
        org.junit.Assert.assertTrue(f21 == 315.077f);
        org.junit.Assert.assertTrue(f24 == 3809.0f);
        org.junit.Assert.assertTrue(f27 == 1.6896552f);
        org.junit.Assert.assertTrue(f30 == 0.7777778f);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test417");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getRecursive(0);
        int i8 = factorial0.getIterative(3);
        int i10 = factorial0.getTailRecursive((int) (byte) 100);
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 6);
        org.junit.Assert.assertTrue(i10 == 0);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test418");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        java.lang.String str5 = binarynode_i4.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_6 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_6.push((int) (byte) 10);
        int i9 = stack1_6.getMin();
        boolean b10 = binarynode_i4.equals((java.lang.Object) stack1_6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode11 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i4);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        java.lang.Integer i17 = binarynode_i15.getData();
        boolean b18 = binarynode_i15.hasRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode19 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        boolean b20 = binarynode_i15.hasRight();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "BinaryNode{data=100}" + "'", str5.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i9 == 10);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(list_binaryNode11);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertTrue("'" + i17 + "' != '" + 100 + "'", i17.equals(100));
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(list_binaryNode19);
        org.junit.Assert.assertTrue(b20 == false);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test419");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        com.github.pedrovgs.problem45.FindNthMostRepeatedElement findNthMostRepeatedElement12 = new com.github.pedrovgs.problem45.FindNthMostRepeatedElement();
        boolean b13 = vector_i4.contains((java.lang.Object) findNthMostRepeatedElement12);
        com.github.pedrovgs.problem28.FindSums findSums14 = new com.github.pedrovgs.problem28.FindSums();
        com.github.pedrovgs.problem8.SplitArray splitArray15 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray16 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array19 = new int[] { (byte) 1, (byte) 10 };
        splitArray16.splitSwappingPartition(i_array19);
        splitArray15.splitSwappingRecursive(i_array19);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i23 = findSums14.find(i_array19, 0);
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_24 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_24.push((int) (byte) 10);
        int i27 = stack1_24.getMin();
        int i28 = stack1_24.getMin();
        com.github.pedrovgs.problem75.SelectionSort selectionSort29 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray30 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array33 = new int[] { (byte) 1, (byte) 10 };
        splitArray30.splitSwappingPartition(i_array33);
        selectionSort29.sort(i_array33);
        int i36 = stack1_24.search((java.lang.Object) i_array33);
        java.util.List<com.github.pedrovgs.pair.Pair<java.lang.Integer, java.lang.Integer>> list_pair_i_i38 = findSums14.find(i_array33, (int) (byte) 1);
        try {
            int i40 = findNthMostRepeatedElement12.find(i_array33, 107);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array19);
        org.junit.Assert.assertNotNull(list_pair_i_i23);
        org.junit.Assert.assertTrue(i27 == 10);
        org.junit.Assert.assertTrue(i28 == 10);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertTrue(i36 == (-1));
        org.junit.Assert.assertNotNull(list_pair_i_i38);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test420");
        com.github.pedrovgs.problem68.IsEven isEven0 = new com.github.pedrovgs.problem68.IsEven();
        boolean b2 = isEven0.check((int) (byte) 1);
        boolean b4 = isEven0.check(0);
        boolean b6 = isEven0.check(4);
        boolean b8 = isEven0.check((-13631485));
        boolean b10 = isEven0.check(72);
        boolean b12 = isEven0.check((-2147483648));
        boolean b14 = isEven0.check((-6));
        boolean b16 = isEven0.check(82);
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(b8 == false);
        org.junit.Assert.assertTrue(b10 == true);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertTrue(b16 == true);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test421");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) (byte) 1);
        int i8 = bitsCounter0.countBitsToOneBasedOnString(101);
        int i10 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(32);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((-24));
        int i14 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((-2));
        int i16 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(11426);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 1);
        org.junit.Assert.assertTrue(i8 == 4);
        org.junit.Assert.assertTrue(i10 == 1);
        org.junit.Assert.assertTrue(i12 == 0);
        org.junit.Assert.assertTrue(i14 == 0);
        org.junit.Assert.assertTrue(i16 == 6);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test422");
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 1, (-1), 100, 0 };
        java.util.Vector<java.lang.Integer> vector_i5 = new java.util.Vector<java.lang.Integer>();
        boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i5, i_array4);
        int i9 = vector_i5.lastIndexOf((java.lang.Object) 0.0f, (int) (short) 0);
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced10 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        int i11 = vector_i5.lastIndexOf((java.lang.Object) isTreeBalanced10);
        java.util.Iterator<java.lang.Integer> iterator_i12 = vector_i5.iterator();
        java.lang.Integer i13 = vector_i5.lastElement();
        com.github.pedrovgs.problem42.FloodFill floodFill14 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem42.FloodFill floodFill15 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral16 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array17 = new int[][] {};
        int[] i_array18 = goThroughMatrixInSpiral16.go(i_array_array17);
        floodFill15.apply(i_array_array17, (-52), 2, (int) '#', 51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral24 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array25 = new int[][] {};
        int[] i_array26 = goThroughMatrixInSpiral24.go(i_array_array25);
        int[] i_array33 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array40 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array41 = new int[][] { i_array33, i_array40 };
        int[] i_array42 = goThroughMatrixInSpiral24.go(i_array_array41);
        floodFill15.apply(i_array_array41, (-8), (-14040), 2147483647, (-8));
        floodFill14.apply(i_array_array41, 27, 0, 0, (int) ' ');
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros53 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral54 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array55 = new int[][] {};
        int[] i_array56 = goThroughMatrixInSpiral54.go(i_array_array55);
        int[] i_array59 = new int[] { 107, 3628800 };
        int[][] i_array_array60 = new int[][] { i_array59 };
        int[] i_array61 = goThroughMatrixInSpiral54.go(i_array_array60);
        rewriteRowAndColumnsWithZeros53.rewrite(i_array_array60);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral63 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array64 = new int[][] {};
        int[] i_array65 = goThroughMatrixInSpiral63.go(i_array_array64);
        rewriteRowAndColumnsWithZeros53.rewrite(i_array_array64);
        floodFill14.apply(i_array_array64, (-97), 30, 30, (int) (short) 100);
        int i72 = vector_i5.lastIndexOf((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertTrue(i9 == (-1));
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(iterator_i12);
        org.junit.Assert.assertTrue("'" + i13 + "' != '" + 0 + "'", i13.equals(0));
        org.junit.Assert.assertNotNull(i_array_array17);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array_array25);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(i_array_array41);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array_array55);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(i_array_array60);
        org.junit.Assert.assertNotNull(i_array61);
        org.junit.Assert.assertNotNull(i_array_array64);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertTrue(i72 == (-1));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test423");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder1 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian2 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d5 = avlTreeMedian2.find(binarynode_i4);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor6 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals7 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST13 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array15 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = sortedArrayToBST13.transform(i_array15);
        boolean b17 = binarynode_i16.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = binarynode_i16.getRight();
        boolean b19 = binaryTreeEquals7.areEqualsIterative(binarynode_i11, binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode29 = lowestCommonAncestor6.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i16, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i16.getLeft();
        double d31 = avlTreeMedian2.find(binarynode_i16);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = binarynode_i35.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = binarynode_i35.getRight();
        java.lang.Integer i38 = binarynode_i35.getData();
        binarynode_i16.setLeft(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i40 = binaryTreeInOrder1.getIterative(binarynode_i35);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode41 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i35);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor42 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals43 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST44 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array46 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i47 = sortedArrayToBST44.transform(i_array46);
        boolean b48 = binarynode_i47.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        boolean b53 = binarynode_i52.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = binarynode_i52.getRight();
        boolean b55 = binaryTreeEquals43.areEqualsIterative(binarynode_i47, binarynode_i52);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = binarynode_i59.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST61 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array63 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = sortedArrayToBST61.transform(i_array63);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode65 = lowestCommonAncestor42.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i64);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST66 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array68 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i69 = sortedArrayToBST66.transform(i_array68);
        boolean b70 = binarynode_i69.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i71 = binarynode_i69.getRight();
        binarynode_i59.setRight(binarynode_i69);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode73 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i69);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST74 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array76 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = sortedArrayToBST74.transform(i_array76);
        java.lang.String str78 = binarynode_i77.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_79 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_79.push((int) (byte) 10);
        int i82 = stack1_79.getMin();
        boolean b83 = binarynode_i77.equals((java.lang.Object) stack1_79);
        java.lang.String str84 = binarynode_i77.toString();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = binarynode_i77.getLeft();
        try {
            java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode86 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(d5 == 10.0d);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == false);
        org.junit.Assert.assertNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertNull(binaryNode29);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(d31 == 100.0d);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == false);
        org.junit.Assert.assertNull(binarynode_i37);
        org.junit.Assert.assertTrue("'" + i38 + "' != '" + 100 + "'", i38.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i40);
        org.junit.Assert.assertNotNull(list_binaryNode41);
        org.junit.Assert.assertNotNull(i_array46);
        org.junit.Assert.assertNotNull(binarynode_i47);
        org.junit.Assert.assertTrue(b48 == false);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue(b53 == false);
        org.junit.Assert.assertNull(binarynode_i54);
        org.junit.Assert.assertTrue(b55 == true);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == false);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(binarynode_i64);
        org.junit.Assert.assertNull(binaryNode65);
        org.junit.Assert.assertNotNull(i_array68);
        org.junit.Assert.assertNotNull(binarynode_i69);
        org.junit.Assert.assertTrue(b70 == false);
        org.junit.Assert.assertNull(binarynode_i71);
        org.junit.Assert.assertNotNull(list_binaryNode73);
        org.junit.Assert.assertNotNull(i_array76);
        org.junit.Assert.assertNotNull(binarynode_i77);
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "BinaryNode{data=100}" + "'", str78.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i82 == 10);
        org.junit.Assert.assertTrue(b83 == false);
        org.junit.Assert.assertTrue("'" + str84 + "' != '" + "BinaryNode{data=100}" + "'", str84.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNull(binarynode_i85);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test424");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((-52), (int) (byte) 100);
        int i6 = multiplicationWithoutMultiply0.calculate(1, (-14040));
        int i9 = multiplicationWithoutMultiply0.calculate((-2), (-52));
        int i12 = multiplicationWithoutMultiply0.calculate((-8), 4956);
        org.junit.Assert.assertTrue(i3 == (-5200));
        org.junit.Assert.assertTrue(i6 == (-14040));
        org.junit.Assert.assertTrue(i9 == 104);
        org.junit.Assert.assertTrue(i12 == (-39648));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test425");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        try {
            java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersCheating("", "/[-1, 10]/7/25-/23/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test426");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Integer i3 = stack2_0.peek();
        stack2_0.push((int) (short) 1);
        try {
            java.util.List<java.lang.Integer> list_i8 = stack2_0.subList(0, 10928795);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + i3 + "' != '" + (-1) + "'", i3.equals((-1)));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test427");
        com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber reverseOrderOfBinaryNumber0 = new com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber();
        int i2 = reverseOrderOfBinaryNumber0.reverse(10);
        int i4 = reverseOrderOfBinaryNumber0.reverse(7);
        int i6 = reverseOrderOfBinaryNumber0.reverse(34);
        org.junit.Assert.assertTrue(i2 == 5);
        org.junit.Assert.assertTrue(i4 == 7);
        org.junit.Assert.assertTrue(i6 == 17);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test428");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode7 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i9 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode7);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList10 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays11 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays11);
        java.lang.String str13 = listnode_mergeSortedArrays12.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = reverseLinkedList10.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays19 = listnode_mergeSortedArrays17.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = null;
        binarynode_i21.setRight(binarynode_i22);
        boolean b24 = listnode_mergeSortedArrays17.equals((java.lang.Object) binarynode_i22);
        com.github.pedrovgs.linkedlist.ListNode listNode25 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode listNode26 = reverseLinkedList10.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i27 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode26);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList28 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements29 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList30 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays32 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays31);
        java.lang.String str33 = listnode_mergeSortedArrays32.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode34 = reverseLinkedList30.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays32);
        removeListDuplicatedElements29.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i36 = getTheElementInTheMiddleOfTheList28.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i37 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode34);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList38 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements39 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList40 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        java.lang.String str43 = listnode_mergeSortedArrays42.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode44 = reverseLinkedList40.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        removeListDuplicatedElements39.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = getTheElementInTheMiddleOfTheList38.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode44);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i47 = getTheElementInTheMiddleOfTheList1.get(listnode_i46);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList48 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays49 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays50 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays49);
        java.lang.String str51 = listnode_mergeSortedArrays50.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode52 = reverseLinkedList48.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays50);
        com.github.pedrovgs.problem18.IsBST isBST53 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST54 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array56 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = sortedArrayToBST54.transform(i_array56);
        boolean b58 = isBST53.checkRecursive(binarynode_i57);
        boolean b59 = listNode52.equals((java.lang.Object) binarynode_i57);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i60 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode52);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i62 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode52, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listNode7);
        org.junit.Assert.assertNotNull(listnode_i9);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays19);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(listNode25);
        org.junit.Assert.assertNotNull(listNode26);
        org.junit.Assert.assertNotNull(listnode_i27);
        org.junit.Assert.assertNotNull(listNode34);
        org.junit.Assert.assertNotNull(listnode_i36);
        org.junit.Assert.assertNotNull(listnode_i37);
        org.junit.Assert.assertNotNull(listNode44);
        org.junit.Assert.assertNotNull(listnode_i46);
        org.junit.Assert.assertNotNull(listnode_i47);
        org.junit.Assert.assertNotNull(listNode52);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(binarynode_i57);
        org.junit.Assert.assertTrue(b58 == true);
        org.junit.Assert.assertTrue(b59 == false);
        org.junit.Assert.assertNotNull(listnode_i60);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test429");
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel0 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder1 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder2 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor7 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i17.getRight();
        boolean b20 = binaryTreeEquals8.areEqualsIterative(binarynode_i12, binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode30 = lowestCommonAncestor7.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i17.getLeft();
        double d32 = avlTreeMedian3.find(binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        java.lang.Integer i39 = binarynode_i36.getData();
        binarynode_i17.setLeft(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i41 = binaryTreeInOrder2.getIterative(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode42 = binaryTreePostOrder1.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode43 = treeToListByLevel0.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i36);
        java.lang.String str44 = binarynode_i36.toString();
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertNull(binaryNode30);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(d32 == 100.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i41);
        org.junit.Assert.assertNotNull(list_binaryNode42);
        org.junit.Assert.assertNotNull(list_binaryNode43);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "BinaryNode{data=100}" + "'", str44.equals("BinaryNode{data=100}"));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test430");
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor0 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals1 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = binarynode_i10.getRight();
        boolean b13 = binaryTreeEquals1.areEqualsIterative(binarynode_i5, binarynode_i10);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST19 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array21 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i22 = sortedArrayToBST19.transform(i_array21);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode23 = lowestCommonAncestor0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i22);
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i28 = new java.util.Vector<java.lang.Integer>();
        boolean b29 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i28, i_array27);
        boolean b31 = vector_i28.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i32 = vector_i28.elements();
        java.lang.Object[] obj_array33 = vector_i28.toArray();
        vector_i28.addElement((java.lang.Integer) (-1));
        boolean b37 = vector_i28.contains((java.lang.Object) (byte) 100);
        java.util.Enumeration<java.lang.Integer> enumeration_i38 = vector_i28.elements();
        java.lang.Integer i39 = vector_i28.firstElement();
        java.lang.Object[] obj_array40 = vector_i28.toArray();
        boolean b41 = binarynode_i10.equals((java.lang.Object) vector_i28);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(i_array21);
        org.junit.Assert.assertNotNull(binarynode_i22);
        org.junit.Assert.assertNull(binaryNode23);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertTrue(b31 == false);
        org.junit.Assert.assertNotNull(enumeration_i32);
        org.junit.Assert.assertNotNull(obj_array33);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNotNull(enumeration_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 0 + "'", i39.equals(0));
        org.junit.Assert.assertNotNull(obj_array40);
        org.junit.Assert.assertTrue(b41 == false);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test431");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        stack2_0.addElement((java.lang.Integer) (-52));
        com.github.pedrovgs.problem13.BinaryTreeByLevel binaryTreeByLevel5 = new com.github.pedrovgs.problem13.BinaryTreeByLevel();
        com.github.pedrovgs.problem18.IsBST isBST6 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = isBST6.checkRecursive(binarynode_i10);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode12 = binaryTreeByLevel5.getUsingQueue((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10);
        com.github.pedrovgs.problem18.IsBST isBST13 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization14 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        java.lang.Integer i20 = binarynode_i18.getData();
        java.lang.String str21 = binaryTreeSerialization14.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18);
        boolean b22 = isBST13.checkIterative(binarynode_i18);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode23 = binaryTreeByLevel5.getWithoutAdditionalDataStructures((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18);
        boolean b24 = stack2_0.equals((java.lang.Object) binarynode_i18);
        java.lang.Integer i25 = stack2_0.lastElement();
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == true);
        org.junit.Assert.assertNotNull(list_binaryNode12);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertTrue("'" + i20 + "' != '" + 100 + "'", i20.equals(100));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "100##" + "'", str21.equals("100##"));
        org.junit.Assert.assertTrue(b22 == true);
        org.junit.Assert.assertNotNull(list_binaryNode23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertTrue("'" + i25 + "' != '" + (-52) + "'", i25.equals((-52)));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test432");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Integer i3 = stack2_0.peek();
        java.lang.Integer i4 = stack2_0.pop();
        stack2_0.push(100);
        java.lang.Integer i7 = stack2_0.pop();
        java.lang.Integer i9 = stack2_0.push((java.lang.Integer) 71);
        org.junit.Assert.assertTrue("'" + i3 + "' != '" + (-1) + "'", i3.equals((-1)));
        org.junit.Assert.assertTrue("'" + i4 + "' != '" + (-1) + "'", i4.equals((-1)));
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
        org.junit.Assert.assertTrue("'" + i9 + "' != '" + 71 + "'", i9.equals(71));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test433");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        java.lang.String str3 = listnode_mergeSortedArrays2.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays5.setData(mergeSortedArrays7);
        listnode_mergeSortedArrays2.setNext(listnode_mergeSortedArrays5);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays10 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays10);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays12 = listnode_mergeSortedArrays11.getNext();
        listnode_mergeSortedArrays2.setNext(listnode_mergeSortedArrays11);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode15 = findKthElement0.find3((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays11, (-5200));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays12);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test434");
        com.github.pedrovgs.problem32.Contains contains0 = new com.github.pedrovgs.problem32.Contains();
        boolean b3 = contains0.evaluate("", "/");
        boolean b6 = contains0.evaluate("[]", "BinaryNode{data=100}");
        boolean b9 = contains0.evaluate("/", "1");
        boolean b12 = contains0.evaluate("3", "BinaryNode{data=100}");
        boolean b15 = contains0.evaluate("79", "270");
        boolean b18 = contains0.evaluate("###01001", "");
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertTrue(b18 == false);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test435");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.util.Iterator<java.lang.Integer> iterator_i12 = vector_i4.iterator();
        java.lang.Object[] obj_array13 = vector_i4.toArray();
        java.lang.Object obj14 = vector_i4.clone();
        java.util.Iterator<java.lang.Integer> iterator_i15 = vector_i4.iterator();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertNotNull(iterator_i12);
        org.junit.Assert.assertNotNull(obj_array13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(iterator_i15);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test436");
        com.github.pedrovgs.problem58.FindKthElement findKthElement0 = new com.github.pedrovgs.problem58.FindKthElement();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        java.lang.String str3 = listnode_mergeSortedArrays2.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        java.lang.String str6 = listnode_mergeSortedArrays5.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays7 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays5.setData(mergeSortedArrays7);
        listnode_mergeSortedArrays2.setNext(listnode_mergeSortedArrays5);
        com.github.pedrovgs.problem11.IntToString intToString10 = new com.github.pedrovgs.problem11.IntToString();
        java.lang.String str12 = intToString10.transform((int) '#');
        boolean b13 = listnode_mergeSortedArrays5.equals((java.lang.Object) str12);
        try {
            com.github.pedrovgs.linkedlist.ListNode listNode15 = findKthElement0.find2((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "35" + "'", str12.equals("35"));
        org.junit.Assert.assertTrue(b13 == false);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test437");
        com.github.pedrovgs.problem9.Factorial factorial0 = new com.github.pedrovgs.problem9.Factorial();
        int i2 = factorial0.getTailRecursive(10);
        int i4 = factorial0.getTailRecursive((int) (short) 10);
        int i6 = factorial0.getTailRecursive((int) (short) 10);
        int i8 = factorial0.getRecursive((int) (byte) 10);
        try {
            int i10 = factorial0.getTailRecursive((-132));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(i2 == 3628800);
        org.junit.Assert.assertTrue(i4 == 3628800);
        org.junit.Assert.assertTrue(i6 == 3628800);
        org.junit.Assert.assertTrue(i8 == 3628800);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test438");
        com.github.pedrovgs.problem54.RotateMatrix rotateMatrix0 = new com.github.pedrovgs.problem54.RotateMatrix();
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros1 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        int[] i_array7 = new int[] { 107, 3628800 };
        int[][] i_array_array8 = new int[][] { i_array7 };
        int[] i_array9 = goThroughMatrixInSpiral2.go(i_array_array8);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array8);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral11 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array12 = new int[][] {};
        int[] i_array13 = goThroughMatrixInSpiral11.go(i_array_array12);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array12);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral15 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array16 = new int[][] {};
        int[] i_array17 = goThroughMatrixInSpiral15.go(i_array_array16);
        int[] i_array24 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array31 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array32 = new int[][] { i_array24, i_array31 };
        int[] i_array33 = goThroughMatrixInSpiral15.go(i_array_array32);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array32);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros35 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral36 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array37 = new int[][] {};
        int[] i_array38 = goThroughMatrixInSpiral36.go(i_array_array37);
        int[] i_array41 = new int[] { 107, 3628800 };
        int[][] i_array_array42 = new int[][] { i_array41 };
        int[] i_array43 = goThroughMatrixInSpiral36.go(i_array_array42);
        rewriteRowAndColumnsWithZeros35.rewrite(i_array_array42);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral45 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array46 = new int[][] {};
        int[] i_array47 = goThroughMatrixInSpiral45.go(i_array_array46);
        int[] i_array50 = new int[] { 107, 3628800 };
        int[][] i_array_array51 = new int[][] { i_array50 };
        int[] i_array52 = goThroughMatrixInSpiral45.go(i_array_array51);
        rewriteRowAndColumnsWithZeros35.rewrite(i_array_array51);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral54 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array55 = new int[][] {};
        int[] i_array56 = goThroughMatrixInSpiral54.go(i_array_array55);
        rewriteRowAndColumnsWithZeros35.rewrite(i_array_array55);
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array55);
        int[] i_array62 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array66 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array70 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array74 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array78 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array82 = new int[] { 6, (byte) 10, 1484783616 };
        int[][] i_array_array83 = new int[][] { i_array62, i_array66, i_array70, i_array74, i_array78, i_array82 };
        rewriteRowAndColumnsWithZeros1.rewrite(i_array_array83);
        try {
            rotateMatrix0.rotate(i_array_array83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array7);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array_array12);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(i_array_array16);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(i_array24);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array_array32);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(i_array_array37);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array_array42);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(i_array_array46);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(i_array_array51);
        org.junit.Assert.assertNotNull(i_array52);
        org.junit.Assert.assertNotNull(i_array_array55);
        org.junit.Assert.assertNotNull(i_array56);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(i_array70);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(i_array82);
        org.junit.Assert.assertNotNull(i_array_array83);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test439");
        com.github.pedrovgs.problem25.Anagrams anagrams0 = new com.github.pedrovgs.problem25.Anagrams();
        java.util.List<java.lang.String> list_str2 = anagrams0.get("hi!");
        java.util.List<java.lang.String> list_str4 = anagrams0.get("]1-[");
        org.junit.Assert.assertNotNull(list_str2);
        org.junit.Assert.assertNotNull(list_str4);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test440");
        com.github.pedrovgs.problem26.Palindromes palindromes0 = new com.github.pedrovgs.problem26.Palindromes();
        boolean b2 = palindromes0.evaluate("/");
        boolean b4 = palindromes0.evaluate("1");
        boolean b6 = palindromes0.evaluate("/10210#3/[-1]/");
        boolean b8 = palindromes0.evaluate("79");
        org.junit.Assert.assertTrue(b2 == true);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b8 == false);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test441");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressAlternativeApproach("hi!");
        java.lang.String str6 = compressString0.compressRecursive("3");
        java.lang.String str8 = compressString0.compress("2147483647");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "3" + "'", str6.equals("3"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "214748364" + "'", str8.equals("214748364"));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test442");
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral0 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem42.FloodFill floodFill1 = new com.github.pedrovgs.problem42.FloodFill();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral2 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array3 = new int[][] {};
        int[] i_array4 = goThroughMatrixInSpiral2.go(i_array_array3);
        floodFill1.apply(i_array_array3, (-52), 2, (int) '#', 51);
        int[] i_array10 = goThroughMatrixInSpiral0.go(i_array_array3);
        int[][] i_array_array11 = null;
        try {
            int[] i_array12 = goThroughMatrixInSpiral0.go(i_array_array11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array3);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array10);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test443");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseRecursive("10");
        java.lang.String str8 = reverseString0.reverseIterative("/###01001/79/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "01" + "'", str6.equals("01"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/97/10010###/" + "'", str8.equals("/97/10010###/"));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test444");
        com.github.pedrovgs.problem54.RotateMatrix rotateMatrix0 = new com.github.pedrovgs.problem54.RotateMatrix();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral1 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros2 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral3 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array4 = new int[][] {};
        int[] i_array5 = goThroughMatrixInSpiral3.go(i_array_array4);
        int[] i_array8 = new int[] { 107, 3628800 };
        int[][] i_array_array9 = new int[][] { i_array8 };
        int[] i_array10 = goThroughMatrixInSpiral3.go(i_array_array9);
        rewriteRowAndColumnsWithZeros2.rewrite(i_array_array9);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral12 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array13 = new int[][] {};
        int[] i_array14 = goThroughMatrixInSpiral12.go(i_array_array13);
        rewriteRowAndColumnsWithZeros2.rewrite(i_array_array13);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral16 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array17 = new int[][] {};
        int[] i_array18 = goThroughMatrixInSpiral16.go(i_array_array17);
        int[] i_array25 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array32 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array33 = new int[][] { i_array25, i_array32 };
        int[] i_array34 = goThroughMatrixInSpiral16.go(i_array_array33);
        rewriteRowAndColumnsWithZeros2.rewrite(i_array_array33);
        com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros rewriteRowAndColumnsWithZeros36 = new com.github.pedrovgs.problem55.RewriteRowAndColumnsWithZeros();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral37 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array38 = new int[][] {};
        int[] i_array39 = goThroughMatrixInSpiral37.go(i_array_array38);
        int[] i_array42 = new int[] { 107, 3628800 };
        int[][] i_array_array43 = new int[][] { i_array42 };
        int[] i_array44 = goThroughMatrixInSpiral37.go(i_array_array43);
        rewriteRowAndColumnsWithZeros36.rewrite(i_array_array43);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral46 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array47 = new int[][] {};
        int[] i_array48 = goThroughMatrixInSpiral46.go(i_array_array47);
        int[] i_array51 = new int[] { 107, 3628800 };
        int[][] i_array_array52 = new int[][] { i_array51 };
        int[] i_array53 = goThroughMatrixInSpiral46.go(i_array_array52);
        rewriteRowAndColumnsWithZeros36.rewrite(i_array_array52);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral55 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array56 = new int[][] {};
        int[] i_array57 = goThroughMatrixInSpiral55.go(i_array_array56);
        rewriteRowAndColumnsWithZeros36.rewrite(i_array_array56);
        rewriteRowAndColumnsWithZeros2.rewrite(i_array_array56);
        int[] i_array63 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array67 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array71 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array75 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array79 = new int[] { 6, (byte) 10, 1484783616 };
        int[] i_array83 = new int[] { 6, (byte) 10, 1484783616 };
        int[][] i_array_array84 = new int[][] { i_array63, i_array67, i_array71, i_array75, i_array79, i_array83 };
        rewriteRowAndColumnsWithZeros2.rewrite(i_array_array84);
        int[] i_array86 = goThroughMatrixInSpiral1.go(i_array_array84);
        try {
            rotateMatrix0.rotate(i_array_array84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array_array4);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(i_array_array9);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(i_array_array13);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(i_array_array17);
        org.junit.Assert.assertNotNull(i_array18);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array_array33);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array_array38);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(i_array_array43);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(i_array_array47);
        org.junit.Assert.assertNotNull(i_array48);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(i_array_array52);
        org.junit.Assert.assertNotNull(i_array53);
        org.junit.Assert.assertNotNull(i_array_array56);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(i_array63);
        org.junit.Assert.assertNotNull(i_array67);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(i_array75);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(i_array_array84);
        org.junit.Assert.assertNotNull(i_array86);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test445");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        int i3 = stack2_0.capacity();
        java.util.Iterator<java.lang.Integer> iterator_i4 = stack2_0.iterator();
        java.lang.Object[] obj_array5 = stack2_0.toArray();
        stack2_0.trimToSize();
        java.util.Iterator<java.lang.Integer> iterator_i7 = stack2_0.iterator();
        org.junit.Assert.assertTrue(i3 == 10);
        org.junit.Assert.assertNotNull(iterator_i4);
        org.junit.Assert.assertNotNull(obj_array5);
        org.junit.Assert.assertNotNull(iterator_i7);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test446");
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian0 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals1 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST2 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = isBST2.checkRecursive(binarynode_i6);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        boolean b13 = binaryTreeEquals1.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i6, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i11);
        double d14 = avlTreeMedian0.find(binarynode_i6);
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf15 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf16 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf15);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder17 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian18 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d21 = avlTreeMedian18.find(binarynode_i20);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor22 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals23 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST24 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array26 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = sortedArrayToBST24.transform(i_array26);
        boolean b28 = binarynode_i27.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST29 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array31 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = sortedArrayToBST29.transform(i_array31);
        boolean b33 = binarynode_i32.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = binarynode_i32.getRight();
        boolean b35 = binaryTreeEquals23.areEqualsIterative(binarynode_i27, binarynode_i32);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST36 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array38 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = sortedArrayToBST36.transform(i_array38);
        boolean b40 = binarynode_i39.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode45 = lowestCommonAncestor22.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i32, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i39, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i44);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = binarynode_i32.getLeft();
        double d47 = avlTreeMedian18.find(binarynode_i32);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST48 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = sortedArrayToBST48.transform(i_array50);
        boolean b52 = binarynode_i51.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = binarynode_i51.getRight();
        java.lang.Integer i54 = binarynode_i51.getData();
        binarynode_i32.setLeft(binarynode_i51);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i56 = binaryTreeInOrder17.getIterative(binarynode_i51);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        java.lang.String str61 = binarynode_i60.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i62 = binaryTreeInOrder17.getIterative(binarynode_i60);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode63 = pathToEveryLeaf15.calculate(binarynode_i60);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder64 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian65 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d68 = avlTreeMedian65.find(binarynode_i67);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode69 = binaryTreePreOrder64.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i67);
        com.github.pedrovgs.problem18.IsBST isBST70 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST71 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array73 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i74 = sortedArrayToBST71.transform(i_array73);
        boolean b75 = isBST70.checkRecursive(binarynode_i74);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode76 = binaryTreePreOrder64.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i74);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode77 = pathToEveryLeaf15.calculate(binarynode_i74);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode80 = pathToEveryLeaf15.calculate(binarynode_i79);
        com.github.pedrovgs.problem18.IsBST isBST81 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST82 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array84 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i85 = sortedArrayToBST82.transform(i_array84);
        boolean b86 = isBST81.checkRecursive(binarynode_i85);
        boolean b87 = binarynode_i85.hasRight();
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode88 = pathToEveryLeaf15.calculate(binarynode_i85);
        double d89 = avlTreeMedian0.find(binarynode_i85);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == true);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertTrue(d14 == 100.0d);
        org.junit.Assert.assertTrue(d21 == 10.0d);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(binarynode_i27);
        org.junit.Assert.assertTrue(b28 == false);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(binarynode_i32);
        org.junit.Assert.assertTrue(b33 == false);
        org.junit.Assert.assertNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == true);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(binarynode_i39);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertNull(binaryNode45);
        org.junit.Assert.assertNull(binarynode_i46);
        org.junit.Assert.assertTrue(d47 == 100.0d);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(binarynode_i51);
        org.junit.Assert.assertTrue(b52 == false);
        org.junit.Assert.assertNull(binarynode_i53);
        org.junit.Assert.assertTrue("'" + i54 + "' != '" + 100 + "'", i54.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i56);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "BinaryNode{data=100}" + "'", str61.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_binarynode_i62);
        org.junit.Assert.assertNotNull(list_list_binaryNode63);
        org.junit.Assert.assertTrue(d68 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode69);
        org.junit.Assert.assertNotNull(i_array73);
        org.junit.Assert.assertNotNull(binarynode_i74);
        org.junit.Assert.assertTrue(b75 == true);
        org.junit.Assert.assertNotNull(list_binaryNode76);
        org.junit.Assert.assertNotNull(list_list_binaryNode77);
        org.junit.Assert.assertNotNull(list_list_binaryNode80);
        org.junit.Assert.assertNotNull(i_array84);
        org.junit.Assert.assertNotNull(binarynode_i85);
        org.junit.Assert.assertTrue(b86 == true);
        org.junit.Assert.assertTrue(b87 == false);
        org.junit.Assert.assertNotNull(list_list_binaryNode88);
        org.junit.Assert.assertTrue(d89 == 100.0d);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test447");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i5 = reverseLinkedList1.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList6 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements7 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList8 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode12 = reverseLinkedList8.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        removeListDuplicatedElements7.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode12);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i14 = getTheElementInTheMiddleOfTheList6.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode12);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i19 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList20 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays22.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = null;
        binarynode_i26.setRight(binarynode_i27);
        boolean b29 = listnode_mergeSortedArrays22.equals((java.lang.Object) binarynode_i27);
        com.github.pedrovgs.linkedlist.ListNode listNode30 = reverseLinkedList20.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode listNode31 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i32 = getTheElementInTheMiddleOfTheList6.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode31);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList33 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements34 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList35 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        java.lang.String str38 = listnode_mergeSortedArrays37.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode39 = reverseLinkedList35.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays37);
        removeListDuplicatedElements34.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i41 = getTheElementInTheMiddleOfTheList33.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i42 = getTheElementInTheMiddleOfTheList6.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i43 = reverseLinkedList1.reverseRecursive(listNode39);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i45 = partitionList0.split((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode39, 13631492);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNotNull(listnode_i5);
        org.junit.Assert.assertNotNull(listNode12);
        org.junit.Assert.assertNotNull(listnode_i14);
        org.junit.Assert.assertNotNull(listnode_i19);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays23);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertNotNull(listNode30);
        org.junit.Assert.assertNotNull(listNode31);
        org.junit.Assert.assertNotNull(listnode_i32);
        org.junit.Assert.assertNotNull(listNode39);
        org.junit.Assert.assertNotNull(listnode_i41);
        org.junit.Assert.assertNotNull(listnode_i42);
        org.junit.Assert.assertNotNull(listnode_i43);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test448");
        com.github.pedrovgs.problem46.BinaryTreeSerialization binaryTreeSerialization0 = new com.github.pedrovgs.problem46.BinaryTreeSerialization();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i2 = binaryTreeSerialization0.deserialize("BinaryNode{data=100}");
        com.github.pedrovgs.problem18.IsBST isBST3 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor4 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals5 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array8 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = sortedArrayToBST6.transform(i_array8);
        boolean b10 = binarynode_i9.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST11 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array13 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = sortedArrayToBST11.transform(i_array13);
        boolean b15 = binarynode_i14.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i16 = binarynode_i14.getRight();
        boolean b17 = binaryTreeEquals5.areEqualsIterative(binarynode_i9, binarynode_i14);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode27 = lowestCommonAncestor4.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i14, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i21, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26);
        java.lang.String str28 = binarynode_i26.toString();
        boolean b29 = isBST3.checkIterative(binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        java.lang.Integer i35 = binarynode_i33.getData();
        boolean b36 = isBST3.checkRecursive(binarynode_i33);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder37 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor38 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals39 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = sortedArrayToBST40.transform(i_array42);
        boolean b44 = binarynode_i43.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST45 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array47 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = sortedArrayToBST45.transform(i_array47);
        boolean b49 = binarynode_i48.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = binarynode_i48.getRight();
        boolean b51 = binaryTreeEquals39.areEqualsIterative(binarynode_i43, binarynode_i48);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        boolean b56 = binarynode_i55.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode61 = lowestCommonAncestor38.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i48, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i60);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode62 = binaryTreePreOrder37.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55);
        boolean b63 = isBST3.checkIterative(binarynode_i55);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = binarynode_i55.getRight();
        try {
            java.lang.String str65 = binaryTreeSerialization0.serialize((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(binarynode_i2);
        org.junit.Assert.assertNotNull(i_array8);
        org.junit.Assert.assertNotNull(binarynode_i9);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(i_array13);
        org.junit.Assert.assertNotNull(binarynode_i14);
        org.junit.Assert.assertTrue(b15 == false);
        org.junit.Assert.assertNull(binarynode_i16);
        org.junit.Assert.assertTrue(b17 == true);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertNull(binaryNode27);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "BinaryNode{data=100}" + "'", str28.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertTrue("'" + i35 + "' != '" + 100 + "'", i35.equals(100));
        org.junit.Assert.assertTrue(b36 == true);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(binarynode_i48);
        org.junit.Assert.assertTrue(b49 == false);
        org.junit.Assert.assertNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == true);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertNull(binaryNode61);
        org.junit.Assert.assertNotNull(list_binaryNode62);
        org.junit.Assert.assertTrue(b63 == true);
        org.junit.Assert.assertNull(binarynode_i64);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test449");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.lang.Integer i12 = vector_i4.firstElement();
        vector_i4.setSize(10);
        com.github.pedrovgs.problem32.Contains contains15 = new com.github.pedrovgs.problem32.Contains();
        boolean b18 = contains15.evaluate("", "/");
        int i19 = vector_i4.indexOf((java.lang.Object) b18);
        vector_i4.clear();
        vector_i4.trimToSize();
        vector_i4.trimToSize();
        try {
            vector_i4.setElementAt((java.lang.Integer) 4956, 11426);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue("'" + i12 + "' != '" + 0 + "'", i12.equals(0));
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertTrue(i19 == (-1));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test450");
        com.github.pedrovgs.problem51.ReverseString reverseString0 = new com.github.pedrovgs.problem51.ReverseString();
        java.lang.String str2 = reverseString0.reverseRecursive("/hi!/");
        java.lang.String str4 = reverseString0.reverseIterative("hi!");
        java.lang.String str6 = reverseString0.reverseIterative("1");
        java.lang.String str8 = reverseString0.reverseIterative("/!ih/");
        java.lang.String str10 = reverseString0.reverseRecursive("/BinaryNode{data=10}/10/]1-[/");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "/!ih/" + "'", str2.equals("/!ih/"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "!ih" + "'", str4.equals("!ih"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "1" + "'", str6.equals("1"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "/hi!/" + "'", str8.equals("/hi!/"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "/[-1]/01/}01=atad{edoNyraniB/" + "'", str10.equals("/[-1]/01/}01=atad{edoNyraniB/"));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test451");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        try {
            java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersCheating("[102]", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test452");
        com.github.pedrovgs.problem8.SplitArray splitArray0 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem8.SplitArray splitArray1 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array4 = new int[] { (byte) 1, (byte) 10 };
        splitArray1.splitSwappingPartition(i_array4);
        splitArray0.splitSwappingRecursive(i_array4);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral7 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array8 = new int[][] {};
        int[] i_array9 = goThroughMatrixInSpiral7.go(i_array_array8);
        splitArray0.splitSwappingRecursive(i_array9);
        com.github.pedrovgs.problem80.QuickSort quickSort11 = new com.github.pedrovgs.problem80.QuickSort();
        com.github.pedrovgs.problem8.SplitArray splitArray12 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array15 = new int[] { (byte) 1, (byte) 10 };
        splitArray12.splitSwappingPartition(i_array15);
        com.github.pedrovgs.problem2.Vector vector17 = new com.github.pedrovgs.problem2.Vector(i_array15);
        quickSort11.sort(i_array15);
        splitArray0.splitSwappingRecursive(i_array15);
        com.github.pedrovgs.problem31.FindLongestConsecutiveSequence findLongestConsecutiveSequence20 = new com.github.pedrovgs.problem31.FindLongestConsecutiveSequence();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        com.github.pedrovgs.problem8.SplitArray splitArray23 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array26 = new int[] { (byte) 1, (byte) 10 };
        splitArray23.splitSwappingPartition(i_array26);
        int[] i_array34 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray23.splitSwappingRecursive(i_array34);
        com.github.pedrovgs.problem8.SplitArray splitArray36 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array39 = new int[] { (byte) 1, (byte) 10 };
        splitArray36.splitSwappingPartition(i_array39);
        int[] i_array47 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray36.splitSwappingRecursive(i_array47);
        int[] i_array49 = mergeSortedArrays21.merge(i_array34, i_array47);
        int i50 = findLongestConsecutiveSequence20.findIterative(i_array49);
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_51 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_51.push((int) (byte) 10);
        int i54 = stack1_51.getMin();
        int i55 = stack1_51.getMin();
        com.github.pedrovgs.problem75.SelectionSort selectionSort56 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray57 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array60 = new int[] { (byte) 1, (byte) 10 };
        splitArray57.splitSwappingPartition(i_array60);
        selectionSort56.sort(i_array60);
        int i63 = stack1_51.search((java.lang.Object) i_array60);
        int i64 = findLongestConsecutiveSequence20.findRecursive(i_array60);
        splitArray0.splitSwappingRecursive(i_array60);
        int[] i_array66 = null;
        try {
            splitArray0.splitSwappingIterative(i_array66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(i_array_array8);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(i_array15);
        org.junit.Assert.assertNotNull(i_array26);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(i_array39);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertTrue(i50 == 2);
        org.junit.Assert.assertTrue(i54 == 10);
        org.junit.Assert.assertTrue(i55 == 10);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertTrue(i63 == (-1));
        org.junit.Assert.assertTrue(i64 == 2);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test453");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideIterative(1, (int) (short) 100);
        float f9 = divideUsingSubtraction0.divideIterative((int) (short) 1, 52);
        try {
            float f12 = divideUsingSubtraction0.divideRecursive((-8), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.01f);
        org.junit.Assert.assertTrue(f9 == 0.01923077f);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test454");
        com.github.pedrovgs.problem20.MultiplicationWithoutMultiply multiplicationWithoutMultiply0 = new com.github.pedrovgs.problem20.MultiplicationWithoutMultiply();
        int i3 = multiplicationWithoutMultiply0.calculate((-52), (int) (byte) 100);
        int i6 = multiplicationWithoutMultiply0.calculate(1, (-14040));
        int i9 = multiplicationWithoutMultiply0.calculate((-2), (-52));
        int i12 = multiplicationWithoutMultiply0.calculate(2147483647, 13);
        org.junit.Assert.assertTrue(i3 == (-5200));
        org.junit.Assert.assertTrue(i6 == (-14040));
        org.junit.Assert.assertTrue(i9 == 104);
        org.junit.Assert.assertTrue(i12 == 2147483635);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test455");
        com.github.pedrovgs.problem19.BinaryTreeDepth binaryTreeDepth0 = new com.github.pedrovgs.problem19.BinaryTreeDepth();
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i3 = new java.util.Stack<java.lang.Integer>();
        boolean b4 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i3, i_array2);
        boolean b5 = stack_i3.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST6 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i7 = stack_i3.search((java.lang.Object) sortedArrayToBST6);
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST6.transform(i_array11);
        int i13 = binaryTreeDepth0.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i12);
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel14 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder15 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor16 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals17 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        boolean b27 = binarynode_i26.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i26.getRight();
        boolean b29 = binaryTreeEquals17.areEqualsIterative(binarynode_i21, binarynode_i26);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST30 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array32 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = sortedArrayToBST30.transform(i_array32);
        boolean b34 = binarynode_i33.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST35 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array37 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = sortedArrayToBST35.transform(i_array37);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode39 = lowestCommonAncestor16.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i26, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i38);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode40 = binaryTreePreOrder15.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i33);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder41 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian42 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d45 = avlTreeMedian42.find(binarynode_i44);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode46 = binaryTreePreOrder41.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i44);
        com.github.pedrovgs.problem18.IsBST isBST47 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST48 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = sortedArrayToBST48.transform(i_array50);
        boolean b52 = isBST47.checkRecursive(binarynode_i51);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode53 = binaryTreePreOrder41.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode54 = binaryTreePreOrder15.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode55 = treeToListByLevel14.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51);
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder56 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder57 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian58 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d61 = avlTreeMedian58.find(binarynode_i60);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor62 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals63 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST64 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array66 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i67 = sortedArrayToBST64.transform(i_array66);
        boolean b68 = binarynode_i67.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST69 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array71 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i72 = sortedArrayToBST69.transform(i_array71);
        boolean b73 = binarynode_i72.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i74 = binarynode_i72.getRight();
        boolean b75 = binaryTreeEquals63.areEqualsIterative(binarynode_i67, binarynode_i72);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST76 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array78 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i79 = sortedArrayToBST76.transform(i_array78);
        boolean b80 = binarynode_i79.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST81 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array83 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i84 = sortedArrayToBST81.transform(i_array83);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode85 = lowestCommonAncestor62.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i72, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i79, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i84);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i86 = binarynode_i72.getLeft();
        double d87 = avlTreeMedian58.find(binarynode_i72);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST88 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array90 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i91 = sortedArrayToBST88.transform(i_array90);
        boolean b92 = binarynode_i91.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i93 = binarynode_i91.getRight();
        java.lang.Integer i94 = binarynode_i91.getData();
        binarynode_i72.setLeft(binarynode_i91);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i96 = binaryTreeInOrder57.getIterative(binarynode_i91);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode97 = binaryTreePostOrder56.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i91);
        boolean b98 = binarynode_i51.equals((java.lang.Object) binarynode_i91);
        int i99 = binaryTreeDepth0.get((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51);
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertTrue(b4 == true);
        org.junit.Assert.assertTrue(b5 == false);
        org.junit.Assert.assertTrue(i7 == (-1));
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(i13 == 2);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(binarynode_i33);
        org.junit.Assert.assertTrue(b34 == false);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(binarynode_i38);
        org.junit.Assert.assertNull(binaryNode39);
        org.junit.Assert.assertNotNull(list_binaryNode40);
        org.junit.Assert.assertTrue(d45 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode46);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(binarynode_i51);
        org.junit.Assert.assertTrue(b52 == true);
        org.junit.Assert.assertNotNull(list_binaryNode53);
        org.junit.Assert.assertNotNull(list_binaryNode54);
        org.junit.Assert.assertNotNull(list_binaryNode55);
        org.junit.Assert.assertTrue(d61 == 10.0d);
        org.junit.Assert.assertNotNull(i_array66);
        org.junit.Assert.assertNotNull(binarynode_i67);
        org.junit.Assert.assertTrue(b68 == false);
        org.junit.Assert.assertNotNull(i_array71);
        org.junit.Assert.assertNotNull(binarynode_i72);
        org.junit.Assert.assertTrue(b73 == false);
        org.junit.Assert.assertNull(binarynode_i74);
        org.junit.Assert.assertTrue(b75 == true);
        org.junit.Assert.assertNotNull(i_array78);
        org.junit.Assert.assertNotNull(binarynode_i79);
        org.junit.Assert.assertTrue(b80 == false);
        org.junit.Assert.assertNotNull(i_array83);
        org.junit.Assert.assertNotNull(binarynode_i84);
        org.junit.Assert.assertNull(binaryNode85);
        org.junit.Assert.assertNull(binarynode_i86);
        org.junit.Assert.assertTrue(d87 == 100.0d);
        org.junit.Assert.assertNotNull(i_array90);
        org.junit.Assert.assertNotNull(binarynode_i91);
        org.junit.Assert.assertTrue(b92 == false);
        org.junit.Assert.assertNull(binarynode_i93);
        org.junit.Assert.assertTrue("'" + i94 + "' != '" + 100 + "'", i94.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i96);
        org.junit.Assert.assertNotNull(list_binaryNode97);
        org.junit.Assert.assertTrue(b98 == true);
        org.junit.Assert.assertTrue(i99 == 1);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test456");
        com.github.pedrovgs.problem1.BitsCounter bitsCounter0 = new com.github.pedrovgs.problem1.BitsCounter();
        int i2 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i4 = bitsCounter0.countBitsToOneBasedOnString((-6));
        int i6 = bitsCounter0.countBitsToOneBasedOnString((int) (short) -1);
        int i8 = bitsCounter0.countBitsToOneBasedOnBinaryOperators((int) 'a');
        int i10 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(0);
        int i12 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(13631492);
        int i14 = bitsCounter0.countBitsToOneBasedOnString(11427);
        int i16 = bitsCounter0.countBitsToOneBasedOnBinaryOperators(107);
        org.junit.Assert.assertTrue(i2 == 30);
        org.junit.Assert.assertTrue(i4 == 30);
        org.junit.Assert.assertTrue(i6 == 32);
        org.junit.Assert.assertTrue(i8 == 3);
        org.junit.Assert.assertTrue(i10 == 0);
        org.junit.Assert.assertTrue(i12 == 4);
        org.junit.Assert.assertTrue(i14 == 7);
        org.junit.Assert.assertTrue(i16 == 5);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test457");
        com.github.pedrovgs.problem60.PartitionList partitionList0 = new com.github.pedrovgs.problem60.PartitionList();
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList1 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements15 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList16 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays17 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays17);
        java.lang.String str19 = listnode_mergeSortedArrays18.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode20 = reverseLinkedList16.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays18);
        removeListDuplicatedElements15.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        removeListDuplicatedElements2.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i23 = getTheElementInTheMiddleOfTheList1.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode20);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements24 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList25 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays27 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays26);
        java.lang.String str28 = listnode_mergeSortedArrays27.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode29 = reverseLinkedList25.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays27);
        removeListDuplicatedElements24.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode29);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i31 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode29);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements32 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList33 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i40 = null;
        binarynode_i39.setRight(binarynode_i40);
        boolean b42 = listnode_mergeSortedArrays35.equals((java.lang.Object) binarynode_i40);
        com.github.pedrovgs.linkedlist.ListNode listNode43 = reverseLinkedList33.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        removeListDuplicatedElements32.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode43);
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements45 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList46 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays47 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays48 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays47);
        java.lang.String str49 = listnode_mergeSortedArrays48.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode50 = reverseLinkedList46.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays48);
        removeListDuplicatedElements45.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        removeListDuplicatedElements32.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i53 = getTheElementInTheMiddleOfTheList1.get((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode50);
        try {
            com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i55 = partitionList0.split(listnode_i53, 812);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listNode20);
        org.junit.Assert.assertNotNull(listnode_i23);
        org.junit.Assert.assertNotNull(listNode29);
        org.junit.Assert.assertNotNull(listnode_i31);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays36);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays37);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(listNode43);
        org.junit.Assert.assertNotNull(listNode50);
        org.junit.Assert.assertNotNull(listnode_i53);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test458");
        com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber reverseOrderOfBinaryNumber0 = new com.github.pedrovgs.problem70.ReverseOrderOfBinaryNumber();
        int i2 = reverseOrderOfBinaryNumber0.reverse((int) ' ');
        int i4 = reverseOrderOfBinaryNumber0.reverse(7);
        int i6 = reverseOrderOfBinaryNumber0.reverse(11);
        int i8 = reverseOrderOfBinaryNumber0.reverse((int) '4');
        org.junit.Assert.assertTrue(i2 == 1);
        org.junit.Assert.assertTrue(i4 == 7);
        org.junit.Assert.assertTrue(i6 == 13);
        org.junit.Assert.assertTrue(i8 == 11);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test459");
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange2 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange3 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "97", combinationsOfChange2);
        com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange> pair_comparable_str_combinationsOfChange4 = new com.github.pedrovgs.pair.Pair<java.lang.Comparable<java.lang.String>, com.github.pedrovgs.problem49.CombinationsOfChange>((java.lang.Comparable<java.lang.String>) "10", combinationsOfChange2);
        java.lang.Object obj5 = null;
        boolean b6 = pair_comparable_str_combinationsOfChange4.equals(obj5);
        org.junit.Assert.assertTrue(b6 == false);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test460");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        java.lang.Object obj5 = stack_i2.clone();
        int i6 = stack_i2.capacity();
        stack_i2.addElement((java.lang.Integer) 112197661);
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertTrue(i6 == 10);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test461");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        boolean b9 = vector_i4.add((java.lang.Integer) 10);
        boolean b11 = vector_i4.remove((java.lang.Object) 10L);
        java.util.Iterator<java.lang.Integer> iterator_i12 = vector_i4.iterator();
        java.util.stream.Stream<java.lang.Integer> stream_i13 = vector_i4.stream();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(b9 == true);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(iterator_i12);
        org.junit.Assert.assertNotNull(stream_i13);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test462");
        com.github.pedrovgs.problem53.CompressString compressString0 = new com.github.pedrovgs.problem53.CompressString();
        java.lang.String str2 = compressString0.compressRecursive("97");
        java.lang.String str4 = compressString0.compressRecursive("/");
        java.lang.String str6 = compressString0.compressRecursive("/###01001/79/");
        java.lang.String str8 = compressString0.compressAlternativeApproach("[0, 1, 1, -1");
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "97" + "'", str2.equals("97"));
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "/" + "'", str4.equals("/"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "/#301021/79/" + "'", str6.equals("/#301021/79/"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[0, 1, 1, -1" + "'", str8.equals("[0, 1, 1, -1"));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test463");
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals0 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST1 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = isBST1.checkRecursive(binarynode_i5);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        boolean b12 = binaryTreeEquals0.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i5, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i10);
        com.github.pedrovgs.problem18.IsBST isBST13 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = isBST13.checkRecursive(binarynode_i17);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals19 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = binarynode_i23.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        boolean b29 = binarynode_i28.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i28.getRight();
        boolean b31 = binaryTreeEquals19.areEqualsIterative(binarynode_i23, binarynode_i28);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = binarynode_i23.getLeft();
        boolean b33 = isBST13.checkIterative(binarynode_i23);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian34 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d37 = avlTreeMedian34.find(binarynode_i36);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor38 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals39 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST40 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array42 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = sortedArrayToBST40.transform(i_array42);
        boolean b44 = binarynode_i43.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST45 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array47 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = sortedArrayToBST45.transform(i_array47);
        boolean b49 = binarynode_i48.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = binarynode_i48.getRight();
        boolean b51 = binaryTreeEquals39.areEqualsIterative(binarynode_i43, binarynode_i48);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        boolean b56 = binarynode_i55.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST57 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST57.transform(i_array59);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode61 = lowestCommonAncestor38.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i48, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i55, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i60);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i62 = binarynode_i48.getLeft();
        double d63 = avlTreeMedian34.find(binarynode_i48);
        boolean b64 = isBST13.checkRecursive(binarynode_i48);
        binarynode_i5.setRight(binarynode_i48);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian66 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d69 = avlTreeMedian66.find(binarynode_i68);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor70 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals71 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        boolean b76 = binarynode_i75.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST77 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array79 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = sortedArrayToBST77.transform(i_array79);
        boolean b81 = binarynode_i80.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i82 = binarynode_i80.getRight();
        boolean b83 = binaryTreeEquals71.areEqualsIterative(binarynode_i75, binarynode_i80);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST84 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array86 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i87 = sortedArrayToBST84.transform(i_array86);
        boolean b88 = binarynode_i87.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST89 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array91 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i92 = sortedArrayToBST89.transform(i_array91);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode93 = lowestCommonAncestor70.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i80, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i87, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i92);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i94 = binarynode_i80.getLeft();
        double d95 = avlTreeMedian66.find(binarynode_i80);
        binarynode_i48.setRight(binarynode_i80);
        java.lang.Integer i97 = binarynode_i48.getData();
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == true);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertTrue(b12 == true);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == true);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == false);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == true);
        org.junit.Assert.assertNull(binarynode_i32);
        org.junit.Assert.assertTrue(b33 == true);
        org.junit.Assert.assertTrue(d37 == 10.0d);
        org.junit.Assert.assertNotNull(i_array42);
        org.junit.Assert.assertNotNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(binarynode_i48);
        org.junit.Assert.assertTrue(b49 == false);
        org.junit.Assert.assertNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == true);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertNull(binaryNode61);
        org.junit.Assert.assertNull(binarynode_i62);
        org.junit.Assert.assertTrue(d63 == 100.0d);
        org.junit.Assert.assertTrue(b64 == true);
        org.junit.Assert.assertTrue(d69 == 10.0d);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == false);
        org.junit.Assert.assertNotNull(i_array79);
        org.junit.Assert.assertNotNull(binarynode_i80);
        org.junit.Assert.assertTrue(b81 == false);
        org.junit.Assert.assertNull(binarynode_i82);
        org.junit.Assert.assertTrue(b83 == true);
        org.junit.Assert.assertNotNull(i_array86);
        org.junit.Assert.assertNotNull(binarynode_i87);
        org.junit.Assert.assertTrue(b88 == false);
        org.junit.Assert.assertNotNull(i_array91);
        org.junit.Assert.assertNotNull(binarynode_i92);
        org.junit.Assert.assertNull(binaryNode93);
        org.junit.Assert.assertNull(binarynode_i94);
        org.junit.Assert.assertTrue(d95 == 100.0d);
        org.junit.Assert.assertTrue("'" + i97 + "' != '" + 100 + "'", i97.equals(100));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test464");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        boolean b13 = vector_i4.contains((java.lang.Object) (byte) 100);
        java.util.Enumeration<java.lang.Integer> enumeration_i14 = vector_i4.elements();
        java.lang.Integer i15 = vector_i4.firstElement();
        java.lang.Integer i16 = vector_i4.firstElement();
        try {
            java.lang.Integer i18 = vector_i4.remove(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(enumeration_i14);
        org.junit.Assert.assertTrue("'" + i15 + "' != '" + 0 + "'", i15.equals(0));
        org.junit.Assert.assertTrue("'" + i16 + "' != '" + 0 + "'", i16.equals(0));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test465");
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList0 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays1 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays2 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays1);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays4 = listnode_mergeSortedArrays2.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = null;
        binarynode_i6.setRight(binarynode_i7);
        boolean b9 = listnode_mergeSortedArrays2.equals((java.lang.Object) binarynode_i7);
        com.github.pedrovgs.linkedlist.ListNode listNode10 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays2);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode11 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays12 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays13 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays12);
        java.lang.String str14 = listnode_mergeSortedArrays13.toString();
        deleteListNode11.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays13);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers18 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b19 = listnode_mergeSortedArrays17.equals((java.lang.Object) mergeBinaryNumbers18);
        deleteListNode11.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i21 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays22 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays23 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays22);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays25 = listnode_mergeSortedArrays23.getNext();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays26 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.problem75.SelectionSort selectionSort27 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray28 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array31 = new int[] { (byte) 1, (byte) 10 };
        splitArray28.splitSwappingPartition(i_array31);
        selectionSort27.sort(i_array31);
        com.github.pedrovgs.problem8.SplitArray splitArray34 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array37 = new int[] { (byte) 1, (byte) 10 };
        splitArray34.splitSwappingPartition(i_array37);
        int[] i_array45 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray34.splitSwappingRecursive(i_array45);
        int[] i_array47 = mergeSortedArrays26.merge(i_array31, i_array45);
        listnode_mergeSortedArrays23.setData(mergeSortedArrays26);
        java.lang.String str49 = listnode_mergeSortedArrays23.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i50 = reverseLinkedList0.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays23);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays51 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays52 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays51);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays53 = listnode_mergeSortedArrays52.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays54 = listnode_mergeSortedArrays52.getNext();
        com.github.pedrovgs.linkedlist.ListNode listNode55 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays52);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList56 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays57 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays58 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays57);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays59 = listnode_mergeSortedArrays58.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays60 = listnode_mergeSortedArrays58.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i62 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = null;
        binarynode_i62.setRight(binarynode_i63);
        boolean b65 = listnode_mergeSortedArrays58.equals((java.lang.Object) binarynode_i63);
        com.github.pedrovgs.linkedlist.ListNode listNode66 = reverseLinkedList56.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays58);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList67 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays68 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays69 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays68);
        java.lang.String str70 = listnode_mergeSortedArrays69.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i71 = reverseLinkedList67.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays69);
        com.github.pedrovgs.problem62.PalindromeList palindromeList72 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList73 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays74 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays75 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays74);
        java.lang.String str76 = listnode_mergeSortedArrays75.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i77 = reverseLinkedList73.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays75);
        boolean b78 = palindromeList72.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays75);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays79 = listnode_mergeSortedArrays75.getNext();
        listnode_mergeSortedArrays69.setNext(listnode_mergeSortedArrays75);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i81 = reverseLinkedList56.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays75);
        com.github.pedrovgs.linkedlist.ListNode listNode82 = reverseLinkedList0.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays75);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays3);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays4);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertNotNull(listNode10);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(listnode_i21);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays24);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays25);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(i_array37);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(i_array47);
        org.junit.Assert.assertNotNull(listnode_i50);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays53);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays54);
        org.junit.Assert.assertNotNull(listNode55);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays59);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays60);
        org.junit.Assert.assertTrue(b65 == false);
        org.junit.Assert.assertNotNull(listNode66);
        org.junit.Assert.assertNotNull(listnode_i71);
        org.junit.Assert.assertNotNull(listnode_i77);
        org.junit.Assert.assertTrue(b78 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays79);
        org.junit.Assert.assertNotNull(listnode_i81);
        org.junit.Assert.assertNotNull(listNode82);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test466");
        com.github.pedrovgs.problem78.AutoBoxingTrick autoBoxingTrick0 = new com.github.pedrovgs.problem78.AutoBoxingTrick();
        boolean b3 = autoBoxingTrick0.compare((java.lang.Integer) 0, (java.lang.Integer) 2147483647);
        boolean b6 = autoBoxingTrick0.compare((java.lang.Integer) 27, (java.lang.Integer) 0);
        boolean b9 = autoBoxingTrick0.compare((java.lang.Integer) (-1), (java.lang.Integer) 56);
        boolean b12 = autoBoxingTrick0.compare((java.lang.Integer) 32, (java.lang.Integer) 21);
        org.junit.Assert.assertTrue(b3 == false);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertTrue(b9 == false);
        org.junit.Assert.assertTrue(b12 == false);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test467");
        com.github.pedrovgs.problem16.BinaryTreePostOrder binaryTreePostOrder0 = new com.github.pedrovgs.problem16.BinaryTreePostOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        java.lang.String str5 = binarynode_i4.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_6 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_6.push((int) (byte) 10);
        int i9 = stack1_6.getMin();
        boolean b10 = binarynode_i4.equals((java.lang.Object) stack1_6);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode11 = binaryTreePostOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i4);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = binarynode_i15.hasRight();
        java.lang.Integer i17 = binarynode_i15.getData();
        boolean b18 = binarynode_i15.hasRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode19 = binaryTreePostOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = binarynode_i15.getRight();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "BinaryNode{data=100}" + "'", str5.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i9 == 10);
        org.junit.Assert.assertTrue(b10 == false);
        org.junit.Assert.assertNotNull(list_binaryNode11);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertTrue("'" + i17 + "' != '" + 100 + "'", i17.equals(100));
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNotNull(list_binaryNode19);
        org.junit.Assert.assertNull(binarynode_i20);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test468");
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST0 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array2 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i3 = sortedArrayToBST0.transform(i_array2);
        boolean b4 = binarynode_i3.hasRight();
        boolean b5 = binarynode_i3.hasLeft();
        org.junit.Assert.assertNotNull(i_array2);
        org.junit.Assert.assertNotNull(binarynode_i3);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(b5 == false);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test469");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        com.github.pedrovgs.problem28.FindSums findSums7 = new com.github.pedrovgs.problem28.FindSums();
        int i8 = stack_i2.indexOf((java.lang.Object) findSums7);
        int i9 = stack_i2.capacity();
        java.lang.Object obj10 = null;
        boolean b11 = stack_i2.equals(obj10);
        java.lang.Object obj12 = stack_i2.clone();
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertTrue(i8 == (-1));
        org.junit.Assert.assertTrue(i9 == 10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test470");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        java.lang.Integer i11 = vector_i4.remove((int) (short) 1);
        try {
            java.lang.Integer i14 = vector_i4.set(475165, (java.lang.Integer) 1484783616);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue("'" + i11 + "' != '" + 1 + "'", i11.equals(1));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test471");
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder0 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST1 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i4 = sortedArrayToBST1.transform(i_array3);
        boolean b5 = binarynode_i4.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = binarynode_i4.getRight();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode7 = binaryTreePreOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i4);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST9 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST10 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array12 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = sortedArrayToBST10.transform(i_array12);
        boolean b14 = isBST9.checkRecursive(binarynode_i13);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        boolean b20 = binaryTreeEquals8.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = binarynode_i13.getLeft();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode22 = binaryTreePreOrder0.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i13);
        boolean b23 = binarynode_i13.hasRight();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertNotNull(binarynode_i4);
        org.junit.Assert.assertTrue(b5 == false);
        org.junit.Assert.assertNull(binarynode_i6);
        org.junit.Assert.assertNotNull(list_binaryNode7);
        org.junit.Assert.assertNotNull(i_array12);
        org.junit.Assert.assertNotNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNull(binarynode_i21);
        org.junit.Assert.assertNotNull(list_binaryNode22);
        org.junit.Assert.assertTrue(b23 == false);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test472");
        com.github.pedrovgs.problem61.SumLists sumLists0 = new com.github.pedrovgs.problem61.SumLists();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i1 = null;
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements2 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList3 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays4 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays5 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays4);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays6 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays7 = listnode_mergeSortedArrays5.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i9 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = null;
        binarynode_i9.setRight(binarynode_i10);
        boolean b12 = listnode_mergeSortedArrays5.equals((java.lang.Object) binarynode_i10);
        com.github.pedrovgs.linkedlist.ListNode listNode13 = reverseLinkedList3.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays5);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode13);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList15 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays16 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays16);
        java.lang.String str18 = listnode_mergeSortedArrays17.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i19 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays17);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode20 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays21 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays22 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays21);
        java.lang.String str23 = listnode_mergeSortedArrays22.toString();
        deleteListNode20.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays22);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers27 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b28 = listnode_mergeSortedArrays26.equals((java.lang.Object) mergeBinaryNumbers27);
        deleteListNode20.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i30 = reverseLinkedList15.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays26);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList31 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays32 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays33 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays32);
        java.lang.String str34 = listnode_mergeSortedArrays33.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i35 = reverseLinkedList31.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays33);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode36 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        java.lang.String str39 = listnode_mergeSortedArrays38.toString();
        deleteListNode36.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays38);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays41 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays42 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays41);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers43 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b44 = listnode_mergeSortedArrays42.equals((java.lang.Object) mergeBinaryNumbers43);
        deleteListNode36.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i46 = reverseLinkedList31.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays42);
        com.github.pedrovgs.linkedlist.ListNode listNode47 = reverseLinkedList15.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_i46);
        removeListDuplicatedElements2.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode47);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList49 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays50 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays50);
        java.lang.String str52 = listnode_mergeSortedArrays51.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode53 = reverseLinkedList49.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays51);
        com.github.pedrovgs.problem62.PalindromeList palindromeList54 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList55 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays56 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays57 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays56);
        java.lang.String str58 = listnode_mergeSortedArrays57.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i59 = reverseLinkedList55.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays57);
        boolean b60 = palindromeList54.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays57);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays61 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays62 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays61);
        java.lang.String str63 = listnode_mergeSortedArrays62.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays64 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays65 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays64);
        java.lang.String str66 = listnode_mergeSortedArrays65.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays67 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays65.setData(mergeSortedArrays67);
        listnode_mergeSortedArrays62.setNext(listnode_mergeSortedArrays65);
        boolean b70 = palindromeList54.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays62);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode71 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays72 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays73 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays72);
        java.lang.String str74 = listnode_mergeSortedArrays73.toString();
        deleteListNode71.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        boolean b76 = palindromeList54.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i77 = reverseLinkedList49.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        boolean b78 = listNode47.equals((java.lang.Object) listnode_i77);
        try {
            int i79 = sumLists0.sum(listnode_i1, (com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNull(listnode_mergeSortedArrays6);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays7);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNotNull(listNode13);
        org.junit.Assert.assertNotNull(listnode_i19);
        org.junit.Assert.assertTrue(b28 == false);
        org.junit.Assert.assertNotNull(listnode_i30);
        org.junit.Assert.assertNotNull(listnode_i35);
        org.junit.Assert.assertTrue(b44 == false);
        org.junit.Assert.assertNotNull(listnode_i46);
        org.junit.Assert.assertNotNull(listNode47);
        org.junit.Assert.assertNotNull(listNode53);
        org.junit.Assert.assertNotNull(listnode_i59);
        org.junit.Assert.assertTrue(b60 == true);
        org.junit.Assert.assertTrue(b70 == false);
        org.junit.Assert.assertTrue(b76 == true);
        org.junit.Assert.assertNotNull(listnode_i77);
        org.junit.Assert.assertTrue(b78 == false);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test473");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideIterative(1, (int) (short) 100);
        float f9 = divideUsingSubtraction0.divideRecursive(3, 27);
        float f12 = divideUsingSubtraction0.divideIterative((int) (byte) -1, (-8));
        float f15 = divideUsingSubtraction0.divideRecursive(51, 2);
        float f18 = divideUsingSubtraction0.divideIterative((-2), 2414);
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.01f);
        org.junit.Assert.assertTrue(f9 == 0.11111111f);
        org.junit.Assert.assertTrue(f12 == 2.85212672E8f);
        org.junit.Assert.assertTrue(f15 == 25.5f);
        org.junit.Assert.assertTrue(f18 == (-8.2850043E-4f));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test474");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode5 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode5);
        com.github.pedrovgs.problem62.PalindromeList palindromeList7 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList8 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i12 = reverseLinkedList8.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        boolean b13 = palindromeList7.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays14 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays15 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays14);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = listnode_mergeSortedArrays15.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays15.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = null;
        binarynode_i19.setRight(binarynode_i20);
        boolean b22 = listnode_mergeSortedArrays15.equals((java.lang.Object) binarynode_i20);
        listnode_mergeSortedArrays10.setNext(listnode_mergeSortedArrays15);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays24 = listnode_mergeSortedArrays15.getData();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements25 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList26 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays27 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays28 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays27);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = listnode_mergeSortedArrays28.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = listnode_mergeSortedArrays28.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i33 = null;
        binarynode_i32.setRight(binarynode_i33);
        boolean b35 = listnode_mergeSortedArrays28.equals((java.lang.Object) binarynode_i33);
        com.github.pedrovgs.linkedlist.ListNode listNode36 = reverseLinkedList26.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays28);
        removeListDuplicatedElements25.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode36);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements> listnode_removeListDuplicatedElements38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem57.RemoveListDuplicatedElements>(removeListDuplicatedElements25);
        com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList getTheElementInTheMiddleOfTheList39 = new com.github.pedrovgs.problem64.GetTheElementInTheMiddleOfTheList();
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements40 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList41 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays42 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays42);
        java.lang.String str44 = listnode_mergeSortedArrays43.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode45 = reverseLinkedList41.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays43);
        removeListDuplicatedElements40.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i47 = getTheElementInTheMiddleOfTheList39.get2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        removeListDuplicatedElements25.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        listnode_mergeSortedArrays15.setNext((com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>) listNode45);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode45);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode51 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays52 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays53 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays52);
        java.lang.String str54 = listnode_mergeSortedArrays53.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays55 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays56 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays55);
        java.lang.String str57 = listnode_mergeSortedArrays56.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays58 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays56.setData(mergeSortedArrays58);
        listnode_mergeSortedArrays53.setNext(listnode_mergeSortedArrays56);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays61 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays62 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays61);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays63 = listnode_mergeSortedArrays62.getNext();
        listnode_mergeSortedArrays53.setNext(listnode_mergeSortedArrays62);
        deleteListNode51.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays62);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList66 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays67 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays68 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays67);
        java.lang.String str69 = listnode_mergeSortedArrays68.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i70 = reverseLinkedList66.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays68);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList71 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays72 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays73 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays72);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays74 = listnode_mergeSortedArrays73.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays75 = listnode_mergeSortedArrays73.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = null;
        binarynode_i77.setRight(binarynode_i78);
        boolean b80 = listnode_mergeSortedArrays73.equals((java.lang.Object) binarynode_i78);
        com.github.pedrovgs.linkedlist.ListNode listNode81 = reverseLinkedList71.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        com.github.pedrovgs.linkedlist.ListNode listNode82 = reverseLinkedList66.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays73);
        deleteListNode51.delete(listNode82);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode82);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList85 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays86 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays87 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays86);
        java.lang.String str88 = listnode_mergeSortedArrays87.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i89 = reverseLinkedList85.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays87);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays90 = listnode_mergeSortedArrays87.getNext();
        listNode82.setNext(listnode_mergeSortedArrays90);
        org.junit.Assert.assertNotNull(listNode5);
        org.junit.Assert.assertNotNull(listnode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays16);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(mergeSortedArrays24);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays29);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays30);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(listNode36);
        org.junit.Assert.assertNotNull(listNode45);
        org.junit.Assert.assertNotNull(listnode_i47);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays63);
        org.junit.Assert.assertNotNull(listnode_i70);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays74);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays75);
        org.junit.Assert.assertTrue(b80 == false);
        org.junit.Assert.assertNotNull(listNode81);
        org.junit.Assert.assertNotNull(listNode82);
        org.junit.Assert.assertNotNull(listnode_i89);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays90);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test475");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideIterative((int) (byte) 10, (int) (byte) 100);
        float f6 = divideUsingSubtraction0.divideIterative(1, (int) (short) 100);
        float f9 = divideUsingSubtraction0.divideRecursive(3, 27);
        float f12 = divideUsingSubtraction0.divideIterative((int) (byte) -1, (-8));
        float f15 = divideUsingSubtraction0.divideIterative((-10296), 14);
        org.junit.Assert.assertTrue(f3 == 0.1f);
        org.junit.Assert.assertTrue(f6 == 0.01f);
        org.junit.Assert.assertTrue(f9 == 0.11111111f);
        org.junit.Assert.assertTrue(f12 == 2.85212672E8f);
        org.junit.Assert.assertTrue(f15 == (-735.4286f));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test476");
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf0 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian1 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals2 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder3 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder4 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian5 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i7 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d8 = avlTreeMedian5.find(binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode9 = binaryTreePreOrder4.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i10 = binaryTreeInOrder3.getIterative(binarynode_i7);
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals17 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST18 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array20 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = sortedArrayToBST18.transform(i_array20);
        boolean b22 = binarynode_i21.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST23 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array25 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i26 = sortedArrayToBST23.transform(i_array25);
        boolean b27 = binarynode_i26.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = binarynode_i26.getRight();
        boolean b29 = binaryTreeEquals17.areEqualsIterative(binarynode_i21, binarynode_i26);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i30 = binarynode_i21.getLeft();
        boolean b31 = isBST11.checkIterative(binarynode_i21);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals32 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i43 = binarynode_i41.getRight();
        boolean b44 = binaryTreeEquals32.areEqualsIterative(binarynode_i36, binarynode_i41);
        boolean b45 = isBST11.checkIterative(binarynode_i41);
        boolean b46 = binaryTreeEquals2.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i7, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i41);
        double d47 = avlTreeMedian1.find(binarynode_i41);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode48 = pathToEveryLeaf0.calculate(binarynode_i41);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST49 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array51 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = sortedArrayToBST49.transform(i_array51);
        java.lang.String str53 = binarynode_i52.toString();
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1 stack1_54 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack1();
        stack1_54.push((int) (byte) 10);
        int i57 = stack1_54.getMin();
        boolean b58 = binarynode_i52.equals((java.lang.Object) stack1_54);
        java.lang.String str59 = binarynode_i52.toString();
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode60 = pathToEveryLeaf0.calculate(binarynode_i52);
        org.junit.Assert.assertTrue(d8 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode9);
        org.junit.Assert.assertNotNull(list_binarynode_i10);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(i_array20);
        org.junit.Assert.assertNotNull(binarynode_i21);
        org.junit.Assert.assertTrue(b22 == false);
        org.junit.Assert.assertNotNull(i_array25);
        org.junit.Assert.assertNotNull(binarynode_i26);
        org.junit.Assert.assertTrue(b27 == false);
        org.junit.Assert.assertNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == true);
        org.junit.Assert.assertNull(binarynode_i30);
        org.junit.Assert.assertTrue(b31 == true);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNull(binarynode_i43);
        org.junit.Assert.assertTrue(b44 == true);
        org.junit.Assert.assertTrue(b45 == true);
        org.junit.Assert.assertTrue(b46 == false);
        org.junit.Assert.assertTrue(d47 == 100.0d);
        org.junit.Assert.assertNotNull(list_list_binaryNode48);
        org.junit.Assert.assertNotNull(i_array51);
        org.junit.Assert.assertNotNull(binarynode_i52);
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "BinaryNode{data=100}" + "'", str53.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertTrue(i57 == 10);
        org.junit.Assert.assertTrue(b58 == false);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "BinaryNode{data=100}" + "'", str59.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_list_binaryNode60);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test477");
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel0 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor1 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals2 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST3 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array5 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i6 = sortedArrayToBST3.transform(i_array5);
        boolean b7 = binarynode_i6.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST8 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array10 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i11 = sortedArrayToBST8.transform(i_array10);
        boolean b12 = binarynode_i11.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = binarynode_i11.getRight();
        boolean b14 = binaryTreeEquals2.areEqualsIterative(binarynode_i6, binarynode_i11);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST15 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array17 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i18 = sortedArrayToBST15.transform(i_array17);
        boolean b19 = binarynode_i18.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode24 = lowestCommonAncestor1.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i11, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i18, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian25 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i27 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d28 = avlTreeMedian25.find(binarynode_i27);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor29 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals30 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST31 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array33 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i34 = sortedArrayToBST31.transform(i_array33);
        boolean b35 = binarynode_i34.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST36 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array38 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i39 = sortedArrayToBST36.transform(i_array38);
        boolean b40 = binarynode_i39.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = binarynode_i39.getRight();
        boolean b42 = binaryTreeEquals30.areEqualsIterative(binarynode_i34, binarynode_i39);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        boolean b47 = binarynode_i46.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST48 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i51 = sortedArrayToBST48.transform(i_array50);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode52 = lowestCommonAncestor29.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i39, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i46, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i51);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i53 = binarynode_i39.getLeft();
        double d54 = avlTreeMedian25.find(binarynode_i39);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST55 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array57 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i58 = sortedArrayToBST55.transform(i_array57);
        boolean b59 = binarynode_i58.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = binarynode_i58.getRight();
        java.lang.Integer i61 = binarynode_i58.getData();
        binarynode_i39.setLeft(binarynode_i58);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian63 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i65 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d66 = avlTreeMedian63.find(binarynode_i65);
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf67 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf68 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf67);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode69 = lowestCommonAncestor1.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i39, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i65, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_pathToEveryLeaf68);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = binarynode_i65.getLeft();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode71 = treeToListByLevel0.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i70);
        org.junit.Assert.assertNotNull(i_array5);
        org.junit.Assert.assertNotNull(binarynode_i6);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(i_array10);
        org.junit.Assert.assertNotNull(binarynode_i11);
        org.junit.Assert.assertTrue(b12 == false);
        org.junit.Assert.assertNull(binarynode_i13);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNotNull(i_array17);
        org.junit.Assert.assertNotNull(binarynode_i18);
        org.junit.Assert.assertTrue(b19 == false);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertNull(binaryNode24);
        org.junit.Assert.assertTrue(d28 == 10.0d);
        org.junit.Assert.assertNotNull(i_array33);
        org.junit.Assert.assertNotNull(binarynode_i34);
        org.junit.Assert.assertTrue(b35 == false);
        org.junit.Assert.assertNotNull(i_array38);
        org.junit.Assert.assertNotNull(binarynode_i39);
        org.junit.Assert.assertTrue(b40 == false);
        org.junit.Assert.assertNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == true);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertNotNull(binarynode_i51);
        org.junit.Assert.assertNull(binaryNode52);
        org.junit.Assert.assertNull(binarynode_i53);
        org.junit.Assert.assertTrue(d54 == 100.0d);
        org.junit.Assert.assertNotNull(i_array57);
        org.junit.Assert.assertNotNull(binarynode_i58);
        org.junit.Assert.assertTrue(b59 == false);
        org.junit.Assert.assertNull(binarynode_i60);
        org.junit.Assert.assertTrue("'" + i61 + "' != '" + 100 + "'", i61.equals(100));
        org.junit.Assert.assertTrue(d66 == 10.0d);
        org.junit.Assert.assertNull(binaryNode69);
        org.junit.Assert.assertNull(binarynode_i70);
        org.junit.Assert.assertNotNull(list_binaryNode71);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test478");
        java.lang.Integer[] i_array1 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i2 = new java.util.Stack<java.lang.Integer>();
        boolean b3 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i2, i_array1);
        boolean b4 = stack_i2.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST5 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i6 = stack_i2.search((java.lang.Object) sortedArrayToBST5);
        com.github.pedrovgs.problem28.FindSums findSums7 = new com.github.pedrovgs.problem28.FindSums();
        int i8 = stack_i2.indexOf((java.lang.Object) findSums7);
        int i9 = stack_i2.capacity();
        try {
            java.util.ListIterator<java.lang.Integer> listiterator_i11 = stack_i2.listIterator((-13631485));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(i_array1);
        org.junit.Assert.assertTrue(b3 == true);
        org.junit.Assert.assertTrue(b4 == false);
        org.junit.Assert.assertTrue(i6 == (-1));
        org.junit.Assert.assertTrue(i8 == (-1));
        org.junit.Assert.assertTrue(i9 == 10);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test479");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers> listnode_sumBinaryNumbers4 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem3.SumBinaryNumbers>(sumBinaryNumbers0);
        try {
            java.lang.String str7 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("!ih", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test480");
        com.github.pedrovgs.problem76.InsertionSort insertionSort0 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem65.IsTreeBalanced isTreeBalanced1 = new com.github.pedrovgs.problem65.IsTreeBalanced();
        com.github.pedrovgs.problem75.SelectionSort selectionSort2 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort> pair_isTreeBalanced_selectionSort3 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem65.IsTreeBalanced, com.github.pedrovgs.problem75.SelectionSort>(isTreeBalanced1, selectionSort2);
        com.github.pedrovgs.problem72.FindTheMissingNumber findTheMissingNumber4 = new com.github.pedrovgs.problem72.FindTheMissingNumber();
        com.github.pedrovgs.problem75.SelectionSort selectionSort5 = new com.github.pedrovgs.problem75.SelectionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray6 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array9 = new int[] { (byte) 1, (byte) 10 };
        splitArray6.splitSwappingPartition(i_array9);
        selectionSort5.sort(i_array9);
        int i12 = findTheMissingNumber4.find(i_array9);
        selectionSort2.sort(i_array9);
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral14 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array15 = new int[][] {};
        int[] i_array16 = goThroughMatrixInSpiral14.go(i_array_array15);
        int[] i_array23 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[] i_array30 = new int[] { 2, 2147483647, (byte) -1, (short) 100, (byte) -1, 3 };
        int[][] i_array_array31 = new int[][] { i_array23, i_array30 };
        int[] i_array32 = goThroughMatrixInSpiral14.go(i_array_array31);
        selectionSort2.sort(i_array32);
        com.github.pedrovgs.problem76.InsertionSort insertionSort34 = new com.github.pedrovgs.problem76.InsertionSort();
        com.github.pedrovgs.problem8.SplitArray splitArray35 = new com.github.pedrovgs.problem8.SplitArray();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays36 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays37 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays36);
        com.github.pedrovgs.problem8.SplitArray splitArray38 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array41 = new int[] { (byte) 1, (byte) 10 };
        splitArray38.splitSwappingPartition(i_array41);
        int[] i_array49 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray38.splitSwappingRecursive(i_array49);
        com.github.pedrovgs.problem8.SplitArray splitArray51 = new com.github.pedrovgs.problem8.SplitArray();
        int[] i_array54 = new int[] { (byte) 1, (byte) 10 };
        splitArray51.splitSwappingPartition(i_array54);
        int[] i_array62 = new int[] { (byte) 100, (byte) 10, '#', 10, (short) -1, (byte) -1 };
        splitArray51.splitSwappingRecursive(i_array62);
        int[] i_array64 = mergeSortedArrays36.merge(i_array49, i_array62);
        splitArray35.splitSwappingIterative(i_array62);
        insertionSort34.sort(i_array62);
        selectionSort2.sort(i_array62);
        insertionSort0.sort(i_array62);
        com.github.pedrovgs.problem39.MultiplyArrayElements multiplyArrayElements69 = new com.github.pedrovgs.problem39.MultiplyArrayElements();
        com.github.pedrovgs.problem41.GoThroughMatrixInSpiral goThroughMatrixInSpiral70 = new com.github.pedrovgs.problem41.GoThroughMatrixInSpiral();
        int[][] i_array_array71 = new int[][] {};
        int[] i_array72 = goThroughMatrixInSpiral70.go(i_array_array71);
        int[] i_array73 = multiplyArrayElements69.multiply(i_array72);
        insertionSort0.sort(i_array73);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertTrue(i12 == (-8));
        org.junit.Assert.assertNotNull(i_array_array15);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(i_array30);
        org.junit.Assert.assertNotNull(i_array_array31);
        org.junit.Assert.assertNotNull(i_array32);
        org.junit.Assert.assertNotNull(i_array41);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(i_array62);
        org.junit.Assert.assertNotNull(i_array64);
        org.junit.Assert.assertNotNull(i_array_array71);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(i_array73);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test481");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        int i9 = vector_i4.indexOf((java.lang.Object) 1);
        int i11 = vector_i4.indexOf((java.lang.Object) 100.0d);
        java.lang.Object obj12 = vector_i4.clone();
        java.lang.Object obj13 = null;
        int i14 = vector_i4.lastIndexOf(obj13);
        java.lang.Object[] obj_array15 = vector_i4.toArray();
        int i16 = vector_i4.size();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertTrue(i9 == 1);
        org.junit.Assert.assertTrue(i11 == (-1));
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue(i14 == (-1));
        org.junit.Assert.assertNotNull(obj_array15);
        org.junit.Assert.assertTrue(i16 == 3);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test482");
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf0 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf1 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf0);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder2 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor7 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i17.getRight();
        boolean b20 = binaryTreeEquals8.areEqualsIterative(binarynode_i12, binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode30 = lowestCommonAncestor7.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i17.getLeft();
        double d32 = avlTreeMedian3.find(binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        java.lang.Integer i39 = binarynode_i36.getData();
        binarynode_i17.setLeft(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i41 = binaryTreeInOrder2.getIterative(binarynode_i36);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        java.lang.String str46 = binarynode_i45.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i47 = binaryTreeInOrder2.getIterative(binarynode_i45);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode48 = pathToEveryLeaf0.calculate(binarynode_i45);
        java.lang.Integer[] i_array50 = new java.lang.Integer[] { (-1) };
        java.util.Stack<java.lang.Integer> stack_i51 = new java.util.Stack<java.lang.Integer>();
        boolean b52 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) stack_i51, i_array50);
        boolean b53 = stack_i51.empty();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST54 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        int i55 = stack_i51.search((java.lang.Object) sortedArrayToBST54);
        java.lang.Integer[] i_array59 = new java.lang.Integer[] { (-97), 51, (-52) };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i60 = sortedArrayToBST54.transform(i_array59);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode61 = pathToEveryLeaf0.calculate(binarynode_i60);
        com.github.pedrovgs.problem18.IsBST isBST62 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST63 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = sortedArrayToBST63.transform(i_array65);
        boolean b67 = isBST62.checkRecursive(binarynode_i66);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode68 = pathToEveryLeaf0.calculate(binarynode_i66);
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertNull(binaryNode30);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(d32 == 100.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i41);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "BinaryNode{data=100}" + "'", str46.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_binarynode_i47);
        org.junit.Assert.assertNotNull(list_list_binaryNode48);
        org.junit.Assert.assertNotNull(i_array50);
        org.junit.Assert.assertTrue(b52 == true);
        org.junit.Assert.assertTrue(b53 == false);
        org.junit.Assert.assertTrue(i55 == (-1));
        org.junit.Assert.assertNotNull(i_array59);
        org.junit.Assert.assertNotNull(binarynode_i60);
        org.junit.Assert.assertNotNull(list_list_binaryNode61);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(binarynode_i66);
        org.junit.Assert.assertTrue(b67 == true);
        org.junit.Assert.assertNotNull(list_list_binaryNode68);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test483");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        int i3 = stack2_0.capacity();
        java.util.Iterator<java.lang.Integer> iterator_i4 = stack2_0.iterator();
        java.lang.Integer i5 = stack2_0.pop();
        org.junit.Assert.assertTrue(i3 == 10);
        org.junit.Assert.assertNotNull(iterator_i4);
        org.junit.Assert.assertTrue("'" + i5 + "' != '" + 100 + "'", i5.equals(100));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test484");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        com.github.pedrovgs.problem66.TreeToListByLevel treeToListByLevel4 = new com.github.pedrovgs.problem66.TreeToListByLevel();
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder5 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian6 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i8 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d9 = avlTreeMedian6.find(binarynode_i8);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode10 = binaryTreePreOrder5.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i8);
        com.github.pedrovgs.problem18.IsBST isBST11 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST12 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array14 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i15 = sortedArrayToBST12.transform(i_array14);
        boolean b16 = isBST11.checkRecursive(binarynode_i15);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode17 = binaryTreePreOrder5.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i15);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals18 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST19 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST20 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array22 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i23 = sortedArrayToBST20.transform(i_array22);
        boolean b24 = isBST19.checkRecursive(binarynode_i23);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST25 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array27 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i28 = sortedArrayToBST25.transform(i_array27);
        boolean b29 = binarynode_i28.hasRight();
        boolean b30 = binaryTreeEquals18.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i23, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i28);
        com.github.pedrovgs.problem18.IsBST isBST31 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST32 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array34 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i35 = sortedArrayToBST32.transform(i_array34);
        boolean b36 = isBST31.checkRecursive(binarynode_i35);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals37 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST38 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array40 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i41 = sortedArrayToBST38.transform(i_array40);
        boolean b42 = binarynode_i41.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST43 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array45 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i46 = sortedArrayToBST43.transform(i_array45);
        boolean b47 = binarynode_i46.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i48 = binarynode_i46.getRight();
        boolean b49 = binaryTreeEquals37.areEqualsIterative(binarynode_i41, binarynode_i46);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = binarynode_i41.getLeft();
        boolean b51 = isBST31.checkIterative(binarynode_i41);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian52 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i54 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d55 = avlTreeMedian52.find(binarynode_i54);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor56 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals57 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST58 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array60 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i61 = sortedArrayToBST58.transform(i_array60);
        boolean b62 = binarynode_i61.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST63 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array65 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i66 = sortedArrayToBST63.transform(i_array65);
        boolean b67 = binarynode_i66.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i68 = binarynode_i66.getRight();
        boolean b69 = binaryTreeEquals57.areEqualsIterative(binarynode_i61, binarynode_i66);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST70 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array72 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i73 = sortedArrayToBST70.transform(i_array72);
        boolean b74 = binarynode_i73.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST75 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array77 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i78 = sortedArrayToBST75.transform(i_array77);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode79 = lowestCommonAncestor56.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i73, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i78);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i80 = binarynode_i66.getLeft();
        double d81 = avlTreeMedian52.find(binarynode_i66);
        boolean b82 = isBST31.checkRecursive(binarynode_i66);
        binarynode_i23.setRight(binarynode_i66);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode84 = binaryTreePreOrder5.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode85 = treeToListByLevel4.transform((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i66);
        com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem3.SumBinaryNumbers, com.github.pedrovgs.problem66.TreeToListByLevel> pair_sumBinaryNumbers_treeToListByLevel86 = new com.github.pedrovgs.pair.Pair<com.github.pedrovgs.problem3.SumBinaryNumbers, com.github.pedrovgs.problem66.TreeToListByLevel>(sumBinaryNumbers0, treeToListByLevel4);
        try {
            java.lang.String str89 = sumBinaryNumbers0.sumBinaryNumbersCheating("[0, 1, 1, -1]", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue(d9 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode10);
        org.junit.Assert.assertNotNull(i_array14);
        org.junit.Assert.assertNotNull(binarynode_i15);
        org.junit.Assert.assertTrue(b16 == true);
        org.junit.Assert.assertNotNull(list_binaryNode17);
        org.junit.Assert.assertNotNull(i_array22);
        org.junit.Assert.assertNotNull(binarynode_i23);
        org.junit.Assert.assertTrue(b24 == true);
        org.junit.Assert.assertNotNull(i_array27);
        org.junit.Assert.assertNotNull(binarynode_i28);
        org.junit.Assert.assertTrue(b29 == false);
        org.junit.Assert.assertTrue(b30 == true);
        org.junit.Assert.assertNotNull(i_array34);
        org.junit.Assert.assertNotNull(binarynode_i35);
        org.junit.Assert.assertTrue(b36 == true);
        org.junit.Assert.assertNotNull(i_array40);
        org.junit.Assert.assertNotNull(binarynode_i41);
        org.junit.Assert.assertTrue(b42 == false);
        org.junit.Assert.assertNotNull(i_array45);
        org.junit.Assert.assertNotNull(binarynode_i46);
        org.junit.Assert.assertTrue(b47 == false);
        org.junit.Assert.assertNull(binarynode_i48);
        org.junit.Assert.assertTrue(b49 == true);
        org.junit.Assert.assertNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == true);
        org.junit.Assert.assertTrue(d55 == 10.0d);
        org.junit.Assert.assertNotNull(i_array60);
        org.junit.Assert.assertNotNull(binarynode_i61);
        org.junit.Assert.assertTrue(b62 == false);
        org.junit.Assert.assertNotNull(i_array65);
        org.junit.Assert.assertNotNull(binarynode_i66);
        org.junit.Assert.assertTrue(b67 == false);
        org.junit.Assert.assertNull(binarynode_i68);
        org.junit.Assert.assertTrue(b69 == true);
        org.junit.Assert.assertNotNull(i_array72);
        org.junit.Assert.assertNotNull(binarynode_i73);
        org.junit.Assert.assertTrue(b74 == false);
        org.junit.Assert.assertNotNull(i_array77);
        org.junit.Assert.assertNotNull(binarynode_i78);
        org.junit.Assert.assertNull(binaryNode79);
        org.junit.Assert.assertNull(binarynode_i80);
        org.junit.Assert.assertTrue(d81 == 100.0d);
        org.junit.Assert.assertTrue(b82 == true);
        org.junit.Assert.assertNotNull(list_binaryNode84);
        org.junit.Assert.assertNotNull(list_binaryNode85);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test485");
        com.github.pedrovgs.problem69.BitsToTransform bitsToTransform0 = new com.github.pedrovgs.problem69.BitsToTransform();
        int i3 = bitsToTransform0.calculate((int) (short) 10, 4);
        int i6 = bitsToTransform0.calculate(107, 30);
        int i9 = bitsToTransform0.calculate((-8), 0);
        int i12 = bitsToTransform0.calculate((int) '#', (-6));
        int i15 = bitsToTransform0.calculate(45, 11426);
        int i18 = bitsToTransform0.calculate(862453760, (-2));
        org.junit.Assert.assertTrue(i3 == 3);
        org.junit.Assert.assertTrue(i6 == 5);
        org.junit.Assert.assertTrue(i9 == 29);
        org.junit.Assert.assertTrue(i12 == 29);
        org.junit.Assert.assertTrue(i15 == 8);
        org.junit.Assert.assertTrue(i18 == 24);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test486");
        com.github.pedrovgs.problem49.CombinationsOfChange combinationsOfChange0 = new com.github.pedrovgs.problem49.CombinationsOfChange();
        int[] i_array1 = null;
        try {
            java.util.List<java.util.List<java.lang.Integer>> list_list_i3 = combinationsOfChange0.get(i_array1, (-2147483570));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test487");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        try {
            java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("29", "[0, 1, 1, -1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test488");
        com.github.pedrovgs.problem57.RemoveListDuplicatedElements removeListDuplicatedElements0 = new com.github.pedrovgs.problem57.RemoveListDuplicatedElements();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList1 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays2 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays3 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays2);
        java.lang.String str4 = listnode_mergeSortedArrays3.toString();
        com.github.pedrovgs.linkedlist.ListNode listNode5 = reverseLinkedList1.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays3);
        removeListDuplicatedElements0.remove((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode5);
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList7 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays8 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays9 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays8);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays11 = listnode_mergeSortedArrays9.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i13 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i14 = null;
        binarynode_i13.setRight(binarynode_i14);
        boolean b16 = listnode_mergeSortedArrays9.equals((java.lang.Object) binarynode_i14);
        com.github.pedrovgs.linkedlist.ListNode listNode17 = reverseLinkedList7.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays9);
        com.github.pedrovgs.problem59.DeleteListNode deleteListNode18 = new com.github.pedrovgs.problem59.DeleteListNode();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays19 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays20 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays19);
        java.lang.String str21 = listnode_mergeSortedArrays20.toString();
        deleteListNode18.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays20);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays23 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays24 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays23);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers25 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b26 = listnode_mergeSortedArrays24.equals((java.lang.Object) mergeBinaryNumbers25);
        deleteListNode18.delete((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i28 = reverseLinkedList7.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays24);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays29 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays30 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays29);
        com.github.pedrovgs.problem67.MergeBinaryNumbers mergeBinaryNumbers31 = new com.github.pedrovgs.problem67.MergeBinaryNumbers();
        boolean b32 = listnode_mergeSortedArrays30.equals((java.lang.Object) mergeBinaryNumbers31);
        com.github.pedrovgs.linkedlist.ListNode listNode33 = reverseLinkedList7.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays30);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        java.lang.String str36 = listnode_mergeSortedArrays35.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays37 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays38 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays37);
        java.lang.String str39 = listnode_mergeSortedArrays38.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays40 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays38.setData(mergeSortedArrays40);
        listnode_mergeSortedArrays35.setNext(listnode_mergeSortedArrays38);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays43 = listnode_mergeSortedArrays35.getNext();
        com.github.pedrovgs.problem62.PalindromeList palindromeList44 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList45 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays46 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays47 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays46);
        java.lang.String str48 = listnode_mergeSortedArrays47.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i49 = reverseLinkedList45.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        boolean b50 = palindromeList44.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays51 = listnode_mergeSortedArrays47.getNext();
        listnode_mergeSortedArrays43.setNext(listnode_mergeSortedArrays47);
        com.github.pedrovgs.linkedlist.ListNode listNode53 = reverseLinkedList7.reverseIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays47);
        removeListDuplicatedElements0.remove2((com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer>) listNode53);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays55 = listNode53.getNext();
        try {
            com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays56 = listnode_mergeSortedArrays55.getData();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(listNode5);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays10);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays11);
        org.junit.Assert.assertTrue(b16 == false);
        org.junit.Assert.assertNotNull(listNode17);
        org.junit.Assert.assertTrue(b26 == false);
        org.junit.Assert.assertNotNull(listnode_i28);
        org.junit.Assert.assertTrue(b32 == false);
        org.junit.Assert.assertNotNull(listNode33);
        org.junit.Assert.assertNotNull(listnode_mergeSortedArrays43);
        org.junit.Assert.assertNotNull(listnode_i49);
        org.junit.Assert.assertTrue(b50 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays51);
        org.junit.Assert.assertNotNull(listNode53);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays55);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test489");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push(100);
        int i3 = stack2_0.capacity();
        stack2_0.push(7);
        com.github.pedrovgs.problem62.PalindromeList palindromeList6 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem62.PalindromeList palindromeList7 = new com.github.pedrovgs.problem62.PalindromeList();
        com.github.pedrovgs.problem22.ReverseLinkedList reverseLinkedList8 = new com.github.pedrovgs.problem22.ReverseLinkedList();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays9 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays10 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays9);
        java.lang.String str11 = listnode_mergeSortedArrays10.toString();
        com.github.pedrovgs.linkedlist.ListNode<java.lang.Integer> listnode_i12 = reverseLinkedList8.reverseRecursive((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        boolean b13 = palindromeList7.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        boolean b14 = palindromeList6.checkReversing((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays10);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays15 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays16 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays15);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays17 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays18 = listnode_mergeSortedArrays16.getNext();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i20 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i21 = null;
        binarynode_i20.setRight(binarynode_i21);
        boolean b23 = listnode_mergeSortedArrays16.equals((java.lang.Object) binarynode_i21);
        boolean b24 = palindromeList6.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays16);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays25 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays26 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays25);
        java.lang.String str27 = listnode_mergeSortedArrays26.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays28 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays29 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays28);
        java.lang.String str30 = listnode_mergeSortedArrays29.toString();
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays31 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        listnode_mergeSortedArrays29.setData(mergeSortedArrays31);
        listnode_mergeSortedArrays26.setNext(listnode_mergeSortedArrays29);
        com.github.pedrovgs.problem6.MergeSortedArrays mergeSortedArrays34 = new com.github.pedrovgs.problem6.MergeSortedArrays();
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays35 = new com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays>(mergeSortedArrays34);
        com.github.pedrovgs.linkedlist.ListNode<com.github.pedrovgs.problem6.MergeSortedArrays> listnode_mergeSortedArrays36 = listnode_mergeSortedArrays35.getNext();
        listnode_mergeSortedArrays26.setNext(listnode_mergeSortedArrays35);
        boolean b38 = palindromeList6.checkIterative((com.github.pedrovgs.linkedlist.ListNode) listnode_mergeSortedArrays35);
        boolean b39 = stack2_0.removeElement((java.lang.Object) listnode_mergeSortedArrays35);
        int i40 = stack2_0.getMin();
        org.junit.Assert.assertTrue(i3 == 10);
        org.junit.Assert.assertNotNull(listnode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertTrue(b14 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays17);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays18);
        org.junit.Assert.assertTrue(b23 == false);
        org.junit.Assert.assertTrue(b24 == true);
        org.junit.Assert.assertNull(listnode_mergeSortedArrays36);
        org.junit.Assert.assertTrue(b38 == true);
        org.junit.Assert.assertTrue(b39 == false);
        org.junit.Assert.assertTrue(i40 == 7);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test490");
        java.lang.Integer[] i_array3 = new java.lang.Integer[] { 0, 1, 1 };
        java.util.Vector<java.lang.Integer> vector_i4 = new java.util.Vector<java.lang.Integer>();
        boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) vector_i4, i_array3);
        boolean b7 = vector_i4.remove((java.lang.Object) (short) -1);
        java.util.Enumeration<java.lang.Integer> enumeration_i8 = vector_i4.elements();
        java.lang.Object[] obj_array9 = vector_i4.toArray();
        vector_i4.addElement((java.lang.Integer) (-1));
        java.util.Iterator<java.lang.Integer> iterator_i12 = vector_i4.iterator();
        vector_i4.clear();
        org.junit.Assert.assertNotNull(i_array3);
        org.junit.Assert.assertTrue(b5 == true);
        org.junit.Assert.assertTrue(b7 == false);
        org.junit.Assert.assertNotNull(enumeration_i8);
        org.junit.Assert.assertNotNull(obj_array9);
        org.junit.Assert.assertNotNull(iterator_i12);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test491");
        com.github.pedrovgs.problem3.SumBinaryNumbers sumBinaryNumbers0 = new com.github.pedrovgs.problem3.SumBinaryNumbers();
        java.lang.String str3 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("0", "");
        java.lang.String str6 = sumBinaryNumbers0.sumBinaryNumbersBasedOnCount("##001", "100##");
        try {
            java.lang.String str9 = sumBinaryNumbers0.sumBinaryNumbersBasedOnPowersOfTwo("-", "270");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "0" + "'", str3.equals("0"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "&0///0" + "'", str6.equals("&0///0"));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test492");
        com.github.pedrovgs.problem5.DivideUsingSubtraction divideUsingSubtraction0 = new com.github.pedrovgs.problem5.DivideUsingSubtraction();
        float f3 = divideUsingSubtraction0.divideRecursive(29, 4);
        float f6 = divideUsingSubtraction0.divideRecursive((int) (short) -1, (int) 'a');
        float f9 = divideUsingSubtraction0.divideIterative((int) 'a', 27);
        float f12 = divideUsingSubtraction0.divideRecursive((int) (short) -1, 18);
        float f15 = divideUsingSubtraction0.divideIterative(100, (-13631485));
        float f18 = divideUsingSubtraction0.divideIterative(1073741853, 23);
        org.junit.Assert.assertTrue(f3 == 7.25f);
        org.junit.Assert.assertTrue(f6 == (-0.010309278f));
        org.junit.Assert.assertTrue(f9 == 3.5925927f);
        org.junit.Assert.assertTrue(f12 == (-0.055555556f));
        org.junit.Assert.assertTrue(f15 == 315.07697f);
        org.junit.Assert.assertTrue(f18 == 1.6777216E7f);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test493");
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces0 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces1 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces2 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array3 = new char[] {};
        replaceSpaces2.replace2(char_array3);
        replaceSpaces1.replace(char_array3);
        replaceSpaces0.replace(char_array3);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces7 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces8 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces9 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array10 = new char[] {};
        replaceSpaces9.replace2(char_array10);
        replaceSpaces8.replace(char_array10);
        replaceSpaces7.replace(char_array10);
        replaceSpaces0.replace2(char_array10);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces15 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces16 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array22 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces16.replace(char_array22);
        replaceSpaces15.replace(char_array22);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces25 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces26 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces27 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array28 = new char[] {};
        replaceSpaces27.replace2(char_array28);
        replaceSpaces26.replace(char_array28);
        replaceSpaces25.replace(char_array28);
        replaceSpaces15.replace(char_array28);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces33 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array39 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces33.replace(char_array39);
        replaceSpaces15.replace2(char_array39);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces42 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces43 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array49 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces43.replace(char_array49);
        replaceSpaces42.replace(char_array49);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces52 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array53 = new char[] {};
        replaceSpaces52.replace2(char_array53);
        replaceSpaces42.replace(char_array53);
        replaceSpaces15.replace2(char_array53);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces57 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces58 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array64 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces58.replace(char_array64);
        replaceSpaces57.replace(char_array64);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces67 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces68 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces69 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array70 = new char[] {};
        replaceSpaces69.replace2(char_array70);
        replaceSpaces68.replace(char_array70);
        replaceSpaces67.replace(char_array70);
        replaceSpaces57.replace(char_array70);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces75 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces76 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array82 = new char[] { '#', 'a', ' ', '4', 'a' };
        replaceSpaces76.replace(char_array82);
        replaceSpaces75.replace(char_array82);
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces85 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces86 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        com.github.pedrovgs.problem52.ReplaceSpaces replaceSpaces87 = new com.github.pedrovgs.problem52.ReplaceSpaces();
        char[] char_array88 = new char[] {};
        replaceSpaces87.replace2(char_array88);
        replaceSpaces86.replace(char_array88);
        replaceSpaces85.replace(char_array88);
        replaceSpaces75.replace(char_array88);
        replaceSpaces57.replace2(char_array88);
        replaceSpaces15.replace(char_array88);
        replaceSpaces0.replace2(char_array88);
        org.junit.Assert.assertNotNull(char_array3);
        org.junit.Assert.assertNotNull(char_array10);
        org.junit.Assert.assertNotNull(char_array22);
        org.junit.Assert.assertNotNull(char_array28);
        org.junit.Assert.assertNotNull(char_array39);
        org.junit.Assert.assertNotNull(char_array49);
        org.junit.Assert.assertNotNull(char_array53);
        org.junit.Assert.assertNotNull(char_array64);
        org.junit.Assert.assertNotNull(char_array70);
        org.junit.Assert.assertNotNull(char_array82);
        org.junit.Assert.assertNotNull(char_array88);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test494");
        com.github.pedrovgs.problem48.WordSearch wordSearch0 = new com.github.pedrovgs.problem48.WordSearch();
        char[] char_array4 = new char[] { '#', 'a', ' ' };
        char[] char_array8 = new char[] { '#', 'a', ' ' };
        char[][] char_array_array9 = new char[][] { char_array4, char_array8 };
        boolean b11 = wordSearch0.contains(char_array_array9, "97");
        char[][] char_array_array12 = null;
        try {
            boolean b14 = wordSearch0.contains(char_array_array12, "/7/25-/23/");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertNotNull(char_array4);
        org.junit.Assert.assertNotNull(char_array8);
        org.junit.Assert.assertNotNull(char_array_array9);
        org.junit.Assert.assertTrue(b11 == false);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test495");
        com.github.pedrovgs.problem44.FindMinNumberAtPosition findMinNumberAtPosition0 = new com.github.pedrovgs.problem44.FindMinNumberAtPosition();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i1 = null;
        try {
            java.lang.Integer i3 = findMinNumberAtPosition0.find(binarynode_i1, (-80));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test496");
        com.github.pedrovgs.problem38.PathToEveryLeaf pathToEveryLeaf0 = new com.github.pedrovgs.problem38.PathToEveryLeaf();
        com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf> binarynode_pathToEveryLeaf1 = new com.github.pedrovgs.binarytree.BinaryNode<com.github.pedrovgs.problem38.PathToEveryLeaf>(pathToEveryLeaf0);
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder2 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian3 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d6 = avlTreeMedian3.find(binarynode_i5);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor7 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals8 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST9 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array11 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = sortedArrayToBST9.transform(i_array11);
        boolean b13 = binarynode_i12.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST14 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array16 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = sortedArrayToBST14.transform(i_array16);
        boolean b18 = binarynode_i17.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i19 = binarynode_i17.getRight();
        boolean b20 = binaryTreeEquals8.areEqualsIterative(binarynode_i12, binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = binarynode_i24.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST26 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array28 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i29 = sortedArrayToBST26.transform(i_array28);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode30 = lowestCommonAncestor7.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i29);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i31 = binarynode_i17.getLeft();
        double d32 = avlTreeMedian3.find(binarynode_i17);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST33 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array35 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i36 = sortedArrayToBST33.transform(i_array35);
        boolean b37 = binarynode_i36.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i38 = binarynode_i36.getRight();
        java.lang.Integer i39 = binarynode_i36.getData();
        binarynode_i17.setLeft(binarynode_i36);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i41 = binaryTreeInOrder2.getIterative(binarynode_i36);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST42 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array44 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i45 = sortedArrayToBST42.transform(i_array44);
        java.lang.String str46 = binarynode_i45.toString();
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i47 = binaryTreeInOrder2.getIterative(binarynode_i45);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode48 = pathToEveryLeaf0.calculate(binarynode_i45);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder49 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian50 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i52 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d53 = avlTreeMedian50.find(binarynode_i52);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode54 = binaryTreePreOrder49.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i52);
        com.github.pedrovgs.problem18.IsBST isBST55 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST56 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array58 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = sortedArrayToBST56.transform(i_array58);
        boolean b60 = isBST55.checkRecursive(binarynode_i59);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode61 = binaryTreePreOrder49.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i59);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode62 = pathToEveryLeaf0.calculate(binarynode_i59);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i64 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 27);
        java.util.List<java.util.List<com.github.pedrovgs.binarytree.BinaryNode>> list_list_binaryNode65 = pathToEveryLeaf0.calculate(binarynode_i64);
        java.lang.Integer i66 = binarynode_i64.getData();
        org.junit.Assert.assertTrue(d6 == 10.0d);
        org.junit.Assert.assertNotNull(i_array11);
        org.junit.Assert.assertNotNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == false);
        org.junit.Assert.assertNotNull(i_array16);
        org.junit.Assert.assertNotNull(binarynode_i17);
        org.junit.Assert.assertTrue(b18 == false);
        org.junit.Assert.assertNull(binarynode_i19);
        org.junit.Assert.assertTrue(b20 == true);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == false);
        org.junit.Assert.assertNotNull(i_array28);
        org.junit.Assert.assertNotNull(binarynode_i29);
        org.junit.Assert.assertNull(binaryNode30);
        org.junit.Assert.assertNull(binarynode_i31);
        org.junit.Assert.assertTrue(d32 == 100.0d);
        org.junit.Assert.assertNotNull(i_array35);
        org.junit.Assert.assertNotNull(binarynode_i36);
        org.junit.Assert.assertTrue(b37 == false);
        org.junit.Assert.assertNull(binarynode_i38);
        org.junit.Assert.assertTrue("'" + i39 + "' != '" + 100 + "'", i39.equals(100));
        org.junit.Assert.assertNotNull(list_binarynode_i41);
        org.junit.Assert.assertNotNull(i_array44);
        org.junit.Assert.assertNotNull(binarynode_i45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "BinaryNode{data=100}" + "'", str46.equals("BinaryNode{data=100}"));
        org.junit.Assert.assertNotNull(list_binarynode_i47);
        org.junit.Assert.assertNotNull(list_list_binaryNode48);
        org.junit.Assert.assertTrue(d53 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode54);
        org.junit.Assert.assertNotNull(i_array58);
        org.junit.Assert.assertNotNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == true);
        org.junit.Assert.assertNotNull(list_binaryNode61);
        org.junit.Assert.assertNotNull(list_list_binaryNode62);
        org.junit.Assert.assertNotNull(list_list_binaryNode65);
        org.junit.Assert.assertTrue("'" + i66 + "' != '" + 27 + "'", i66.equals(27));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test497");
        com.github.pedrovgs.problem50.UniqueChars uniqueChars0 = new com.github.pedrovgs.problem50.UniqueChars();
        boolean b2 = uniqueChars0.evaluate2("/hi!/");
        boolean b4 = uniqueChars0.evaluate("[null]");
        org.junit.Assert.assertTrue(b2 == false);
        org.junit.Assert.assertTrue(b4 == false);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test498");
        com.github.pedrovgs.problem15.BinaryTreeInOrder binaryTreeInOrder0 = new com.github.pedrovgs.problem15.BinaryTreeInOrder();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals1 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST2 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array4 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i5 = sortedArrayToBST2.transform(i_array4);
        boolean b6 = binarynode_i5.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST7 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array9 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i10 = sortedArrayToBST7.transform(i_array9);
        boolean b11 = binarynode_i10.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i12 = binarynode_i10.getRight();
        boolean b13 = binaryTreeEquals1.areEqualsIterative(binarynode_i5, binarynode_i10);
        com.github.pedrovgs.problem14.BinaryTreePreOrder binaryTreePreOrder14 = new com.github.pedrovgs.problem14.BinaryTreePreOrder();
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian15 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i17 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d18 = avlTreeMedian15.find(binarynode_i17);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode19 = binaryTreePreOrder14.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i17);
        com.github.pedrovgs.problem18.IsBST isBST20 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST21 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array23 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i24 = sortedArrayToBST21.transform(i_array23);
        boolean b25 = isBST20.checkRecursive(binarynode_i24);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode26 = binaryTreePreOrder14.getIterative((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i24);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals27 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem18.IsBST isBST28 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST29 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array31 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i32 = sortedArrayToBST29.transform(i_array31);
        boolean b33 = isBST28.checkRecursive(binarynode_i32);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST34 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array36 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i37 = sortedArrayToBST34.transform(i_array36);
        boolean b38 = binarynode_i37.hasRight();
        boolean b39 = binaryTreeEquals27.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i32, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i37);
        com.github.pedrovgs.problem18.IsBST isBST40 = new com.github.pedrovgs.problem18.IsBST();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST41 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array43 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i44 = sortedArrayToBST41.transform(i_array43);
        boolean b45 = isBST40.checkRecursive(binarynode_i44);
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals46 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST47 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array49 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i50 = sortedArrayToBST47.transform(i_array49);
        boolean b51 = binarynode_i50.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST52 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array54 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i55 = sortedArrayToBST52.transform(i_array54);
        boolean b56 = binarynode_i55.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i57 = binarynode_i55.getRight();
        boolean b58 = binaryTreeEquals46.areEqualsIterative(binarynode_i50, binarynode_i55);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i59 = binarynode_i50.getLeft();
        boolean b60 = isBST40.checkIterative(binarynode_i50);
        com.github.pedrovgs.problem36.AvlTreeMedian avlTreeMedian61 = new com.github.pedrovgs.problem36.AvlTreeMedian();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i63 = new com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>((java.lang.Integer) 10);
        double d64 = avlTreeMedian61.find(binarynode_i63);
        com.github.pedrovgs.problem21.LowestCommonAncestor lowestCommonAncestor65 = new com.github.pedrovgs.problem21.LowestCommonAncestor();
        com.github.pedrovgs.problem17.BinaryTreeEquals binaryTreeEquals66 = new com.github.pedrovgs.problem17.BinaryTreeEquals();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST67 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array69 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i70 = sortedArrayToBST67.transform(i_array69);
        boolean b71 = binarynode_i70.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST72 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array74 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i75 = sortedArrayToBST72.transform(i_array74);
        boolean b76 = binarynode_i75.hasRight();
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i77 = binarynode_i75.getRight();
        boolean b78 = binaryTreeEquals66.areEqualsIterative(binarynode_i70, binarynode_i75);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST79 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array81 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i82 = sortedArrayToBST79.transform(i_array81);
        boolean b83 = binarynode_i82.hasRight();
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST84 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array86 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i87 = sortedArrayToBST84.transform(i_array86);
        com.github.pedrovgs.binarytree.BinaryNode binaryNode88 = lowestCommonAncestor65.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i82, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i87);
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i89 = binarynode_i75.getLeft();
        double d90 = avlTreeMedian61.find(binarynode_i75);
        boolean b91 = isBST40.checkRecursive(binarynode_i75);
        binarynode_i32.setRight(binarynode_i75);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode> list_binaryNode93 = binaryTreePreOrder14.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75);
        com.github.pedrovgs.problem24.SortedArrayToBST sortedArrayToBST94 = new com.github.pedrovgs.problem24.SortedArrayToBST();
        java.lang.Integer[] i_array96 = new java.lang.Integer[] { 100 };
        com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer> binarynode_i97 = sortedArrayToBST94.transform(i_array96);
        boolean b98 = binaryTreeEquals1.areEqualsRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i75, (com.github.pedrovgs.binarytree.BinaryNode) binarynode_i97);
        java.util.List<com.github.pedrovgs.binarytree.BinaryNode<java.lang.Integer>> list_binarynode_i99 = binaryTreeInOrder0.getRecursive((com.github.pedrovgs.binarytree.BinaryNode) binarynode_i97);
        org.junit.Assert.assertNotNull(i_array4);
        org.junit.Assert.assertNotNull(binarynode_i5);
        org.junit.Assert.assertTrue(b6 == false);
        org.junit.Assert.assertNotNull(i_array9);
        org.junit.Assert.assertNotNull(binarynode_i10);
        org.junit.Assert.assertTrue(b11 == false);
        org.junit.Assert.assertNull(binarynode_i12);
        org.junit.Assert.assertTrue(b13 == true);
        org.junit.Assert.assertTrue(d18 == 10.0d);
        org.junit.Assert.assertNotNull(list_binaryNode19);
        org.junit.Assert.assertNotNull(i_array23);
        org.junit.Assert.assertNotNull(binarynode_i24);
        org.junit.Assert.assertTrue(b25 == true);
        org.junit.Assert.assertNotNull(list_binaryNode26);
        org.junit.Assert.assertNotNull(i_array31);
        org.junit.Assert.assertNotNull(binarynode_i32);
        org.junit.Assert.assertTrue(b33 == true);
        org.junit.Assert.assertNotNull(i_array36);
        org.junit.Assert.assertNotNull(binarynode_i37);
        org.junit.Assert.assertTrue(b38 == false);
        org.junit.Assert.assertTrue(b39 == true);
        org.junit.Assert.assertNotNull(i_array43);
        org.junit.Assert.assertNotNull(binarynode_i44);
        org.junit.Assert.assertTrue(b45 == true);
        org.junit.Assert.assertNotNull(i_array49);
        org.junit.Assert.assertNotNull(binarynode_i50);
        org.junit.Assert.assertTrue(b51 == false);
        org.junit.Assert.assertNotNull(i_array54);
        org.junit.Assert.assertNotNull(binarynode_i55);
        org.junit.Assert.assertTrue(b56 == false);
        org.junit.Assert.assertNull(binarynode_i57);
        org.junit.Assert.assertTrue(b58 == true);
        org.junit.Assert.assertNull(binarynode_i59);
        org.junit.Assert.assertTrue(b60 == true);
        org.junit.Assert.assertTrue(d64 == 10.0d);
        org.junit.Assert.assertNotNull(i_array69);
        org.junit.Assert.assertNotNull(binarynode_i70);
        org.junit.Assert.assertTrue(b71 == false);
        org.junit.Assert.assertNotNull(i_array74);
        org.junit.Assert.assertNotNull(binarynode_i75);
        org.junit.Assert.assertTrue(b76 == false);
        org.junit.Assert.assertNull(binarynode_i77);
        org.junit.Assert.assertTrue(b78 == true);
        org.junit.Assert.assertNotNull(i_array81);
        org.junit.Assert.assertNotNull(binarynode_i82);
        org.junit.Assert.assertTrue(b83 == false);
        org.junit.Assert.assertNotNull(i_array86);
        org.junit.Assert.assertNotNull(binarynode_i87);
        org.junit.Assert.assertNull(binaryNode88);
        org.junit.Assert.assertNull(binarynode_i89);
        org.junit.Assert.assertTrue(d90 == 100.0d);
        org.junit.Assert.assertTrue(b91 == true);
        org.junit.Assert.assertNotNull(list_binaryNode93);
        org.junit.Assert.assertNotNull(i_array96);
        org.junit.Assert.assertNotNull(binarynode_i97);
        org.junit.Assert.assertTrue(b98 == true);
        org.junit.Assert.assertNotNull(list_binarynode_i99);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test499");
        com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2 stack2_0 = new com.github.pedrovgs.problem63.ConstantComplexityOrderStack.Stack2();
        stack2_0.push((-1));
        java.lang.Integer i3 = stack2_0.peek();
        java.lang.Integer i4 = stack2_0.pop();
        stack2_0.push(100);
        java.lang.Integer i7 = stack2_0.peek();
        stack2_0.trimToSize();
        try {
            java.util.ListIterator<java.lang.Integer> listiterator_i10 = stack2_0.listIterator(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + i3 + "' != '" + (-1) + "'", i3.equals((-1)));
        org.junit.Assert.assertTrue("'" + i4 + "' != '" + (-1) + "'", i4.equals((-1)));
        org.junit.Assert.assertTrue("'" + i7 + "' != '" + 100 + "'", i7.equals(100));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test500");
        com.github.pedrovgs.problem73.SubtractAdding subtractAdding0 = new com.github.pedrovgs.problem73.SubtractAdding();
        int i3 = subtractAdding0.subtract((int) '4', (int) (short) 1);
        int i6 = subtractAdding0.subtract(72, (-6));
        int i9 = subtractAdding0.subtract(49, 4);
        int i12 = subtractAdding0.subtract((-7), 20);
        org.junit.Assert.assertTrue(i3 == 51);
        org.junit.Assert.assertTrue(i6 == 78);
        org.junit.Assert.assertTrue(i9 == 45);
        org.junit.Assert.assertTrue(i12 == (-27));
    }
}


